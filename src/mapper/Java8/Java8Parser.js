// Generated from C:\Users\RYOSUKE\eclipse\java-oxygen\eclipse\..\..\..\eclipse-workspace\net.unicoen\UniMapperGenerator\src-gen\Java8.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var Java8Visitor = require('./Java8Visitor').Java8Visitor;

var grammarFileName = "Java8.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003m\u0c00\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004",
    "y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004\u007f\t",
    "\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t\u0082\u0004",
    "\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004\u0086\t",
    "\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t\u0089\u0004",
    "\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004\u008d\t",
    "\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t\u0090\u0004",
    "\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004\u0094\t",
    "\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t\u0097\u0004",
    "\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004\u009b\t",
    "\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t\u009e\u0004",
    "\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004\u00a2\t",
    "\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t\u00a5\u0004",
    "\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004\u00a9\t",
    "\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t\u00ac\u0004",
    "\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004\u00b0\t",
    "\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t\u00b3\u0004",
    "\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004\u00b7\t",
    "\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t\u00ba\u0004",
    "\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004\u00be\t",
    "\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t\u00c1\u0004",
    "\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004\u00c5\t",
    "\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t\u00c8\u0004",
    "\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004\u00cc\t",
    "\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t\u00cf\u0004",
    "\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004\u00d3\t",
    "\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t\u00d6\u0004",
    "\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004\u00da\t",
    "\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t\u00dd\u0004",
    "\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004\u00e1\t",
    "\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t\u00e4\u0004",
    "\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004\u00e8\t",
    "\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t\u00eb\u0004",
    "\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004\u00ef\t",
    "\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t\u00f2\u0004",
    "\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004\u00f6\t",
    "\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t\u00f9\u0004",
    "\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004\u00fd\t",
    "\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t\u0100\u0004",
    "\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004\u0104\t",
    "\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t\u0107\u0004",
    "\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004\u010b\t",
    "\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t\u010e\u0004",
    "\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004\u0112\t",
    "\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t\u0115\u0004",
    "\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004\u0119\t",
    "\u0119\u0004\u011a\t\u011a\u0003\u0002\u0005\u0002\u0236\n\u0002\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005",
    "\u0003\u023e\n\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003",
    "\t\u0003\t\u0003\n\u0003\n\u0005\n\u024e\n\n\u0003\u000b\u0007\u000b",
    "\u0251\n\u000b\f\u000b\u000e\u000b\u0254\u000b\u000b\u0003\u000b\u0003",
    "\u000b\u0007\u000b\u0258\n\u000b\f\u000b\u000e\u000b\u025b\u000b\u000b",
    "\u0003\u000b\u0005\u000b\u025e\n\u000b\u0003\f\u0003\f\u0005\f\u0262",
    "\n\f\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u026b\n\u000f\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u026f\n\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0273\n\u0010",
    "\f\u0010\u000e\u0010\u0276\u000b\u0010\u0003\u0011\u0007\u0011\u0279",
    "\n\u0011\f\u0011\u000e\u0011\u027c\u000b\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u0280\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007",
    "\u0011\u0285\n\u0011\f\u0011\u000e\u0011\u0288\u000b\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u028c\n\u0011\u0005\u0011\u028e\n\u0011\u0003",
    "\u0012\u0003\u0012\u0007\u0012\u0292\n\u0012\f\u0012\u000e\u0012\u0295",
    "\u000b\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0299\n\u0012\u0003",
    "\u0013\u0007\u0013\u029c\n\u0013\f\u0013\u000e\u0013\u029f\u000b\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u02a3\n\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0017\u0007",
    "\u0017\u02ac\n\u0017\f\u0017\u000e\u0017\u02af\u000b\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u02bc\n",
    "\u0018\u0003\u0019\u0007\u0019\u02bf\n\u0019\f\u0019\u000e\u0019\u02c2",
    "\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u02c7\n",
    "\u0019\f\u0019\u000e\u0019\u02ca\u000b\u0019\u0003\u0019\u0003\u0019",
    "\u0007\u0019\u02ce\n\u0019\f\u0019\u000e\u0019\u02d1\u000b\u0019\u0003",
    "\u001a\u0007\u001a\u02d4\n\u001a\f\u001a\u000e\u001a\u02d7\u000b\u001a",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u02db\n\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007",
    "\u001c\u02e4\n\u001c\f\u001c\u000e\u001c\u02e7\u000b\u001c\u0005\u001c",
    "\u02e9\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0007",
    "\u001f\u02f5\n\u001f\f\u001f\u000e\u001f\u02f8\u000b\u001f\u0003 \u0003",
    " \u0005 \u02fc\n \u0003!\u0007!\u02ff\n!\f!\u000e!\u0302\u000b!\u0003",
    "!\u0003!\u0005!\u0306\n!\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u030c",
    "\n\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u0314\n#\f#\u000e",
    "#\u0317\u000b#\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u031e\n$\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007%\u0326\n%\f%\u000e%\u0329",
    "\u000b%\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0330\n&\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u0338\n\'\f\'\u000e\'\u033b",
    "\u000b\'\u0003(\u0005(\u033e\n(\u0003(\u0007(\u0341\n(\f(\u000e(\u0344",
    "\u000b(\u0003(\u0007(\u0347\n(\f(\u000e(\u034a\u000b(\u0003)\u0007)",
    "\u034d\n)\f)\u000e)\u0350\u000b)\u0003)\u0003)\u0003)\u0003)\u0007)",
    "\u0356\n)\f)\u000e)\u0359\u000b)\u0003)\u0003)\u0003*\u0003*\u0003+",
    "\u0003+\u0003+\u0003+\u0005+\u0363\n+\u0003,\u0003,\u0003,\u0003,\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "0\u00030\u00030\u00050\u0380\n0\u00031\u00031\u00051\u0384\n1\u0003",
    "2\u00032\u00032\u00032\u00052\u038a\n2\u00032\u00052\u038d\n2\u0003",
    "2\u00052\u0390\n2\u00032\u00032\u00033\u00033\u00034\u00074\u0397\n",
    "4\f4\u000e4\u039a\u000b4\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00055\u03a4\n5\u00036\u00036\u00036\u00036\u00037\u00037\u0003",
    "7\u00077\u03ad\n7\f7\u000e7\u03b0\u000b7\u00038\u00038\u00038\u0003",
    "9\u00039\u00039\u0003:\u0003:\u0003:\u0007:\u03bb\n:\f:\u000e:\u03be",
    "\u000b:\u0003;\u0003;\u0007;\u03c2\n;\f;\u000e;\u03c5\u000b;\u0003;",
    "\u0003;\u0003<\u0003<\u0003<\u0003<\u0005<\u03cd\n<\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0005=\u03d4\n=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    "?\u0007?\u03dc\n?\f?\u000e?\u03df\u000b?\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0005@\u03e9\n@\u0003A\u0003A\u0003A\u0007",
    "A\u03ee\nA\fA\u000eA\u03f1\u000bA\u0003B\u0003B\u0003B\u0005B\u03f6",
    "\nB\u0003C\u0003C\u0005C\u03fa\nC\u0003D\u0003D\u0005D\u03fe\nD\u0003",
    "E\u0003E\u0005E\u0402\nE\u0003F\u0003F\u0005F\u0406\nF\u0003G\u0003",
    "G\u0003G\u0005G\u040b\nG\u0003H\u0003H\u0005H\u040f\nH\u0003H\u0003",
    "H\u0007H\u0413\nH\fH\u000eH\u0416\u000bH\u0003I\u0003I\u0005I\u041a",
    "\nI\u0003I\u0003I\u0003I\u0007I\u041f\nI\fI\u000eI\u0422\u000bI\u0003",
    "I\u0003I\u0005I\u0426\nI\u0005I\u0428\nI\u0003J\u0003J\u0007J\u042c",
    "\nJ\fJ\u000eJ\u042f\u000bJ\u0003J\u0003J\u0005J\u0433\nJ\u0003K\u0003",
    "K\u0005K\u0437\nK\u0003L\u0003L\u0003M\u0003M\u0003N\u0003N\u0003O\u0003",
    "O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0005",
    "P\u044a\nP\u0003Q\u0007Q\u044d\nQ\fQ\u000eQ\u0450\u000bQ\u0003Q\u0003",
    "Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0005R\u045f\nR\u0003S\u0003S\u0003S\u0005S\u0464\nS\u0003",
    "S\u0003S\u0007S\u0468\nS\fS\u000eS\u046b\u000bS\u0003S\u0003S\u0003",
    "S\u0005S\u0470\nS\u0005S\u0472\nS\u0003T\u0003T\u0005T\u0476\nT\u0003",
    "U\u0003U\u0003U\u0005U\u047b\nU\u0003U\u0003U\u0005U\u047f\nU\u0003",
    "V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u0488\nW\u0003X\u0003",
    "X\u0003X\u0007X\u048d\nX\fX\u000eX\u0490\u000bX\u0003X\u0003X\u0003",
    "X\u0007X\u0495\nX\fX\u000eX\u0498\u000bX\u0005X\u049a\nX\u0003Y\u0007",
    "Y\u049d\nY\fY\u000eY\u04a0\u000bY\u0003Y\u0003Y\u0003Y\u0003Z\u0003",
    "Z\u0003[\u0003[\u0005[\u04a9\n[\u0003\\\u0003\\\u0003]\u0003]\u0005",
    "]\u04af\n]\u0003^\u0007^\u04b2\n^\f^\u000e^\u04b5\u000b^\u0003^\u0003",
    "^\u0007^\u04b9\n^\f^\u000e^\u04bc\u000b^\u0003^\u0003^\u0003^\u0003",
    "^\u0005^\u04c2\n^\u0003_\u0007_\u04c5\n_\f_\u000e_\u04c8\u000b_\u0003",
    "_\u0003_\u0003_\u0005_\u04cd\n_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003",
    "a\u0003a\u0003a\u0007a\u04d7\na\fa\u000ea\u04da\u000ba\u0003b\u0003",
    "b\u0005b\u04de\nb\u0003c\u0003c\u0005c\u04e2\nc\u0003d\u0003d\u0003",
    "e\u0003e\u0003e\u0003f\u0007f\u04ea\nf\ff\u000ef\u04ed\u000bf\u0003",
    "f\u0003f\u0005f\u04f1\nf\u0003f\u0003f\u0003g\u0003g\u0003g\u0003g\u0005",
    "g\u04f9\ng\u0003h\u0005h\u04fc\nh\u0003h\u0003h\u0003h\u0005h\u0501",
    "\nh\u0003h\u0003h\u0003i\u0003i\u0003j\u0003j\u0005j\u0509\nj\u0003",
    "j\u0005j\u050c\nj\u0003j\u0003j\u0003k\u0005k\u0511\nk\u0003k\u0003",
    "k\u0003k\u0005k\u0516\nk\u0003k\u0003k\u0003k\u0005k\u051b\nk\u0003",
    "k\u0003k\u0003k\u0005k\u0520\nk\u0003k\u0003k\u0003k\u0003k\u0003k\u0005",
    "k\u0527\nk\u0003k\u0003k\u0003k\u0005k\u052c\nk\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0005k\u0534\nk\u0003k\u0003k\u0003k\u0005k\u0539",
    "\nk\u0003k\u0003k\u0003k\u0005k\u053e\nk\u0003l\u0007l\u0541\nl\fl\u000e",
    "l\u0544\u000bl\u0003l\u0003l\u0003l\u0005l\u0549\nl\u0003l\u0003l\u0003",
    "m\u0003m\u0005m\u054f\nm\u0003m\u0005m\u0552\nm\u0003m\u0005m\u0555",
    "\nm\u0003m\u0003m\u0003n\u0003n\u0003n\u0007n\u055c\nn\fn\u000en\u055f",
    "\u000bn\u0003o\u0007o\u0562\no\fo\u000eo\u0565\u000bo\u0003o\u0003o",
    "\u0003o\u0005o\u056a\no\u0003o\u0005o\u056d\no\u0003o\u0005o\u0570\n",
    "o\u0003p\u0003p\u0003q\u0003q\u0007q\u0576\nq\fq\u000eq\u0579\u000b",
    "q\u0003r\u0003r\u0005r\u057d\nr\u0003s\u0003s\u0003s\u0003s\u0005s\u0583",
    "\ns\u0003s\u0005s\u0586\ns\u0003s\u0003s\u0003t\u0007t\u058b\nt\ft\u000e",
    "t\u058e\u000bt\u0003u\u0003u\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0003v\u0005v\u0599\nv\u0003w\u0003w\u0003w\u0003x\u0003x\u0007x\u05a0",
    "\nx\fx\u000ex\u05a3\u000bx\u0003x\u0003x\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0005y\u05ac\ny\u0003z\u0003z\u0003z\u0003z\u0003z\u0003{\u0007",
    "{\u05b4\n{\f{\u000e{\u05b7\u000b{\u0003|\u0003|\u0003|\u0003|\u0005",
    "|\u05bd\n|\u0003}\u0003}\u0003}\u0003}\u0003~\u0007~\u05c4\n~\f~\u000e",
    "~\u05c7\u000b~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0005\u007f\u05cf\n\u007f\u0003\u0080\u0007\u0080",
    "\u05d2\n\u0080\f\u0080\u000e\u0080\u05d5\u000b\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0007",
    "\u0081\u05de\n\u0081\f\u0081\u000e\u0081\u05e1\u000b\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0005\u0082\u05ea\n\u0082\u0003\u0083\u0007\u0083\u05ed\n\u0083\f\u0083",
    "\u000e\u0083\u05f0\u000b\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0005\u0083\u05f7\n\u0083\u0003\u0083\u0005\u0083",
    "\u05fa\n\u0083\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0005\u0084\u0601\n\u0084\u0003\u0085\u0003\u0085\u0003\u0085",
    "\u0003\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u0609\n\u0086\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u060f\n\u0087",
    "\u0003\u0087\u0003\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0007\u0088",
    "\u0616\n\u0088\f\u0088\u000e\u0088\u0619\u000b\u0088\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0005",
    "\u008a\u0622\n\u008a\u0003\u008b\u0003\u008b\u0005\u008b\u0626\n\u008b",
    "\u0003\u008b\u0005\u008b\u0629\n\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008c\u0003\u008c\u0003\u008c\u0007\u008c\u0630\n\u008c\f\u008c\u000e",
    "\u008c\u0633\u000b\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008f",
    "\u0003\u008f\u0005\u008f\u0640\n\u008f\u0003\u008f\u0005\u008f\u0643",
    "\n\u008f\u0003\u008f\u0003\u008f\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0007\u0090\u064a\n\u0090\f\u0090\u000e\u0090\u064d\u000b\u0090\u0003",
    "\u0091\u0003\u0091\u0005\u0091\u0651\n\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0092\u0003\u0092\u0007\u0092\u0657\n\u0092\f\u0092\u000e\u0092",
    "\u065a\u000b\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u065f",
    "\n\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0095\u0007\u0095",
    "\u0665\n\u0095\f\u0095\u000e\u0095\u0668\u000b\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003",
    "\u0096\u0003\u0096\u0005\u0096\u0673\n\u0096\u0003\u0097\u0003\u0097",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0005\u0097\u067a\n\u0097\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0005",
    "\u0098\u0688\n\u0098\u0003\u0099\u0003\u0099\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b",
    "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u069e\n",
    "\u009d\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003",
    "\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u06c0\n\u00a1\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a3",
    "\u0003\u00a3\u0007\u00a3\u06ca\n\u00a3\f\u00a3\u000e\u00a3\u06cd\u000b",
    "\u00a3\u0003\u00a3\u0007\u00a3\u06d0\n\u00a3\f\u00a3\u000e\u00a3\u06d3",
    "\u000b\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a4",
    "\u0003\u00a5\u0003\u00a5\u0007\u00a5\u06dc\n\u00a5\f\u00a5\u000e\u00a5",
    "\u06df\u000b\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005",
    "\u00a6\u06eb\n\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8",
    "\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0003\u00a9",
    "\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa",
    "\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0705\n\u00ab\u0003\u00ac\u0003",
    "\u00ac\u0005\u00ac\u0709\n\u00ac\u0003\u00ad\u0003\u00ad\u0003\u00ad",
    "\u0005\u00ad\u070e\n\u00ad\u0003\u00ad\u0003\u00ad\u0005\u00ad\u0712",
    "\n\u00ad\u0003\u00ad\u0003\u00ad\u0005\u00ad\u0716\n\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae",
    "\u071e\n\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u0722\n\u00ae\u0003",
    "\u00ae\u0003\u00ae\u0005\u00ae\u0726\n\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0003\u00af\u0003\u00af\u0005\u00af\u072d\n\u00af\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0007\u00b1\u0734",
    "\n\u00b1\f\u00b1\u000e\u00b1\u0737\u000b\u00b1\u0003\u00b2\u0003\u00b2",
    "\u0003\u00b2\u0007\u00b2\u073c\n\u00b2\f\u00b2\u000e\u00b2\u073f\u000b",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0007\u00b3\u074b",
    "\n\u00b3\f\u00b3\u000e\u00b3\u074e\u000b\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b4",
    "\u0003\u00b4\u0005\u00b4\u0759\n\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b5\u0003\u00b5\u0005\u00b5\u075f\n\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0765\n\u00b6\u0003\u00b6\u0003",
    "\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005",
    "\u00b9\u077a\n\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9",
    "\u077f\n\u00b9\u0003\u00ba\u0003\u00ba\u0007\u00ba\u0783\n\u00ba\f\u00ba",
    "\u000e\u00ba\u0786\u000b\u00ba\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0007\u00bc\u078f\n\u00bc",
    "\f\u00bc\u000e\u00bc\u0792\u000b\u00bc\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0007\u00bd\u079a\n\u00bd",
    "\f\u00bd\u000e\u00bd\u079d\u000b\u00bd\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u07a6",
    "\n\u00bf\u0003\u00bf\u0005\u00bf\u07a9\n\u00bf\u0003\u00c0\u0003\u00c0",
    "\u0003\u00c0\u0005\u00c0\u07ae\n\u00c0\u0003\u00c0\u0003\u00c0\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0007\u00c1\u07b5\n\u00c1\f\u00c1\u000e",
    "\u00c1\u07b8\u000b\u00c1\u0003\u00c2\u0007\u00c2\u07bb\n\u00c2\f\u00c2",
    "\u000e\u00c2\u07be\u000b\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c3\u0003\u00c3\u0005\u00c3\u07c7\n\u00c3",
    "\u0003\u00c3\u0007\u00c3\u07ca\n\u00c3\f\u00c3\u000e\u00c3\u07cd\u000b",
    "\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0007\u00c4\u07d3",
    "\n\u00c4\f\u00c4\u000e\u00c4\u07d6\u000b\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0005\u00c4\u07ec\n\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0007\u00c6\u07f4\n\u00c6\f\u00c6\u000e",
    "\u00c6\u07f7\u000b\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6\u080c\n\u00c6\u0003",
    "\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0813",
    "\n\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0005\u00c9\u081b\n\u00c9\u0003\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0007\u00ca\u0821\n\u00ca\f\u00ca\u000e\u00ca\u0824",
    "\u000b\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0007\u00ca\u082c\n\u00ca\f\u00ca\u000e\u00ca\u082f\u000b",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0845\n\u00ca\u0003\u00cb",
    "\u0003\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0007\u00cc",
    "\u084d\n\u00cc\f\u00cc\u000e\u00cc\u0850\u000b\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0007\u00cc\u0858",
    "\n\u00cc\f\u00cc\u000e\u00cc\u085b\u000b\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc",
    "\u0870\n\u00cc\u0003\u00cd\u0003\u00cd\u0005\u00cd\u0874\n\u00cd\u0003",
    "\u00cd\u0007\u00cd\u0877\n\u00cd\f\u00cd\u000e\u00cd\u087a\u000b\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0007\u00cd\u087f\n\u00cd\f\u00cd",
    "\u000e\u00cd\u0882\u000b\u00cd\u0003\u00cd\u0007\u00cd\u0885\n\u00cd",
    "\f\u00cd\u000e\u00cd\u0888\u000b\u00cd\u0003\u00cd\u0005\u00cd\u088b",
    "\n\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd\u088f\n\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0005\u00cd\u0893\n\u00cd\u0003\u00cd\u0003\u00cd\u0003",
    "\u00cd\u0003\u00cd\u0005\u00cd\u0899\n\u00cd\u0003\u00cd\u0007\u00cd",
    "\u089c\n\u00cd\f\u00cd\u000e\u00cd\u089f\u000b\u00cd\u0003\u00cd\u0003",
    "\u00cd\u0005\u00cd\u08a3\n\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd",
    "\u08a7\n\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd\u08ab\n\u00cd\u0003",
    "\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd\u08b1\n\u00cd",
    "\u0003\u00cd\u0007\u00cd\u08b4\n\u00cd\f\u00cd\u000e\u00cd\u08b7\u000b",
    "\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd\u08bb\n\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0005\u00cd\u08bf\n\u00cd\u0003\u00cd\u0003\u00cd\u0005",
    "\u00cd\u08c3\n\u00cd\u0005\u00cd\u08c5\n\u00cd\u0003\u00ce\u0003\u00ce",
    "\u0003\u00ce\u0005\u00ce\u08ca\n\u00ce\u0003\u00ce\u0007\u00ce\u08cd",
    "\n\u00ce\f\u00ce\u000e\u00ce\u08d0\u000b\u00ce\u0003\u00ce\u0003\u00ce",
    "\u0005\u00ce\u08d4\n\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u08d8",
    "\n\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u08dc\n\u00ce\u0003\u00cf",
    "\u0003\u00cf\u0005\u00cf\u08e0\n\u00cf\u0003\u00cf\u0007\u00cf\u08e3",
    "\n\u00cf\f\u00cf\u000e\u00cf\u08e6\u000b\u00cf\u0003\u00cf\u0003\u00cf",
    "\u0003\u00cf\u0007\u00cf\u08eb\n\u00cf\f\u00cf\u000e\u00cf\u08ee\u000b",
    "\u00cf\u0003\u00cf\u0007\u00cf\u08f1\n\u00cf\f\u00cf\u000e\u00cf\u08f4",
    "\u000b\u00cf\u0003\u00cf\u0005\u00cf\u08f7\n\u00cf\u0003\u00cf\u0003",
    "\u00cf\u0005\u00cf\u08fb\n\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf",
    "\u08ff\n\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005",
    "\u00cf\u0905\n\u00cf\u0003\u00cf\u0007\u00cf\u0908\n\u00cf\f\u00cf\u000e",
    "\u00cf\u090b\u000b\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u090f\n",
    "\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0913\n\u00cf\u0003\u00cf",
    "\u0003\u00cf\u0005\u00cf\u0917\n\u00cf\u0005\u00cf\u0919\n\u00cf\u0003",
    "\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u091e\n\u00d0\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0005\u00d1\u092d\n\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0003\u00d3\u0003\u00d3\u0005\u00d3\u093b\n\u00d3\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0005\u00d4\u0947\n\u00d4\u0003",
    "\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0007\u00d4\u094e",
    "\n\u00d4\f\u00d4\u000e\u00d4\u0951\u000b\u00d4\u0003\u00d5\u0003\u00d5",
    "\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5",
    "\u0003\u00d5\u0003\u00d5\u0007\u00d5\u095d\n\u00d5\f\u00d5\u000e\u00d5",
    "\u0960\u000b\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003",
    "\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0005",
    "\u00d6\u096c\n\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6",
    "\u0003\u00d6\u0007\u00d6\u0973\n\u00d6\f\u00d6\u000e\u00d6\u0976\u000b",
    "\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u097b\n\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7",
    "\u0982\n\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0987",
    "\n\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0005\u00d7\u098e\n\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005",
    "\u00d7\u0993\n\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0005\u00d7\u099a\n\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0005\u00d7\u099f\n\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0005\u00d7\u09a6\n\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0005\u00d7\u09ab\n\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u09b3\n",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u09b8\n\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0005\u00d7\u09bc\n\u00d7\u0003\u00d8\u0003",
    "\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0007\u00d9\u09c3\n\u00d9",
    "\f\u00d9\u000e\u00d9\u09c6\u000b\u00d9\u0003\u00da\u0003\u00da\u0003",
    "\u00db\u0003\u00db\u0005\u00db\u09cc\n\u00db\u0003\u00db\u0003\u00db",
    "\u0003\u00db\u0005\u00db\u09d1\n\u00db\u0003\u00db\u0003\u00db\u0003",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u09d8\n\u00dc\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u09df\n",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u09e4\n\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc",
    "\u09eb\n\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u09f0",
    "\n\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc",
    "\u0005\u00dc\u09f7\n\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005",
    "\u00dc\u09fc\n\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0005\u00dc\u0a04\n\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0003\u00dc\u0005\u00dc\u0a09\n\u00dc\u0003\u00dc\u0003\u00dc",
    "\u0005\u00dc\u0a0d\n\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0007",
    "\u00dd\u0a12\n\u00dd\f\u00dd\u000e\u00dd\u0a15\u000b\u00dd\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0005\u00de\u0a1a\n\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u0a21\n\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0005\u00de",
    "\u0a28\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0005\u00de\u0a2f\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u0a37\n\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u0a3e",
    "\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0005\u00de\u0a46\n\u00de\u0003\u00df\u0003\u00df\u0005",
    "\u00df\u0a4a\n\u00df\u0003\u00df\u0003\u00df\u0003\u00e0\u0003\u00e0",
    "\u0003\u00e0\u0005\u00e0\u0a51\n\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0a58\n\u00e0\u0003\u00e0",
    "\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0a5f\n",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0005\u00e0\u0a67\n\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0",
    "\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0a6e\n\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0a76",
    "\n\u00e0\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1",
    "\u0a7c\n\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0005",
    "\u00e1\u0a82\n\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0005\u00e1\u0a8e\n\u00e1\u0003\u00e2\u0003\u00e2\u0007\u00e2\u0a92",
    "\n\u00e2\f\u00e2\u000e\u00e2\u0a95\u000b\u00e2\u0003\u00e3\u0007\u00e3",
    "\u0a98\n\u00e3\f\u00e3\u000e\u00e3\u0a9b\u000b\u00e3\u0003\u00e3\u0003",
    "\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e5\u0003",
    "\u00e5\u0005\u00e5\u0aa5\n\u00e5\u0003\u00e6\u0003\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005\u00e7\u0aae\n",
    "\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005",
    "\u00e7\u0ab5\n\u00e7\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0007\u00e8",
    "\u0aba\n\u00e8\f\u00e8\u000e\u00e8\u0abd\u000b\u00e8\u0003\u00e9\u0003",
    "\u00e9\u0005\u00e9\u0ac1\n\u00e9\u0003\u00ea\u0003\u00ea\u0005\u00ea",
    "\u0ac5\n\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003",
    "\u00ec\u0003\u00ec\u0003\u00ec\u0005\u00ec\u0ace\n\u00ec\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee",
    "\u0003\u00ee\u0003\u00ee\u0005\u00ee\u0ad9\n\u00ee\u0003\u00ef\u0003",
    "\u00ef\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003",
    "\u00f0\u0003\u00f0\u0007\u00f0\u0ae4\n\u00f0\f\u00f0\u000e\u00f0\u0ae7",
    "\u000b\u00f0\u0003\u00f1\u0003\u00f1\u0003\u00f2\u0003\u00f2\u0003\u00f2",
    "\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0007\u00f2\u0af2\n",
    "\u00f2\f\u00f2\u000e\u00f2\u0af5\u000b\u00f2\u0003\u00f3\u0003\u00f3",
    "\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4",
    "\u0003\u00f4\u0007\u00f4\u0b00\n\u00f4\f\u00f4\u000e\u00f4\u0b03\u000b",
    "\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0007\u00f6\u0b0e\n\u00f6",
    "\f\u00f6\u000e\u00f6\u0b11\u000b\u00f6\u0003\u00f7\u0003\u00f7\u0003",
    "\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003",
    "\u00f8\u0007\u00f8\u0b1c\n\u00f8\f\u00f8\u000e\u00f8\u0b1f\u000b\u00f8",
    "\u0003\u00f9\u0003\u00f9\u0003\u00fa\u0003\u00fa\u0003\u00fb\u0003\u00fb",
    "\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb",
    "\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0007\u00fb\u0b30\n\u00fb\f\u00fb",
    "\u000e\u00fb\u0b33\u000b\u00fb\u0003\u00fc\u0003\u00fc\u0003\u00fd\u0003",
    "\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00ff\u0003\u00ff\u0003\u0100\u0003",
    "\u0100\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003",
    "\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003",
    "\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003",
    "\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0007",
    "\u0101\u0b56\n\u0101\f\u0101\u000e\u0101\u0b59\u000b\u0101\u0003\u0102",
    "\u0003\u0102\u0003\u0102\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0104",
    "\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0105\u0003\u0105\u0003\u0105",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105",
    "\u0007\u0105\u0b74\n\u0105\f\u0105\u000e\u0105\u0b77\u000b\u0105\u0003",
    "\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003",
    "\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0007\u0106\u0b84",
    "\n\u0106\f\u0106\u000e\u0106\u0b87\u000b\u0106\u0003\u0107\u0003\u0107",
    "\u0003\u0108\u0003\u0108\u0003\u0109\u0003\u0109\u0003\u010a\u0003\u010a",
    "\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a",
    "\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a",
    "\u0003\u010a\u0007\u010a\u0b9e\n\u010a\f\u010a\u000e\u010a\u0ba1\u000b",
    "\u010a\u0003\u010b\u0003\u010b\u0003\u010c\u0003\u010c\u0003\u010d\u0003",
    "\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0003",
    "\u010d\u0003\u010d\u0005\u010d\u0bb0\n\u010d\u0003\u010e\u0003\u010e",
    "\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u0110\u0003\u0110\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0112\u0003\u0112\u0003\u0113\u0003\u0113",
    "\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114",
    "\u0003\u0114\u0003\u0114\u0005\u0114\u0bc8\n\u0114\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0005\u0115\u0bce\n\u0115\u0003\u0115",
    "\u0003\u0115\u0007\u0115\u0bd2\n\u0115\f\u0115\u000e\u0115\u0bd5\u000b",
    "\u0115\u0005\u0115\u0bd7\n\u0115\u0003\u0116\u0003\u0116\u0003\u0116",
    "\u0003\u0117\u0003\u0117\u0003\u0118\u0003\u0118\u0003\u0118\u0003\u0119",
    "\u0003\u0119\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a",
    "\u0003\u011a\u0003\u011a\u0003\u011a\u0007\u011a\u0beb\n\u011a\f\u011a",
    "\u000e\u011a\u0bee\u000b\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0007\u011a\u0bf6\n\u011a\f\u011a\u000e",
    "\u011a\u0bf9\u000b\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0005\u011a",
    "\u0bfe\n\u011a\u0003\u011a\u0002\u000fDHL\u01de\u01e2\u01e6\u01ea\u01ee",
    "\u01f4\u0200\u0208\u020a\u0212\u011b\u0002\u0004\u0006\b\n\f\u000e\u0010",
    "\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLN",
    "PRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c",
    "\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4",
    "\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc",
    "\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4",
    "\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec",
    "\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104",
    "\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c",
    "\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134",
    "\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c",
    "\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164",
    "\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c",
    "\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194",
    "\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac",
    "\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4",
    "\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc",
    "\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4",
    "\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c",
    "\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224",
    "\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0002\u0005\u0007\u0002\u0007",
    "\u0007\n\n\u001d\u001d\u001f\u001f\'\'\u0004\u0002\u0010\u0010\u0016",
    "\u0016\u0004\u0002DD]g\u0002\u0ccf\u0002\u0235\u0003\u0002\u0002\u0002",
    "\u0004\u023d\u0003\u0002\u0002\u0002\u0006\u023f\u0003\u0002\u0002\u0002",
    "\b\u0241\u0003\u0002\u0002\u0002\n\u0243\u0003\u0002\u0002\u0002\f\u0245",
    "\u0003\u0002\u0002\u0002\u000e\u0247\u0003\u0002\u0002\u0002\u0010\u0249",
    "\u0003\u0002\u0002\u0002\u0012\u024d\u0003\u0002\u0002\u0002\u0014\u025d",
    "\u0003\u0002\u0002\u0002\u0016\u0261\u0003\u0002\u0002\u0002\u0018\u0263",
    "\u0003\u0002\u0002\u0002\u001a\u0265\u0003\u0002\u0002\u0002\u001c\u026a",
    "\u0003\u0002\u0002\u0002\u001e\u026e\u0003\u0002\u0002\u0002 \u028d",
    "\u0003\u0002\u0002\u0002\"\u028f\u0003\u0002\u0002\u0002$\u029d\u0003",
    "\u0002\u0002\u0002&\u02a4\u0003\u0002\u0002\u0002(\u02a6\u0003\u0002",
    "\u0002\u0002*\u02a8\u0003\u0002\u0002\u0002,\u02ad\u0003\u0002\u0002",
    "\u0002.\u02bb\u0003\u0002\u0002\u00020\u02c0\u0003\u0002\u0002\u0002",
    "2\u02d5\u0003\u0002\u0002\u00024\u02dc\u0003\u0002\u0002\u00026\u02e8",
    "\u0003\u0002\u0002\u00028\u02ea\u0003\u0002\u0002\u0002:\u02ed\u0003",
    "\u0002\u0002\u0002<\u02f1\u0003\u0002\u0002\u0002>\u02fb\u0003\u0002",
    "\u0002\u0002@\u0300\u0003\u0002\u0002\u0002B\u030b\u0003\u0002\u0002",
    "\u0002D\u030d\u0003\u0002\u0002\u0002F\u031d\u0003\u0002\u0002\u0002",
    "H\u031f\u0003\u0002\u0002\u0002J\u032f\u0003\u0002\u0002\u0002L\u0331",
    "\u0003\u0002\u0002\u0002N\u033d\u0003\u0002\u0002\u0002P\u034e\u0003",
    "\u0002\u0002\u0002R\u035c\u0003\u0002\u0002\u0002T\u0362\u0003\u0002",
    "\u0002\u0002V\u0364\u0003\u0002\u0002\u0002X\u0368\u0003\u0002\u0002",
    "\u0002Z\u036e\u0003\u0002\u0002\u0002\\\u0375\u0003\u0002\u0002\u0002",
    "^\u037f\u0003\u0002\u0002\u0002`\u0383\u0003\u0002\u0002\u0002b\u0385",
    "\u0003\u0002\u0002\u0002d\u0393\u0003\u0002\u0002\u0002f\u0398\u0003",
    "\u0002\u0002\u0002h\u03a3\u0003\u0002\u0002\u0002j\u03a5\u0003\u0002",
    "\u0002\u0002l\u03a9\u0003\u0002\u0002\u0002n\u03b1\u0003\u0002\u0002",
    "\u0002p\u03b4\u0003\u0002\u0002\u0002r\u03b7\u0003\u0002\u0002\u0002",
    "t\u03bf\u0003\u0002\u0002\u0002v\u03cc\u0003\u0002\u0002\u0002x\u03d3",
    "\u0003\u0002\u0002\u0002z\u03d5\u0003\u0002\u0002\u0002|\u03dd\u0003",
    "\u0002\u0002\u0002~\u03e8\u0003\u0002\u0002\u0002\u0080\u03ea\u0003",
    "\u0002\u0002\u0002\u0082\u03f2\u0003\u0002\u0002\u0002\u0084\u03f7\u0003",
    "\u0002\u0002\u0002\u0086\u03fd\u0003\u0002\u0002\u0002\u0088\u0401\u0003",
    "\u0002\u0002\u0002\u008a\u0405\u0003\u0002\u0002\u0002\u008c\u040a\u0003",
    "\u0002\u0002\u0002\u008e\u040e\u0003\u0002\u0002\u0002\u0090\u0427\u0003",
    "\u0002\u0002\u0002\u0092\u0429\u0003\u0002\u0002\u0002\u0094\u0434\u0003",
    "\u0002\u0002\u0002\u0096\u0438\u0003\u0002\u0002\u0002\u0098\u043a\u0003",
    "\u0002\u0002\u0002\u009a\u043c\u0003\u0002\u0002\u0002\u009c\u043e\u0003",
    "\u0002\u0002\u0002\u009e\u0449\u0003\u0002\u0002\u0002\u00a0\u044e\u0003",
    "\u0002\u0002\u0002\u00a2\u045e\u0003\u0002\u0002\u0002\u00a4\u0471\u0003",
    "\u0002\u0002\u0002\u00a6\u0475\u0003\u0002\u0002\u0002\u00a8\u0477\u0003",
    "\u0002\u0002\u0002\u00aa\u0480\u0003\u0002\u0002\u0002\u00ac\u0487\u0003",
    "\u0002\u0002\u0002\u00ae\u0499\u0003\u0002\u0002\u0002\u00b0\u049e\u0003",
    "\u0002\u0002\u0002\u00b2\u04a4\u0003\u0002\u0002\u0002\u00b4\u04a6\u0003",
    "\u0002\u0002\u0002\u00b6\u04aa\u0003\u0002\u0002\u0002\u00b8\u04ae\u0003",
    "\u0002\u0002\u0002\u00ba\u04c1\u0003\u0002\u0002\u0002\u00bc\u04c6\u0003",
    "\u0002\u0002\u0002\u00be\u04d0\u0003\u0002\u0002\u0002\u00c0\u04d3\u0003",
    "\u0002\u0002\u0002\u00c2\u04dd\u0003\u0002\u0002\u0002\u00c4\u04e1\u0003",
    "\u0002\u0002\u0002\u00c6\u04e3\u0003\u0002\u0002\u0002\u00c8\u04e5\u0003",
    "\u0002\u0002\u0002\u00ca\u04eb\u0003\u0002\u0002\u0002\u00cc\u04f8\u0003",
    "\u0002\u0002\u0002\u00ce\u04fb\u0003\u0002\u0002\u0002\u00d0\u0504\u0003",
    "\u0002\u0002\u0002\u00d2\u0506\u0003\u0002\u0002\u0002\u00d4\u053d\u0003",
    "\u0002\u0002\u0002\u00d6\u0542\u0003\u0002\u0002\u0002\u00d8\u054c\u0003",
    "\u0002\u0002\u0002\u00da\u0558\u0003\u0002\u0002\u0002\u00dc\u0563\u0003",
    "\u0002\u0002\u0002\u00de\u0571\u0003\u0002\u0002\u0002\u00e0\u0573\u0003",
    "\u0002\u0002\u0002\u00e2\u057c\u0003\u0002\u0002\u0002\u00e4\u057e\u0003",
    "\u0002\u0002\u0002\u00e6\u058c\u0003\u0002\u0002\u0002\u00e8\u058f\u0003",
    "\u0002\u0002\u0002\u00ea\u0598\u0003\u0002\u0002\u0002\u00ec\u059a\u0003",
    "\u0002\u0002\u0002\u00ee\u059d\u0003\u0002\u0002\u0002\u00f0\u05ab\u0003",
    "\u0002\u0002\u0002\u00f2\u05ad\u0003\u0002\u0002\u0002\u00f4\u05b5\u0003",
    "\u0002\u0002\u0002\u00f6\u05bc\u0003\u0002\u0002\u0002\u00f8\u05be\u0003",
    "\u0002\u0002\u0002\u00fa\u05c5\u0003\u0002\u0002\u0002\u00fc\u05ce\u0003",
    "\u0002\u0002\u0002\u00fe\u05d3\u0003\u0002\u0002\u0002\u0100\u05db\u0003",
    "\u0002\u0002\u0002\u0102\u05e9\u0003\u0002\u0002\u0002\u0104\u05ee\u0003",
    "\u0002\u0002\u0002\u0106\u0600\u0003\u0002\u0002\u0002\u0108\u0602\u0003",
    "\u0002\u0002\u0002\u010a\u0608\u0003\u0002\u0002\u0002\u010c\u060a\u0003",
    "\u0002\u0002\u0002\u010e\u0612\u0003\u0002\u0002\u0002\u0110\u061a\u0003",
    "\u0002\u0002\u0002\u0112\u0621\u0003\u0002\u0002\u0002\u0114\u0623\u0003",
    "\u0002\u0002\u0002\u0116\u062c\u0003\u0002\u0002\u0002\u0118\u0634\u0003",
    "\u0002\u0002\u0002\u011a\u0637\u0003\u0002\u0002\u0002\u011c\u063d\u0003",
    "\u0002\u0002\u0002\u011e\u0646\u0003\u0002\u0002\u0002\u0120\u064e\u0003",
    "\u0002\u0002\u0002\u0122\u0654\u0003\u0002\u0002\u0002\u0124\u065e\u0003",
    "\u0002\u0002\u0002\u0126\u0660\u0003\u0002\u0002\u0002\u0128\u0666\u0003",
    "\u0002\u0002\u0002\u012a\u0672\u0003\u0002\u0002\u0002\u012c\u0679\u0003",
    "\u0002\u0002\u0002\u012e\u0687\u0003\u0002\u0002\u0002\u0130\u0689\u0003",
    "\u0002\u0002\u0002\u0132\u068b\u0003\u0002\u0002\u0002\u0134\u068f\u0003",
    "\u0002\u0002\u0002\u0136\u0693\u0003\u0002\u0002\u0002\u0138\u069d\u0003",
    "\u0002\u0002\u0002\u013a\u069f\u0003\u0002\u0002\u0002\u013c\u06a5\u0003",
    "\u0002\u0002\u0002\u013e\u06ad\u0003\u0002\u0002\u0002\u0140\u06bf\u0003",
    "\u0002\u0002\u0002\u0142\u06c1\u0003\u0002\u0002\u0002\u0144\u06c7\u0003",
    "\u0002\u0002\u0002\u0146\u06d6\u0003\u0002\u0002\u0002\u0148\u06d9\u0003",
    "\u0002\u0002\u0002\u014a\u06ea\u0003\u0002\u0002\u0002\u014c\u06ec\u0003",
    "\u0002\u0002\u0002\u014e\u06ee\u0003\u0002\u0002\u0002\u0150\u06f4\u0003",
    "\u0002\u0002\u0002\u0152\u06fa\u0003\u0002\u0002\u0002\u0154\u0704\u0003",
    "\u0002\u0002\u0002\u0156\u0708\u0003\u0002\u0002\u0002\u0158\u070a\u0003",
    "\u0002\u0002\u0002\u015a\u071a\u0003\u0002\u0002\u0002\u015c\u072c\u0003",
    "\u0002\u0002\u0002\u015e\u072e\u0003\u0002\u0002\u0002\u0160\u0730\u0003",
    "\u0002\u0002\u0002\u0162\u0738\u0003\u0002\u0002\u0002\u0164\u0747\u0003",
    "\u0002\u0002\u0002\u0166\u0756\u0003\u0002\u0002\u0002\u0168\u075c\u0003",
    "\u0002\u0002\u0002\u016a\u0762\u0003\u0002\u0002\u0002\u016c\u0768\u0003",
    "\u0002\u0002\u0002\u016e\u076c\u0003\u0002\u0002\u0002\u0170\u077e\u0003",
    "\u0002\u0002\u0002\u0172\u0780\u0003\u0002\u0002\u0002\u0174\u0787\u0003",
    "\u0002\u0002\u0002\u0176\u0790\u0003\u0002\u0002\u0002\u0178\u0796\u0003",
    "\u0002\u0002\u0002\u017a\u079e\u0003\u0002\u0002\u0002\u017c\u07a1\u0003",
    "\u0002\u0002\u0002\u017e\u07aa\u0003\u0002\u0002\u0002\u0180\u07b1\u0003",
    "\u0002\u0002\u0002\u0182\u07bc\u0003\u0002\u0002\u0002\u0184\u07c6\u0003",
    "\u0002\u0002\u0002\u0186\u07eb\u0003\u0002\u0002\u0002\u0188\u07ed\u0003",
    "\u0002\u0002\u0002\u018a\u080b\u0003\u0002\u0002\u0002\u018c\u0812\u0003",
    "\u0002\u0002\u0002\u018e\u0814\u0003\u0002\u0002\u0002\u0190\u081a\u0003",
    "\u0002\u0002\u0002\u0192\u0844\u0003\u0002\u0002\u0002\u0194\u0846\u0003",
    "\u0002\u0002\u0002\u0196\u086f\u0003\u0002\u0002\u0002\u0198\u08c4\u0003",
    "\u0002\u0002\u0002\u019a\u08c6\u0003\u0002\u0002\u0002\u019c\u0918\u0003",
    "\u0002\u0002\u0002\u019e\u091d\u0003\u0002\u0002\u0002\u01a0\u092c\u0003",
    "\u0002\u0002\u0002\u01a2\u092e\u0003\u0002\u0002\u0002\u01a4\u093a\u0003",
    "\u0002\u0002\u0002\u01a6\u0946\u0003\u0002\u0002\u0002\u01a8\u0952\u0003",
    "\u0002\u0002\u0002\u01aa\u096b\u0003\u0002\u0002\u0002\u01ac\u09bb\u0003",
    "\u0002\u0002\u0002\u01ae\u09bd\u0003\u0002\u0002\u0002\u01b0\u09bf\u0003",
    "\u0002\u0002\u0002\u01b2\u09c7\u0003\u0002\u0002\u0002\u01b4\u09c9\u0003",
    "\u0002\u0002\u0002\u01b6\u0a0c\u0003\u0002\u0002\u0002\u01b8\u0a0e\u0003",
    "\u0002\u0002\u0002\u01ba\u0a45\u0003\u0002\u0002\u0002\u01bc\u0a47\u0003",
    "\u0002\u0002\u0002\u01be\u0a75\u0003\u0002\u0002\u0002\u01c0\u0a8d\u0003",
    "\u0002\u0002\u0002\u01c2\u0a8f\u0003\u0002\u0002\u0002\u01c4\u0a99\u0003",
    "\u0002\u0002\u0002\u01c6\u0aa0\u0003\u0002\u0002\u0002\u01c8\u0aa4\u0003",
    "\u0002\u0002\u0002\u01ca\u0aa6\u0003\u0002\u0002\u0002\u01cc\u0ab4\u0003",
    "\u0002\u0002\u0002\u01ce\u0ab6\u0003\u0002\u0002\u0002\u01d0\u0ac0\u0003",
    "\u0002\u0002\u0002\u01d2\u0ac4\u0003\u0002\u0002\u0002\u01d4\u0ac6\u0003",
    "\u0002\u0002\u0002\u01d6\u0acd\u0003\u0002\u0002\u0002\u01d8\u0acf\u0003",
    "\u0002\u0002\u0002\u01da\u0ad8\u0003\u0002\u0002\u0002\u01dc\u0ada\u0003",
    "\u0002\u0002\u0002\u01de\u0adc\u0003\u0002\u0002\u0002\u01e0\u0ae8\u0003",
    "\u0002\u0002\u0002\u01e2\u0aea\u0003\u0002\u0002\u0002\u01e4\u0af6\u0003",
    "\u0002\u0002\u0002\u01e6\u0af8\u0003\u0002\u0002\u0002\u01e8\u0b04\u0003",
    "\u0002\u0002\u0002\u01ea\u0b06\u0003\u0002\u0002\u0002\u01ec\u0b12\u0003",
    "\u0002\u0002\u0002\u01ee\u0b14\u0003\u0002\u0002\u0002\u01f0\u0b20\u0003",
    "\u0002\u0002\u0002\u01f2\u0b22\u0003\u0002\u0002\u0002\u01f4\u0b24\u0003",
    "\u0002\u0002\u0002\u01f6\u0b34\u0003\u0002\u0002\u0002\u01f8\u0b36\u0003",
    "\u0002\u0002\u0002\u01fa\u0b38\u0003\u0002\u0002\u0002\u01fc\u0b3a\u0003",
    "\u0002\u0002\u0002\u01fe\u0b3c\u0003\u0002\u0002\u0002\u0200\u0b3e\u0003",
    "\u0002\u0002\u0002\u0202\u0b5a\u0003\u0002\u0002\u0002\u0204\u0b5d\u0003",
    "\u0002\u0002\u0002\u0206\u0b60\u0003\u0002\u0002\u0002\u0208\u0b64\u0003",
    "\u0002\u0002\u0002\u020a\u0b78\u0003\u0002\u0002\u0002\u020c\u0b88\u0003",
    "\u0002\u0002\u0002\u020e\u0b8a\u0003\u0002\u0002\u0002\u0210\u0b8c\u0003",
    "\u0002\u0002\u0002\u0212\u0b8e\u0003\u0002\u0002\u0002\u0214\u0ba2\u0003",
    "\u0002\u0002\u0002\u0216\u0ba4\u0003\u0002\u0002\u0002\u0218\u0baf\u0003",
    "\u0002\u0002\u0002\u021a\u0bb1\u0003\u0002\u0002\u0002\u021c\u0bb3\u0003",
    "\u0002\u0002\u0002\u021e\u0bb6\u0003\u0002\u0002\u0002\u0220\u0bb8\u0003",
    "\u0002\u0002\u0002\u0222\u0bbb\u0003\u0002\u0002\u0002\u0224\u0bbd\u0003",
    "\u0002\u0002\u0002\u0226\u0bc7\u0003\u0002\u0002\u0002\u0228\u0bd6\u0003",
    "\u0002\u0002\u0002\u022a\u0bd8\u0003\u0002\u0002\u0002\u022c\u0bdb\u0003",
    "\u0002\u0002\u0002\u022e\u0bdd\u0003\u0002\u0002\u0002\u0230\u0be0\u0003",
    "\u0002\u0002\u0002\u0232\u0bfd\u0003\u0002\u0002\u0002\u0234\u0236\u0005",
    "N(\u0002\u0235\u0234\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002",
    "\u0002\u0002\u0236\u0003\u0003\u0002\u0002\u0002\u0237\u023e\u0005\u0006",
    "\u0004\u0002\u0238\u023e\u0005\b\u0005\u0002\u0239\u023e\u0005\n\u0006",
    "\u0002\u023a\u023e\u0005\u000e\b\u0002\u023b\u023e\u0005\f\u0007\u0002",
    "\u023c\u023e\u0005\u0010\t\u0002\u023d\u0237\u0003\u0002\u0002\u0002",
    "\u023d\u0238\u0003\u0002\u0002\u0002\u023d\u0239\u0003\u0002\u0002\u0002",
    "\u023d\u023a\u0003\u0002\u0002\u0002\u023d\u023b\u0003\u0002\u0002\u0002",
    "\u023d\u023c\u0003\u0002\u0002\u0002\u023e\u0005\u0003\u0002\u0002\u0002",
    "\u023f\u0240\u00075\u0002\u0002\u0240\u0007\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u00076\u0002\u0002\u0242\t\u0003\u0002\u0002\u0002\u0243",
    "\u0244\u00077\u0002\u0002\u0244\u000b\u0003\u0002\u0002\u0002\u0245",
    "\u0246\u00079\u0002\u0002\u0246\r\u0003\u0002\u0002\u0002\u0247\u0248",
    "\u00078\u0002\u0002\u0248\u000f\u0003\u0002\u0002\u0002\u0249\u024a",
    "\u0007:\u0002\u0002\u024a\u0011\u0003\u0002\u0002\u0002\u024b\u024e",
    "\u0005\u0014\u000b\u0002\u024c\u024e\u0005\u001c\u000f\u0002\u024d\u024b",
    "\u0003\u0002\u0002\u0002\u024d\u024c\u0003\u0002\u0002\u0002\u024e\u0013",
    "\u0003\u0002\u0002\u0002\u024f\u0251\u0005\u010a\u0086\u0002\u0250\u024f",
    "\u0003\u0002\u0002\u0002\u0251\u0254\u0003\u0002\u0002\u0002\u0252\u0250",
    "\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0255",
    "\u0003\u0002\u0002\u0002\u0254\u0252\u0003\u0002\u0002\u0002\u0255\u025e",
    "\u0005\u0016\f\u0002\u0256\u0258\u0005\u010a\u0086\u0002\u0257\u0256",
    "\u0003\u0002\u0002\u0002\u0258\u025b\u0003\u0002\u0002\u0002\u0259\u0257",
    "\u0003\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u025c",
    "\u0003\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002\u0002\u025c\u025e",
    "\u0007\u0005\u0002\u0002\u025d\u0252\u0003\u0002\u0002\u0002\u025d\u0259",
    "\u0003\u0002\u0002\u0002\u025e\u0015\u0003\u0002\u0002\u0002\u025f\u0262",
    "\u0005\u0018\r\u0002\u0260\u0262\u0005\u001a\u000e\u0002\u0261\u025f",
    "\u0003\u0002\u0002\u0002\u0261\u0260\u0003\u0002\u0002\u0002\u0262\u0017",
    "\u0003\u0002\u0002\u0002\u0263\u0264\t\u0002\u0002\u0002\u0264\u0019",
    "\u0003\u0002\u0002\u0002\u0265\u0266\t\u0003\u0002\u0002\u0266\u001b",
    "\u0003\u0002\u0002\u0002\u0267\u026b\u0005\u001e\u0010\u0002\u0268\u026b",
    "\u0005,\u0017\u0002\u0269\u026b\u0005.\u0018\u0002\u026a\u0267\u0003",
    "\u0002\u0002\u0002\u026a\u0268\u0003\u0002\u0002\u0002\u026a\u0269\u0003",
    "\u0002\u0002\u0002\u026b\u001d\u0003\u0002\u0002\u0002\u026c\u026f\u0005",
    "$\u0013\u0002\u026d\u026f\u0005*\u0016\u0002\u026e\u026c\u0003\u0002",
    "\u0002\u0002\u026e\u026d\u0003\u0002\u0002\u0002\u026f\u0274\u0003\u0002",
    "\u0002\u0002\u0270\u0273\u0005\"\u0012\u0002\u0271\u0273\u0005(\u0015",
    "\u0002\u0272\u0270\u0003\u0002\u0002\u0002\u0272\u0271\u0003\u0002\u0002",
    "\u0002\u0273\u0276\u0003\u0002\u0002\u0002\u0274\u0272\u0003\u0002\u0002",
    "\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275\u001f\u0003\u0002\u0002",
    "\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0277\u0279\u0005\u010a\u0086",
    "\u0002\u0278\u0277\u0003\u0002\u0002\u0002\u0279\u027c\u0003\u0002\u0002",
    "\u0002\u027a\u0278\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002\u0002",
    "\u0002\u027b\u027d\u0003\u0002\u0002\u0002\u027c\u027a\u0003\u0002\u0002",
    "\u0002\u027d\u027f\u0007h\u0002\u0002\u027e\u0280\u0005:\u001e\u0002",
    "\u027f\u027e\u0003\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002\u0002",
    "\u0280\u028e\u0003\u0002\u0002\u0002\u0281\u0282\u0005\u001e\u0010\u0002",
    "\u0282\u0286\u0007C\u0002\u0002\u0283\u0285\u0005\u010a\u0086\u0002",
    "\u0284\u0283\u0003\u0002\u0002\u0002\u0285\u0288\u0003\u0002\u0002\u0002",
    "\u0286\u0284\u0003\u0002\u0002\u0002\u0286\u0287\u0003\u0002\u0002\u0002",
    "\u0287\u0289\u0003\u0002\u0002\u0002\u0288\u0286\u0003\u0002\u0002\u0002",
    "\u0289\u028b\u0007h\u0002\u0002\u028a\u028c\u0005:\u001e\u0002\u028b",
    "\u028a\u0003\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c",
    "\u028e\u0003\u0002\u0002\u0002\u028d\u027a\u0003\u0002\u0002\u0002\u028d",
    "\u0281\u0003\u0002\u0002\u0002\u028e!\u0003\u0002\u0002\u0002\u028f",
    "\u0293\u0007C\u0002\u0002\u0290\u0292\u0005\u010a\u0086\u0002\u0291",
    "\u0290\u0003\u0002\u0002\u0002\u0292\u0295\u0003\u0002\u0002\u0002\u0293",
    "\u0291\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294",
    "\u0296\u0003\u0002\u0002\u0002\u0295\u0293\u0003\u0002\u0002\u0002\u0296",
    "\u0298\u0007h\u0002\u0002\u0297\u0299\u0005:\u001e\u0002\u0298\u0297",
    "\u0003\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002\u0299#",
    "\u0003\u0002\u0002\u0002\u029a\u029c\u0005\u010a\u0086\u0002\u029b\u029a",
    "\u0003\u0002\u0002\u0002\u029c\u029f\u0003\u0002\u0002\u0002\u029d\u029b",
    "\u0003\u0002\u0002\u0002\u029d\u029e\u0003\u0002\u0002\u0002\u029e\u02a0",
    "\u0003\u0002\u0002\u0002\u029f\u029d\u0003\u0002\u0002\u0002\u02a0\u02a2",
    "\u0007h\u0002\u0002\u02a1\u02a3\u0005:\u001e\u0002\u02a2\u02a1\u0003",
    "\u0002\u0002\u0002\u02a2\u02a3\u0003\u0002\u0002\u0002\u02a3%\u0003",
    "\u0002\u0002\u0002\u02a4\u02a5\u0005 \u0011\u0002\u02a5\'\u0003\u0002",
    "\u0002\u0002\u02a6\u02a7\u0005\"\u0012\u0002\u02a7)\u0003\u0002\u0002",
    "\u0002\u02a8\u02a9\u0005$\u0013\u0002\u02a9+\u0003\u0002\u0002\u0002",
    "\u02aa\u02ac\u0005\u010a\u0086\u0002\u02ab\u02aa\u0003\u0002\u0002\u0002",
    "\u02ac\u02af\u0003\u0002\u0002\u0002\u02ad\u02ab\u0003\u0002\u0002\u0002",
    "\u02ad\u02ae\u0003\u0002\u0002\u0002\u02ae\u02b0\u0003\u0002\u0002\u0002",
    "\u02af\u02ad\u0003\u0002\u0002\u0002\u02b0\u02b1\u0007h\u0002\u0002",
    "\u02b1-\u0003\u0002\u0002\u0002\u02b2\u02b3\u0005\u0014\u000b\u0002",
    "\u02b3\u02b4\u00050\u0019\u0002\u02b4\u02bc\u0003\u0002\u0002\u0002",
    "\u02b5\u02b6\u0005\u001e\u0010\u0002\u02b6\u02b7\u00050\u0019\u0002",
    "\u02b7\u02bc\u0003\u0002\u0002\u0002\u02b8\u02b9\u0005,\u0017\u0002",
    "\u02b9\u02ba\u00050\u0019\u0002\u02ba\u02bc\u0003\u0002\u0002\u0002",
    "\u02bb\u02b2\u0003\u0002\u0002\u0002\u02bb\u02b5\u0003\u0002\u0002\u0002",
    "\u02bb\u02b8\u0003\u0002\u0002\u0002\u02bc/\u0003\u0002\u0002\u0002",
    "\u02bd\u02bf\u0005\u010a\u0086\u0002\u02be\u02bd\u0003\u0002\u0002\u0002",
    "\u02bf\u02c2\u0003\u0002\u0002\u0002\u02c0\u02be\u0003\u0002\u0002\u0002",
    "\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1\u02c3\u0003\u0002\u0002\u0002",
    "\u02c2\u02c0\u0003\u0002\u0002\u0002\u02c3\u02c4\u0007?\u0002\u0002",
    "\u02c4\u02cf\u0007@\u0002\u0002\u02c5\u02c7\u0005\u010a\u0086\u0002",
    "\u02c6\u02c5\u0003\u0002\u0002\u0002\u02c7\u02ca\u0003\u0002\u0002\u0002",
    "\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002",
    "\u02c9\u02cb\u0003\u0002\u0002\u0002\u02ca\u02c8\u0003\u0002\u0002\u0002",
    "\u02cb\u02cc\u0007?\u0002\u0002\u02cc\u02ce\u0007@\u0002\u0002\u02cd",
    "\u02c8\u0003\u0002\u0002\u0002\u02ce\u02d1\u0003\u0002\u0002\u0002\u02cf",
    "\u02cd\u0003\u0002\u0002\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0",
    "1\u0003\u0002\u0002\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d2",
    "\u02d4\u00054\u001b\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d4",
    "\u02d7\u0003\u0002\u0002\u0002\u02d5\u02d3\u0003\u0002\u0002\u0002\u02d5",
    "\u02d6\u0003\u0002\u0002\u0002\u02d6\u02d8\u0003\u0002\u0002\u0002\u02d7",
    "\u02d5\u0003\u0002\u0002\u0002\u02d8\u02da\u0007h\u0002\u0002\u02d9",
    "\u02db\u00056\u001c\u0002\u02da\u02d9\u0003\u0002\u0002\u0002\u02da",
    "\u02db\u0003\u0002\u0002\u0002\u02db3\u0003\u0002\u0002\u0002\u02dc",
    "\u02dd\u0005\u010a\u0086\u0002\u02dd5\u0003\u0002\u0002\u0002\u02de",
    "\u02df\u0007\u0013\u0002\u0002\u02df\u02e9\u0005,\u0017\u0002\u02e0",
    "\u02e1\u0007\u0013\u0002\u0002\u02e1\u02e5\u0005\u001e\u0010\u0002\u02e2",
    "\u02e4\u00058\u001d\u0002\u02e3\u02e2\u0003\u0002\u0002\u0002\u02e4",
    "\u02e7\u0003\u0002\u0002\u0002\u02e5\u02e3\u0003\u0002\u0002\u0002\u02e5",
    "\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e9\u0003\u0002\u0002\u0002\u02e7",
    "\u02e5\u0003\u0002\u0002\u0002\u02e8\u02de\u0003\u0002\u0002\u0002\u02e8",
    "\u02e0\u0003\u0002\u0002\u0002\u02e97\u0003\u0002\u0002\u0002\u02ea",
    "\u02eb\u0007W\u0002\u0002\u02eb\u02ec\u0005&\u0014\u0002\u02ec9\u0003",
    "\u0002\u0002\u0002\u02ed\u02ee\u0007F\u0002\u0002\u02ee\u02ef\u0005",
    "<\u001f\u0002\u02ef\u02f0\u0007E\u0002\u0002\u02f0;\u0003\u0002\u0002",
    "\u0002\u02f1\u02f6\u0005> \u0002\u02f2\u02f3\u0007B\u0002\u0002\u02f3",
    "\u02f5\u0005> \u0002\u02f4\u02f2\u0003\u0002\u0002\u0002\u02f5\u02f8",
    "\u0003\u0002\u0002\u0002\u02f6\u02f4\u0003\u0002\u0002\u0002\u02f6\u02f7",
    "\u0003\u0002\u0002\u0002\u02f7=\u0003\u0002\u0002\u0002\u02f8\u02f6",
    "\u0003\u0002\u0002\u0002\u02f9\u02fc\u0005\u001c\u000f\u0002\u02fa\u02fc",
    "\u0005@!\u0002\u02fb\u02f9\u0003\u0002\u0002\u0002\u02fb\u02fa\u0003",
    "\u0002\u0002\u0002\u02fc?\u0003\u0002\u0002\u0002\u02fd\u02ff\u0005",
    "\u010a\u0086\u0002\u02fe\u02fd\u0003\u0002\u0002\u0002\u02ff\u0302\u0003",
    "\u0002\u0002\u0002\u0300\u02fe\u0003\u0002\u0002\u0002\u0300\u0301\u0003",
    "\u0002\u0002\u0002\u0301\u0303\u0003\u0002\u0002\u0002\u0302\u0300\u0003",
    "\u0002\u0002\u0002\u0303\u0305\u0007I\u0002\u0002\u0304\u0306\u0005",
    "B\"\u0002\u0305\u0304\u0003\u0002\u0002\u0002\u0305\u0306\u0003\u0002",
    "\u0002\u0002\u0306A\u0003\u0002\u0002\u0002\u0307\u0308\u0007\u0013",
    "\u0002\u0002\u0308\u030c\u0005\u001c\u000f\u0002\u0309\u030a\u0007*",
    "\u0002\u0002\u030a\u030c\u0005\u001c\u000f\u0002\u030b\u0307\u0003\u0002",
    "\u0002\u0002\u030b\u0309\u0003\u0002\u0002\u0002\u030cC\u0003\u0002",
    "\u0002\u0002\u030d\u030e\b#\u0001\u0002\u030e\u030f\u0007h\u0002\u0002",
    "\u030f\u0315\u0003\u0002\u0002\u0002\u0310\u0311\f\u0003\u0002\u0002",
    "\u0311\u0312\u0007C\u0002\u0002\u0312\u0314\u0007h\u0002\u0002\u0313",
    "\u0310\u0003\u0002\u0002\u0002\u0314\u0317\u0003\u0002\u0002\u0002\u0315",
    "\u0313\u0003\u0002\u0002\u0002\u0315\u0316\u0003\u0002\u0002\u0002\u0316",
    "E\u0003\u0002\u0002\u0002\u0317\u0315\u0003\u0002\u0002\u0002\u0318",
    "\u031e\u0007h\u0002\u0002\u0319\u031a\u0005H%\u0002\u031a\u031b\u0007",
    "C\u0002\u0002\u031b\u031c\u0007h\u0002\u0002\u031c\u031e\u0003\u0002",
    "\u0002\u0002\u031d\u0318\u0003\u0002\u0002\u0002\u031d\u0319\u0003\u0002",
    "\u0002\u0002\u031eG\u0003\u0002\u0002\u0002\u031f\u0320\b%\u0001\u0002",
    "\u0320\u0321\u0007h\u0002\u0002\u0321\u0327\u0003\u0002\u0002\u0002",
    "\u0322\u0323\f\u0003\u0002\u0002\u0323\u0324\u0007C\u0002\u0002\u0324",
    "\u0326\u0007h\u0002\u0002\u0325\u0322\u0003\u0002\u0002\u0002\u0326",
    "\u0329\u0003\u0002\u0002\u0002\u0327\u0325\u0003\u0002\u0002\u0002\u0327",
    "\u0328\u0003\u0002\u0002\u0002\u0328I\u0003\u0002\u0002\u0002\u0329",
    "\u0327\u0003\u0002\u0002\u0002\u032a\u0330\u0007h\u0002\u0002\u032b",
    "\u032c\u0005L\'\u0002\u032c\u032d\u0007C\u0002\u0002\u032d\u032e\u0007",
    "h\u0002\u0002\u032e\u0330\u0003\u0002\u0002\u0002\u032f\u032a\u0003",
    "\u0002\u0002\u0002\u032f\u032b\u0003\u0002\u0002\u0002\u0330K\u0003",
    "\u0002\u0002\u0002\u0331\u0332\b\'\u0001\u0002\u0332\u0333\u0007h\u0002",
    "\u0002\u0333\u0339\u0003\u0002\u0002\u0002\u0334\u0335\f\u0003\u0002",
    "\u0002\u0335\u0336\u0007C\u0002\u0002\u0336\u0338\u0007h\u0002\u0002",
    "\u0337\u0334\u0003\u0002\u0002\u0002\u0338\u033b\u0003\u0002\u0002\u0002",
    "\u0339\u0337\u0003\u0002\u0002\u0002\u0339\u033a\u0003\u0002\u0002\u0002",
    "\u033aM\u0003\u0002\u0002\u0002\u033b\u0339\u0003\u0002\u0002\u0002",
    "\u033c\u033e\u0005P)\u0002\u033d\u033c\u0003\u0002\u0002\u0002\u033d",
    "\u033e\u0003\u0002\u0002\u0002\u033e\u0342\u0003\u0002\u0002\u0002\u033f",
    "\u0341\u0005T+\u0002\u0340\u033f\u0003\u0002\u0002\u0002\u0341\u0344",
    "\u0003\u0002\u0002\u0002\u0342\u0340\u0003\u0002\u0002\u0002\u0342\u0343",
    "\u0003\u0002\u0002\u0002\u0343\u0348\u0003\u0002\u0002\u0002\u0344\u0342",
    "\u0003\u0002\u0002\u0002\u0345\u0347\u0005^0\u0002\u0346\u0345\u0003",
    "\u0002\u0002\u0002\u0347\u034a\u0003\u0002\u0002\u0002\u0348\u0346\u0003",
    "\u0002\u0002\u0002\u0348\u0349\u0003\u0002\u0002\u0002\u0349O\u0003",
    "\u0002\u0002\u0002\u034a\u0348\u0003\u0002\u0002\u0002\u034b\u034d\u0005",
    "R*\u0002\u034c\u034b\u0003\u0002\u0002\u0002\u034d\u0350\u0003\u0002",
    "\u0002\u0002\u034e\u034c\u0003\u0002\u0002\u0002\u034e\u034f\u0003\u0002",
    "\u0002\u0002\u034f\u0351\u0003\u0002\u0002\u0002\u0350\u034e\u0003\u0002",
    "\u0002\u0002\u0351\u0352\u0007\"\u0002\u0002\u0352\u0357\u0007h\u0002",
    "\u0002\u0353\u0354\u0007C\u0002\u0002\u0354\u0356\u0007h\u0002\u0002",
    "\u0355\u0353\u0003\u0002\u0002\u0002\u0356\u0359\u0003\u0002\u0002\u0002",
    "\u0357\u0355\u0003\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002\u0002",
    "\u0358\u035a\u0003\u0002\u0002\u0002\u0359\u0357\u0003\u0002\u0002\u0002",
    "\u035a\u035b\u0007A\u0002\u0002\u035bQ\u0003\u0002\u0002\u0002\u035c",
    "\u035d\u0005\u010a\u0086\u0002\u035dS\u0003\u0002\u0002\u0002\u035e",
    "\u0363\u0005V,\u0002\u035f\u0363\u0005X-\u0002\u0360\u0363\u0005Z.\u0002",
    "\u0361\u0363\u0005\\/\u0002\u0362\u035e\u0003\u0002\u0002\u0002\u0362",
    "\u035f\u0003\u0002\u0002\u0002\u0362\u0360\u0003\u0002\u0002\u0002\u0362",
    "\u0361\u0003\u0002\u0002\u0002\u0363U\u0003\u0002\u0002\u0002\u0364",
    "\u0365\u0007\u001b\u0002\u0002\u0365\u0366\u0005F$\u0002\u0366\u0367",
    "\u0007A\u0002\u0002\u0367W\u0003\u0002\u0002\u0002\u0368\u0369\u0007",
    "\u001b\u0002\u0002\u0369\u036a\u0005H%\u0002\u036a\u036b\u0007C\u0002",
    "\u0002\u036b\u036c\u0007U\u0002\u0002\u036c\u036d\u0007A\u0002\u0002",
    "\u036dY\u0003\u0002\u0002\u0002\u036e\u036f\u0007\u001b\u0002\u0002",
    "\u036f\u0370\u0007(\u0002\u0002\u0370\u0371\u0005F$\u0002\u0371\u0372",
    "\u0007C\u0002\u0002\u0372\u0373\u0007h\u0002\u0002\u0373\u0374\u0007",
    "A\u0002\u0002\u0374[\u0003\u0002\u0002\u0002\u0375\u0376\u0007\u001b",
    "\u0002\u0002\u0376\u0377\u0007(\u0002\u0002\u0377\u0378\u0005F$\u0002",
    "\u0378\u0379\u0007C\u0002\u0002\u0379\u037a\u0007U\u0002\u0002\u037a",
    "\u037b\u0007A\u0002\u0002\u037b]\u0003\u0002\u0002\u0002\u037c\u0380",
    "\u0005`1\u0002\u037d\u0380\u0005\u00e2r\u0002\u037e\u0380\u0007A\u0002",
    "\u0002\u037f\u037c\u0003\u0002\u0002\u0002\u037f\u037d\u0003\u0002\u0002",
    "\u0002\u037f\u037e\u0003\u0002\u0002\u0002\u0380_\u0003\u0002\u0002",
    "\u0002\u0381\u0384\u0005b2\u0002\u0382\u0384\u0005\u00d6l\u0002\u0383",
    "\u0381\u0003\u0002\u0002\u0002\u0383\u0382\u0003\u0002\u0002\u0002\u0384",
    "a\u0003\u0002\u0002\u0002\u0385\u0386\u0005f4\u0002\u0386\u0387\u0007",
    "\u000b\u0002\u0002\u0387\u0389\u0005d3\u0002\u0388\u038a\u0005j6\u0002",
    "\u0389\u0388\u0003\u0002\u0002\u0002\u0389\u038a\u0003\u0002\u0002\u0002",
    "\u038a\u038c\u0003\u0002\u0002\u0002\u038b\u038d\u0005n8\u0002\u038c",
    "\u038b\u0003\u0002\u0002\u0002\u038c\u038d\u0003\u0002\u0002\u0002\u038d",
    "\u038f\u0003\u0002\u0002\u0002\u038e\u0390\u0005p9\u0002\u038f\u038e",
    "\u0003\u0002\u0002\u0002\u038f\u0390\u0003\u0002\u0002\u0002\u0390\u0391",
    "\u0003\u0002\u0002\u0002\u0391\u0392\u0005t;\u0002\u0392c\u0003\u0002",
    "\u0002\u0002\u0393\u0394\u0007h\u0002\u0002\u0394e\u0003\u0002\u0002",
    "\u0002\u0395\u0397\u0005h5\u0002\u0396\u0395\u0003\u0002\u0002\u0002",
    "\u0397\u039a\u0003\u0002\u0002\u0002\u0398\u0396\u0003\u0002\u0002\u0002",
    "\u0398\u0399\u0003\u0002\u0002\u0002\u0399g\u0003\u0002\u0002\u0002",
    "\u039a\u0398\u0003\u0002\u0002\u0002\u039b\u03a4\u0005\u010a\u0086\u0002",
    "\u039c\u03a4\u0007%\u0002\u0002\u039d\u03a4\u0007$\u0002\u0002\u039e",
    "\u03a4\u0007#\u0002\u0002\u039f\u03a4\u0007\u0003\u0002\u0002\u03a0",
    "\u03a4\u0007(\u0002\u0002\u03a1\u03a4\u0007\u0014\u0002\u0002\u03a2",
    "\u03a4\u0007)\u0002\u0002\u03a3\u039b\u0003\u0002\u0002\u0002\u03a3",
    "\u039c\u0003\u0002\u0002\u0002\u03a3\u039d\u0003\u0002\u0002\u0002\u03a3",
    "\u039e\u0003\u0002\u0002\u0002\u03a3\u039f\u0003\u0002\u0002\u0002\u03a3",
    "\u03a0\u0003\u0002\u0002\u0002\u03a3\u03a1\u0003\u0002\u0002\u0002\u03a3",
    "\u03a2\u0003\u0002\u0002\u0002\u03a4i\u0003\u0002\u0002\u0002\u03a5",
    "\u03a6\u0007F\u0002\u0002\u03a6\u03a7\u0005l7\u0002\u03a7\u03a8\u0007",
    "E\u0002\u0002\u03a8k\u0003\u0002\u0002\u0002\u03a9\u03ae\u00052\u001a",
    "\u0002\u03aa\u03ab\u0007B\u0002\u0002\u03ab\u03ad\u00052\u001a\u0002",
    "\u03ac\u03aa\u0003\u0002\u0002\u0002\u03ad\u03b0\u0003\u0002\u0002\u0002",
    "\u03ae\u03ac\u0003\u0002\u0002\u0002\u03ae\u03af\u0003\u0002\u0002\u0002",
    "\u03afm\u0003\u0002\u0002\u0002\u03b0\u03ae\u0003\u0002\u0002\u0002",
    "\u03b1\u03b2\u0007\u0013\u0002\u0002\u03b2\u03b3\u0005 \u0011\u0002",
    "\u03b3o\u0003\u0002\u0002\u0002\u03b4\u03b5\u0007\u001a\u0002\u0002",
    "\u03b5\u03b6\u0005r:\u0002\u03b6q\u0003\u0002\u0002\u0002\u03b7\u03bc",
    "\u0005&\u0014\u0002\u03b8\u03b9\u0007B\u0002\u0002\u03b9\u03bb\u0005",
    "&\u0014\u0002\u03ba\u03b8\u0003\u0002\u0002\u0002\u03bb\u03be\u0003",
    "\u0002\u0002\u0002\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bc\u03bd\u0003",
    "\u0002\u0002\u0002\u03bds\u0003\u0002\u0002\u0002\u03be\u03bc\u0003",
    "\u0002\u0002\u0002\u03bf\u03c3\u0007=\u0002\u0002\u03c0\u03c2\u0005",
    "v<\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c2\u03c5\u0003\u0002",
    "\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c3\u03c4\u0003\u0002",
    "\u0002\u0002\u03c4\u03c6\u0003\u0002\u0002\u0002\u03c5\u03c3\u0003\u0002",
    "\u0002\u0002\u03c6\u03c7\u0007>\u0002\u0002\u03c7u\u0003\u0002\u0002",
    "\u0002\u03c8\u03cd\u0005x=\u0002\u03c9\u03cd\u0005\u00c6d\u0002\u03ca",
    "\u03cd\u0005\u00c8e\u0002\u03cb\u03cd\u0005\u00caf\u0002\u03cc\u03c8",
    "\u0003\u0002\u0002\u0002\u03cc\u03c9\u0003\u0002\u0002\u0002\u03cc\u03ca",
    "\u0003\u0002\u0002\u0002\u03cc\u03cb\u0003\u0002\u0002\u0002\u03cdw",
    "\u0003\u0002\u0002\u0002\u03ce\u03d4\u0005z>\u0002\u03cf\u03d4\u0005",
    "\u00a0Q\u0002\u03d0\u03d4\u0005`1\u0002\u03d1\u03d4\u0005\u00e2r\u0002",
    "\u03d2\u03d4\u0007A\u0002\u0002\u03d3\u03ce\u0003\u0002\u0002\u0002",
    "\u03d3\u03cf\u0003\u0002\u0002\u0002\u03d3\u03d0\u0003\u0002\u0002\u0002",
    "\u03d3\u03d1\u0003\u0002\u0002\u0002\u03d3\u03d2\u0003\u0002\u0002\u0002",
    "\u03d4y\u0003\u0002\u0002\u0002\u03d5\u03d6\u0005|?\u0002\u03d6\u03d7",
    "\u0005\u0088E\u0002\u03d7\u03d8\u0005\u0080A\u0002\u03d8\u03d9\u0007",
    "A\u0002\u0002\u03d9{\u0003\u0002\u0002\u0002\u03da\u03dc\u0005~@\u0002",
    "\u03db\u03da\u0003\u0002\u0002\u0002\u03dc\u03df\u0003\u0002\u0002\u0002",
    "\u03dd\u03db\u0003\u0002\u0002\u0002\u03dd\u03de\u0003\u0002\u0002\u0002",
    "\u03de}\u0003\u0002\u0002\u0002\u03df\u03dd\u0003\u0002\u0002\u0002",
    "\u03e0\u03e9\u0005\u010a\u0086\u0002\u03e1\u03e9\u0007%\u0002\u0002",
    "\u03e2\u03e9\u0007$\u0002\u0002\u03e3\u03e9\u0007#\u0002\u0002\u03e4",
    "\u03e9\u0007(\u0002\u0002\u03e5\u03e9\u0007\u0014\u0002\u0002\u03e6",
    "\u03e9\u00070\u0002\u0002\u03e7\u03e9\u00073\u0002\u0002\u03e8\u03e0",
    "\u0003\u0002\u0002\u0002\u03e8\u03e1\u0003\u0002\u0002\u0002\u03e8\u03e2",
    "\u0003\u0002\u0002\u0002\u03e8\u03e3\u0003\u0002\u0002\u0002\u03e8\u03e4",
    "\u0003\u0002\u0002\u0002\u03e8\u03e5\u0003\u0002\u0002\u0002\u03e8\u03e6",
    "\u0003\u0002\u0002\u0002\u03e8\u03e7\u0003\u0002\u0002\u0002\u03e9\u007f",
    "\u0003\u0002\u0002\u0002\u03ea\u03ef\u0005\u0082B\u0002\u03eb\u03ec",
    "\u0007B\u0002\u0002\u03ec\u03ee\u0005\u0082B\u0002\u03ed\u03eb\u0003",
    "\u0002\u0002\u0002\u03ee\u03f1\u0003\u0002\u0002\u0002\u03ef\u03ed\u0003",
    "\u0002\u0002\u0002\u03ef\u03f0\u0003\u0002\u0002\u0002\u03f0\u0081\u0003",
    "\u0002\u0002\u0002\u03f1\u03ef\u0003\u0002\u0002\u0002\u03f2\u03f5\u0005",
    "\u0084C\u0002\u03f3\u03f4\u0007D\u0002\u0002\u03f4\u03f6\u0005\u0086",
    "D\u0002\u03f5\u03f3\u0003\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002",
    "\u0002\u0002\u03f6\u0083\u0003\u0002\u0002\u0002\u03f7\u03f9\u0007h",
    "\u0002\u0002\u03f8\u03fa\u00050\u0019\u0002\u03f9\u03f8\u0003\u0002",
    "\u0002\u0002\u03f9\u03fa\u0003\u0002\u0002\u0002\u03fa\u0085\u0003\u0002",
    "\u0002\u0002\u03fb\u03fe\u0005\u01c8\u00e5\u0002\u03fc\u03fe\u0005\u011c",
    "\u008f\u0002\u03fd\u03fb\u0003\u0002\u0002\u0002\u03fd\u03fc\u0003\u0002",
    "\u0002\u0002\u03fe\u0087\u0003\u0002\u0002\u0002\u03ff\u0402\u0005\u008a",
    "F\u0002\u0400\u0402\u0005\u008cG\u0002\u0401\u03ff\u0003\u0002\u0002",
    "\u0002\u0401\u0400\u0003\u0002\u0002\u0002\u0402\u0089\u0003\u0002\u0002",
    "\u0002\u0403\u0406\u0005\u0016\f\u0002\u0404\u0406\u0007\u0005\u0002",
    "\u0002\u0405\u0403\u0003\u0002\u0002\u0002\u0405\u0404\u0003\u0002\u0002",
    "\u0002\u0406\u008b\u0003\u0002\u0002\u0002\u0407\u040b\u0005\u008eH",
    "\u0002\u0408\u040b\u0005\u009cO\u0002\u0409\u040b\u0005\u009eP\u0002",
    "\u040a\u0407\u0003\u0002\u0002\u0002\u040a\u0408\u0003\u0002\u0002\u0002",
    "\u040a\u0409\u0003\u0002\u0002\u0002\u040b\u008d\u0003\u0002\u0002\u0002",
    "\u040c\u040f\u0005\u0094K\u0002\u040d\u040f\u0005\u009aN\u0002\u040e",
    "\u040c\u0003\u0002\u0002\u0002\u040e\u040d\u0003\u0002\u0002\u0002\u040f",
    "\u0414\u0003\u0002\u0002\u0002\u0410\u0413\u0005\u0092J\u0002\u0411",
    "\u0413\u0005\u0098M\u0002\u0412\u0410\u0003\u0002\u0002\u0002\u0412",
    "\u0411\u0003\u0002\u0002\u0002\u0413\u0416\u0003\u0002\u0002\u0002\u0414",
    "\u0412\u0003\u0002\u0002\u0002\u0414\u0415\u0003\u0002\u0002\u0002\u0415",
    "\u008f\u0003\u0002\u0002\u0002\u0416\u0414\u0003\u0002\u0002\u0002\u0417",
    "\u0419\u0007h\u0002\u0002\u0418\u041a\u0005:\u001e\u0002\u0419\u0418",
    "\u0003\u0002\u0002\u0002\u0419\u041a\u0003\u0002\u0002\u0002\u041a\u0428",
    "\u0003\u0002\u0002\u0002\u041b\u041c\u0005\u008eH\u0002\u041c\u0420",
    "\u0007C\u0002\u0002\u041d\u041f\u0005\u010a\u0086\u0002\u041e\u041d",
    "\u0003\u0002\u0002\u0002\u041f\u0422\u0003\u0002\u0002\u0002\u0420\u041e",
    "\u0003\u0002\u0002\u0002\u0420\u0421\u0003\u0002\u0002\u0002\u0421\u0423",
    "\u0003\u0002\u0002\u0002\u0422\u0420\u0003\u0002\u0002\u0002\u0423\u0425",
    "\u0007h\u0002\u0002\u0424\u0426\u0005:\u001e\u0002\u0425\u0424\u0003",
    "\u0002\u0002\u0002\u0425\u0426\u0003\u0002\u0002\u0002\u0426\u0428\u0003",
    "\u0002\u0002\u0002\u0427\u0417\u0003\u0002\u0002\u0002\u0427\u041b\u0003",
    "\u0002\u0002\u0002\u0428\u0091\u0003\u0002\u0002\u0002\u0429\u042d\u0007",
    "C\u0002\u0002\u042a\u042c\u0005\u010a\u0086\u0002\u042b\u042a\u0003",
    "\u0002\u0002\u0002\u042c\u042f\u0003\u0002\u0002\u0002\u042d\u042b\u0003",
    "\u0002\u0002\u0002\u042d\u042e\u0003\u0002\u0002\u0002\u042e\u0430\u0003",
    "\u0002\u0002\u0002\u042f\u042d\u0003\u0002\u0002\u0002\u0430\u0432\u0007",
    "h\u0002\u0002\u0431\u0433\u0005:\u001e\u0002\u0432\u0431\u0003\u0002",
    "\u0002\u0002\u0432\u0433\u0003\u0002\u0002\u0002\u0433\u0093\u0003\u0002",
    "\u0002\u0002\u0434\u0436\u0007h\u0002\u0002\u0435\u0437\u0005:\u001e",
    "\u0002\u0436\u0435\u0003\u0002\u0002\u0002\u0436\u0437\u0003\u0002\u0002",
    "\u0002\u0437\u0095\u0003\u0002\u0002\u0002\u0438\u0439\u0005\u0090I",
    "\u0002\u0439\u0097\u0003\u0002\u0002\u0002\u043a\u043b\u0005\u0092J",
    "\u0002\u043b\u0099\u0003\u0002\u0002\u0002\u043c\u043d\u0005\u0094K",
    "\u0002\u043d\u009b\u0003\u0002\u0002\u0002\u043e\u043f\u0007h\u0002",
    "\u0002\u043f\u009d\u0003\u0002\u0002\u0002\u0440\u0441\u0005\u008aF",
    "\u0002\u0441\u0442\u00050\u0019\u0002\u0442\u044a\u0003\u0002\u0002",
    "\u0002\u0443\u0444\u0005\u008eH\u0002\u0444\u0445\u00050\u0019\u0002",
    "\u0445\u044a\u0003\u0002\u0002\u0002\u0446\u0447\u0005\u009cO\u0002",
    "\u0447\u0448\u00050\u0019\u0002\u0448\u044a\u0003\u0002\u0002\u0002",
    "\u0449\u0440\u0003\u0002\u0002\u0002\u0449\u0443\u0003\u0002\u0002\u0002",
    "\u0449\u0446\u0003\u0002\u0002\u0002\u044a\u009f\u0003\u0002\u0002\u0002",
    "\u044b\u044d\u0005\u00a2R\u0002\u044c\u044b\u0003\u0002\u0002\u0002",
    "\u044d\u0450\u0003\u0002\u0002\u0002\u044e\u044c\u0003\u0002\u0002\u0002",
    "\u044e\u044f\u0003\u0002\u0002\u0002\u044f\u0451\u0003\u0002\u0002\u0002",
    "\u0450\u044e\u0003\u0002\u0002\u0002\u0451\u0452\u0005\u00a4S\u0002",
    "\u0452\u0453\u0005\u00c4c\u0002\u0453\u00a1\u0003\u0002\u0002\u0002",
    "\u0454\u045f\u0005\u010a\u0086\u0002\u0455\u045f\u0007%\u0002\u0002",
    "\u0456\u045f\u0007$\u0002\u0002\u0457\u045f\u0007#\u0002\u0002\u0458",
    "\u045f\u0007\u0003\u0002\u0002\u0459\u045f\u0007(\u0002\u0002\u045a",
    "\u045f\u0007\u0014\u0002\u0002\u045b\u045f\u0007,\u0002\u0002\u045c",
    "\u045f\u0007 \u0002\u0002\u045d\u045f\u0007)\u0002\u0002\u045e\u0454",
    "\u0003\u0002\u0002\u0002\u045e\u0455\u0003\u0002\u0002\u0002\u045e\u0456",
    "\u0003\u0002\u0002\u0002\u045e\u0457\u0003\u0002\u0002\u0002\u045e\u0458",
    "\u0003\u0002\u0002\u0002\u045e\u0459\u0003\u0002\u0002\u0002\u045e\u045a",
    "\u0003\u0002\u0002\u0002\u045e\u045b\u0003\u0002\u0002\u0002\u045e\u045c",
    "\u0003\u0002\u0002\u0002\u045e\u045d\u0003\u0002\u0002\u0002\u045f\u00a3",
    "\u0003\u0002\u0002\u0002\u0460\u0461\u0005\u00a6T\u0002\u0461\u0463",
    "\u0005\u00a8U\u0002\u0462\u0464\u0005\u00be`\u0002\u0463\u0462\u0003",
    "\u0002\u0002\u0002\u0463\u0464\u0003\u0002\u0002\u0002\u0464\u0472\u0003",
    "\u0002\u0002\u0002\u0465\u0469\u0005j6\u0002\u0466\u0468\u0005\u010a",
    "\u0086\u0002\u0467\u0466\u0003\u0002\u0002\u0002\u0468\u046b\u0003\u0002",
    "\u0002\u0002\u0469\u0467\u0003\u0002\u0002\u0002\u0469\u046a\u0003\u0002",
    "\u0002\u0002\u046a\u046c\u0003\u0002\u0002\u0002\u046b\u0469\u0003\u0002",
    "\u0002\u0002\u046c\u046d\u0005\u00a6T\u0002\u046d\u046f\u0005\u00a8",
    "U\u0002\u046e\u0470\u0005\u00be`\u0002\u046f\u046e\u0003\u0002\u0002",
    "\u0002\u046f\u0470\u0003\u0002\u0002\u0002\u0470\u0472\u0003\u0002\u0002",
    "\u0002\u0471\u0460\u0003\u0002\u0002\u0002\u0471\u0465\u0003\u0002\u0002",
    "\u0002\u0472\u00a5\u0003\u0002\u0002\u0002\u0473\u0476\u0005\u0088E",
    "\u0002\u0474\u0476\u00072\u0002\u0002\u0475\u0473\u0003\u0002\u0002",
    "\u0002\u0475\u0474\u0003\u0002\u0002\u0002\u0476\u00a7\u0003\u0002\u0002",
    "\u0002\u0477\u0478\u0005\u00aaV\u0002\u0478\u047a\u0007;\u0002\u0002",
    "\u0479\u047b\u0005\u00acW\u0002\u047a\u0479\u0003\u0002\u0002\u0002",
    "\u047a\u047b\u0003\u0002\u0002\u0002\u047b\u047c\u0003\u0002\u0002\u0002",
    "\u047c\u047e\u0007<\u0002\u0002\u047d\u047f\u00050\u0019\u0002\u047e",
    "\u047d\u0003\u0002\u0002\u0002\u047e\u047f\u0003\u0002\u0002\u0002\u047f",
    "\u00a9\u0003\u0002\u0002\u0002\u0480\u0481\u0007h\u0002\u0002\u0481",
    "\u00ab\u0003\u0002\u0002\u0002\u0482\u0483\u0005\u00aeX\u0002\u0483",
    "\u0484\u0007B\u0002\u0002\u0484\u0485\u0005\u00ba^\u0002\u0485\u0488",
    "\u0003\u0002\u0002\u0002\u0486\u0488\u0005\u00ba^\u0002\u0487\u0482",
    "\u0003\u0002\u0002\u0002\u0487\u0486\u0003\u0002\u0002\u0002\u0488\u00ad",
    "\u0003\u0002\u0002\u0002\u0489\u048e\u0005\u00b0Y\u0002\u048a\u048b",
    "\u0007B\u0002\u0002\u048b\u048d\u0005\u00b0Y\u0002\u048c\u048a\u0003",
    "\u0002\u0002\u0002\u048d\u0490\u0003\u0002\u0002\u0002\u048e\u048c\u0003",
    "\u0002\u0002\u0002\u048e\u048f\u0003\u0002\u0002\u0002\u048f\u049a\u0003",
    "\u0002\u0002\u0002\u0490\u048e\u0003\u0002\u0002\u0002\u0491\u0496\u0005",
    "\u00bc_\u0002\u0492\u0493\u0007B\u0002\u0002\u0493\u0495\u0005\u00b0",
    "Y\u0002\u0494\u0492\u0003\u0002\u0002\u0002\u0495\u0498\u0003\u0002",
    "\u0002\u0002\u0496\u0494\u0003\u0002\u0002\u0002\u0496\u0497\u0003\u0002",
    "\u0002\u0002\u0497\u049a\u0003\u0002\u0002\u0002\u0498\u0496\u0003\u0002",
    "\u0002\u0002\u0499\u0489\u0003\u0002\u0002\u0002\u0499\u0491\u0003\u0002",
    "\u0002\u0002\u049a\u00af\u0003\u0002\u0002\u0002\u049b\u049d\u0005\u00b8",
    "]\u0002\u049c\u049b\u0003\u0002\u0002\u0002\u049d\u04a0\u0003\u0002",
    "\u0002\u0002\u049e\u049c\u0003\u0002\u0002\u0002\u049e\u049f\u0003\u0002",
    "\u0002\u0002\u049f\u04a1\u0003\u0002\u0002\u0002\u04a0\u049e\u0003\u0002",
    "\u0002\u0002\u04a1\u04a2\u0005\u0088E\u0002\u04a2\u04a3\u0005\u00b2",
    "Z\u0002\u04a3\u00b1\u0003\u0002\u0002\u0002\u04a4\u04a5\u0005\u00b4",
    "[\u0002\u04a5\u00b3\u0003\u0002\u0002\u0002\u04a6\u04a8\u0005\u00b6",
    "\\\u0002\u04a7\u04a9\u00050\u0019\u0002\u04a8\u04a7\u0003\u0002\u0002",
    "\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9\u00b5\u0003\u0002\u0002",
    "\u0002\u04aa\u04ab\u0007h\u0002\u0002\u04ab\u00b7\u0003\u0002\u0002",
    "\u0002\u04ac\u04af\u0005\u010a\u0086\u0002\u04ad\u04af\u0007\u0014\u0002",
    "\u0002\u04ae\u04ac\u0003\u0002\u0002\u0002\u04ae\u04ad\u0003\u0002\u0002",
    "\u0002\u04af\u00b9\u0003\u0002\u0002\u0002\u04b0\u04b2\u0005\u00b8]",
    "\u0002\u04b1\u04b0\u0003\u0002\u0002\u0002\u04b2\u04b5\u0003\u0002\u0002",
    "\u0002\u04b3\u04b1\u0003\u0002\u0002\u0002\u04b3\u04b4\u0003\u0002\u0002",
    "\u0002\u04b4\u04b6\u0003\u0002\u0002\u0002\u04b5\u04b3\u0003\u0002\u0002",
    "\u0002\u04b6\u04ba\u0005\u0088E\u0002\u04b7\u04b9\u0005\u010a\u0086",
    "\u0002\u04b8\u04b7\u0003\u0002\u0002\u0002\u04b9\u04bc\u0003\u0002\u0002",
    "\u0002\u04ba\u04b8\u0003\u0002\u0002\u0002\u04ba\u04bb\u0003\u0002\u0002",
    "\u0002\u04bb\u04bd\u0003\u0002\u0002\u0002\u04bc\u04ba\u0003\u0002\u0002",
    "\u0002\u04bd\u04be\u0007j\u0002\u0002\u04be\u04bf\u0005\u0084C\u0002",
    "\u04bf\u04c2\u0003\u0002\u0002\u0002\u04c0\u04c2\u0005\u00b0Y\u0002",
    "\u04c1\u04b3\u0003\u0002\u0002\u0002\u04c1\u04c0\u0003\u0002\u0002\u0002",
    "\u04c2\u00bb\u0003\u0002\u0002\u0002\u04c3\u04c5\u0005\u010a\u0086\u0002",
    "\u04c4\u04c3\u0003\u0002\u0002\u0002\u04c5\u04c8\u0003\u0002\u0002\u0002",
    "\u04c6\u04c4\u0003\u0002\u0002\u0002\u04c6\u04c7\u0003\u0002\u0002\u0002",
    "\u04c7\u04c9\u0003\u0002\u0002\u0002\u04c8\u04c6\u0003\u0002\u0002\u0002",
    "\u04c9\u04cc\u0005\u0088E\u0002\u04ca\u04cb\u0007h\u0002\u0002\u04cb",
    "\u04cd\u0007C\u0002\u0002\u04cc\u04ca\u0003\u0002\u0002\u0002\u04cc",
    "\u04cd\u0003\u0002\u0002\u0002\u04cd\u04ce\u0003\u0002\u0002\u0002\u04ce",
    "\u04cf\u0007-\u0002\u0002\u04cf\u00bd\u0003\u0002\u0002\u0002\u04d0",
    "\u04d1\u0007/\u0002\u0002\u04d1\u04d2\u0005\u00c0a\u0002\u04d2\u00bf",
    "\u0003\u0002\u0002\u0002\u04d3\u04d8\u0005\u00c2b\u0002\u04d4\u04d5",
    "\u0007B\u0002\u0002\u04d5\u04d7\u0005\u00c2b\u0002\u04d6\u04d4\u0003",
    "\u0002\u0002\u0002\u04d7\u04da\u0003\u0002\u0002\u0002\u04d8\u04d6\u0003",
    "\u0002\u0002\u0002\u04d8\u04d9\u0003\u0002\u0002\u0002\u04d9\u00c1\u0003",
    "\u0002\u0002\u0002\u04da\u04d8\u0003\u0002\u0002\u0002\u04db\u04de\u0005",
    " \u0011\u0002\u04dc\u04de\u0005,\u0017\u0002\u04dd\u04db\u0003\u0002",
    "\u0002\u0002\u04dd\u04dc\u0003\u0002\u0002\u0002\u04de\u00c3\u0003\u0002",
    "\u0002\u0002\u04df\u04e2\u0005\u0120\u0091\u0002\u04e0\u04e2\u0007A",
    "\u0002\u0002\u04e1\u04df\u0003\u0002\u0002\u0002\u04e1\u04e0\u0003\u0002",
    "\u0002\u0002\u04e2\u00c5\u0003\u0002\u0002\u0002\u04e3\u04e4\u0005\u0120",
    "\u0091\u0002\u04e4\u00c7\u0003\u0002\u0002\u0002\u04e5\u04e6\u0007(",
    "\u0002\u0002\u04e6\u04e7\u0005\u0120\u0091\u0002\u04e7\u00c9\u0003\u0002",
    "\u0002\u0002\u04e8\u04ea\u0005\u00ccg\u0002\u04e9\u04e8\u0003\u0002",
    "\u0002\u0002\u04ea\u04ed\u0003\u0002\u0002\u0002\u04eb\u04e9\u0003\u0002",
    "\u0002\u0002\u04eb\u04ec\u0003\u0002\u0002\u0002\u04ec\u04ee\u0003\u0002",
    "\u0002\u0002\u04ed\u04eb\u0003\u0002\u0002\u0002\u04ee\u04f0\u0005\u00ce",
    "h\u0002\u04ef\u04f1\u0005\u00be`\u0002\u04f0\u04ef\u0003\u0002\u0002",
    "\u0002\u04f0\u04f1\u0003\u0002\u0002\u0002\u04f1\u04f2\u0003\u0002\u0002",
    "\u0002\u04f2\u04f3\u0005\u00d2j\u0002\u04f3\u00cb\u0003\u0002\u0002",
    "\u0002\u04f4\u04f9\u0005\u010a\u0086\u0002\u04f5\u04f9\u0007%\u0002",
    "\u0002\u04f6\u04f9\u0007$\u0002\u0002\u04f7\u04f9\u0007#\u0002\u0002",
    "\u04f8\u04f4\u0003\u0002\u0002\u0002\u04f8\u04f5\u0003\u0002\u0002\u0002",
    "\u04f8\u04f6\u0003\u0002\u0002\u0002\u04f8\u04f7\u0003\u0002\u0002\u0002",
    "\u04f9\u00cd\u0003\u0002\u0002\u0002\u04fa\u04fc\u0005j6\u0002\u04fb",
    "\u04fa\u0003\u0002\u0002\u0002\u04fb\u04fc\u0003\u0002\u0002\u0002\u04fc",
    "\u04fd\u0003\u0002\u0002\u0002\u04fd\u04fe\u0005\u00d0i\u0002\u04fe",
    "\u0500\u0007;\u0002\u0002\u04ff\u0501\u0005\u00acW\u0002\u0500\u04ff",
    "\u0003\u0002\u0002\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501\u0502",
    "\u0003\u0002\u0002\u0002\u0502\u0503\u0007<\u0002\u0002\u0503\u00cf",
    "\u0003\u0002\u0002\u0002\u0504\u0505\u0007h\u0002\u0002\u0505\u00d1",
    "\u0003\u0002\u0002\u0002\u0506\u0508\u0007=\u0002\u0002\u0507\u0509",
    "\u0005\u00d4k\u0002\u0508\u0507\u0003\u0002\u0002\u0002\u0508\u0509",
    "\u0003\u0002\u0002\u0002\u0509\u050b\u0003\u0002\u0002\u0002\u050a\u050c",
    "\u0005\u0122\u0092\u0002\u050b\u050a\u0003\u0002\u0002\u0002\u050b\u050c",
    "\u0003\u0002\u0002\u0002\u050c\u050d\u0003\u0002\u0002\u0002\u050d\u050e",
    "\u0007>\u0002\u0002\u050e\u00d3\u0003\u0002\u0002\u0002\u050f\u0511",
    "\u0005:\u001e\u0002\u0510\u050f\u0003\u0002\u0002\u0002\u0510\u0511",
    "\u0003\u0002\u0002\u0002\u0511\u0512\u0003\u0002\u0002\u0002\u0512\u0513",
    "\u0007-\u0002\u0002\u0513\u0515\u0007;\u0002\u0002\u0514\u0516\u0005",
    "\u01b8\u00dd\u0002\u0515\u0514\u0003\u0002\u0002\u0002\u0515\u0516\u0003",
    "\u0002\u0002\u0002\u0516\u0517\u0003\u0002\u0002\u0002\u0517\u0518\u0007",
    "<\u0002\u0002\u0518\u053e\u0007A\u0002\u0002\u0519\u051b\u0005:\u001e",
    "\u0002\u051a\u0519\u0003\u0002\u0002\u0002\u051a\u051b\u0003\u0002\u0002",
    "\u0002\u051b\u051c\u0003\u0002\u0002\u0002\u051c\u051d\u0007*\u0002",
    "\u0002\u051d\u051f\u0007;\u0002\u0002\u051e\u0520\u0005\u01b8\u00dd",
    "\u0002\u051f\u051e\u0003\u0002\u0002\u0002\u051f\u0520\u0003\u0002\u0002",
    "\u0002\u0520\u0521\u0003\u0002\u0002\u0002\u0521\u0522\u0007<\u0002",
    "\u0002\u0522\u053e\u0007A\u0002\u0002\u0523\u0524\u0005J&\u0002\u0524",
    "\u0526\u0007C\u0002\u0002\u0525\u0527\u0005:\u001e\u0002\u0526\u0525",
    "\u0003\u0002\u0002\u0002\u0526\u0527\u0003\u0002\u0002\u0002\u0527\u0528",
    "\u0003\u0002\u0002\u0002\u0528\u0529\u0007*\u0002\u0002\u0529\u052b",
    "\u0007;\u0002\u0002\u052a\u052c\u0005\u01b8\u00dd\u0002\u052b\u052a",
    "\u0003\u0002\u0002\u0002\u052b\u052c\u0003\u0002\u0002\u0002\u052c\u052d",
    "\u0003\u0002\u0002\u0002\u052d\u052e\u0007<\u0002\u0002\u052e\u052f",
    "\u0007A\u0002\u0002\u052f\u053e\u0003\u0002\u0002\u0002\u0530\u0531",
    "\u0005\u0184\u00c3\u0002\u0531\u0533\u0007C\u0002\u0002\u0532\u0534",
    "\u0005:\u001e\u0002\u0533\u0532\u0003\u0002\u0002\u0002\u0533\u0534",
    "\u0003\u0002\u0002\u0002\u0534\u0535\u0003\u0002\u0002\u0002\u0535\u0536",
    "\u0007*\u0002\u0002\u0536\u0538\u0007;\u0002\u0002\u0537\u0539\u0005",
    "\u01b8\u00dd\u0002\u0538\u0537\u0003\u0002\u0002\u0002\u0538\u0539\u0003",
    "\u0002\u0002\u0002\u0539\u053a\u0003\u0002\u0002\u0002\u053a\u053b\u0007",
    "<\u0002\u0002\u053b\u053c\u0007A\u0002\u0002\u053c\u053e\u0003\u0002",
    "\u0002\u0002\u053d\u0510\u0003\u0002\u0002\u0002\u053d\u051a\u0003\u0002",
    "\u0002\u0002\u053d\u0523\u0003\u0002\u0002\u0002\u053d\u0530\u0003\u0002",
    "\u0002\u0002\u053e\u00d5\u0003\u0002\u0002\u0002\u053f\u0541\u0005h",
    "5\u0002\u0540\u053f\u0003\u0002\u0002\u0002\u0541\u0544\u0003\u0002",
    "\u0002\u0002\u0542\u0540\u0003\u0002\u0002\u0002\u0542\u0543\u0003\u0002",
    "\u0002\u0002\u0543\u0545\u0003\u0002\u0002\u0002\u0544\u0542\u0003\u0002",
    "\u0002\u0002\u0545\u0546\u0007\u0012\u0002\u0002\u0546\u0548\u0007h",
    "\u0002\u0002\u0547\u0549\u0005p9\u0002\u0548\u0547\u0003\u0002\u0002",
    "\u0002\u0548\u0549\u0003\u0002\u0002\u0002\u0549\u054a\u0003\u0002\u0002",
    "\u0002\u054a\u054b\u0005\u00d8m\u0002\u054b\u00d7\u0003\u0002\u0002",
    "\u0002\u054c\u054e\u0007=\u0002\u0002\u054d\u054f\u0005\u00dan\u0002",
    "\u054e\u054d\u0003\u0002\u0002\u0002\u054e\u054f\u0003\u0002\u0002\u0002",
    "\u054f\u0551\u0003\u0002\u0002\u0002\u0550\u0552\u0007B\u0002\u0002",
    "\u0551\u0550\u0003\u0002\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002",
    "\u0552\u0554\u0003\u0002\u0002\u0002\u0553\u0555\u0005\u00e0q\u0002",
    "\u0554\u0553\u0003\u0002\u0002\u0002\u0554\u0555\u0003\u0002\u0002\u0002",
    "\u0555\u0556\u0003\u0002\u0002\u0002\u0556\u0557\u0007>\u0002\u0002",
    "\u0557\u00d9\u0003\u0002\u0002\u0002\u0558\u055d\u0005\u00dco\u0002",
    "\u0559\u055a\u0007B\u0002\u0002\u055a\u055c\u0005\u00dco\u0002\u055b",
    "\u0559\u0003\u0002\u0002\u0002\u055c\u055f\u0003\u0002\u0002\u0002\u055d",
    "\u055b\u0003\u0002\u0002\u0002\u055d\u055e\u0003\u0002\u0002\u0002\u055e",
    "\u00db\u0003\u0002\u0002\u0002\u055f\u055d\u0003\u0002\u0002\u0002\u0560",
    "\u0562\u0005\u00dep\u0002\u0561\u0560\u0003\u0002\u0002\u0002\u0562",
    "\u0565\u0003\u0002\u0002\u0002\u0563\u0561\u0003\u0002\u0002\u0002\u0563",
    "\u0564\u0003\u0002\u0002\u0002\u0564\u0566\u0003\u0002\u0002\u0002\u0565",
    "\u0563\u0003\u0002\u0002\u0002\u0566\u056c\u0007h\u0002\u0002\u0567",
    "\u0569\u0007;\u0002\u0002\u0568\u056a\u0005\u01b8\u00dd\u0002\u0569",
    "\u0568\u0003\u0002\u0002\u0002\u0569\u056a\u0003\u0002\u0002\u0002\u056a",
    "\u056b\u0003\u0002\u0002\u0002\u056b\u056d\u0007<\u0002\u0002\u056c",
    "\u0567\u0003\u0002\u0002\u0002\u056c\u056d\u0003\u0002\u0002\u0002\u056d",
    "\u056f\u0003\u0002\u0002\u0002\u056e\u0570\u0005t;\u0002\u056f\u056e",
    "\u0003\u0002\u0002\u0002\u056f\u0570\u0003\u0002\u0002\u0002\u0570\u00dd",
    "\u0003\u0002\u0002\u0002\u0571\u0572\u0005\u010a\u0086\u0002\u0572\u00df",
    "\u0003\u0002\u0002\u0002\u0573\u0577\u0007A\u0002\u0002\u0574\u0576",
    "\u0005v<\u0002\u0575\u0574\u0003\u0002\u0002\u0002\u0576\u0579\u0003",
    "\u0002\u0002\u0002\u0577\u0575\u0003\u0002\u0002\u0002\u0577\u0578\u0003",
    "\u0002\u0002\u0002\u0578\u00e1\u0003\u0002\u0002\u0002\u0579\u0577\u0003",
    "\u0002\u0002\u0002\u057a\u057d\u0005\u00e4s\u0002\u057b\u057d\u0005",
    "\u00fe\u0080\u0002\u057c\u057a\u0003\u0002\u0002\u0002\u057c\u057b\u0003",
    "\u0002\u0002\u0002\u057d\u00e3\u0003\u0002\u0002\u0002\u057e\u057f\u0005",
    "\u00e6t\u0002\u057f\u0580\u0007\u001e\u0002\u0002\u0580\u0582\u0005",
    "\u00e8u\u0002\u0581\u0583\u0005j6\u0002\u0582\u0581\u0003\u0002\u0002",
    "\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583\u0585\u0003\u0002\u0002",
    "\u0002\u0584\u0586\u0005\u00ecw\u0002\u0585\u0584\u0003\u0002\u0002",
    "\u0002\u0585\u0586\u0003\u0002\u0002\u0002\u0586\u0587\u0003\u0002\u0002",
    "\u0002\u0587\u0588\u0005\u00eex\u0002\u0588\u00e5\u0003\u0002\u0002",
    "\u0002\u0589\u058b\u0005\u00eav\u0002\u058a\u0589\u0003\u0002\u0002",
    "\u0002\u058b\u058e\u0003\u0002\u0002\u0002\u058c\u058a\u0003\u0002\u0002",
    "\u0002\u058c\u058d\u0003\u0002\u0002\u0002\u058d\u00e7\u0003\u0002\u0002",
    "\u0002\u058e\u058c\u0003\u0002\u0002\u0002\u058f\u0590\u0007h\u0002",
    "\u0002\u0590\u00e9\u0003\u0002\u0002\u0002\u0591\u0599\u0005\u010a\u0086",
    "\u0002\u0592\u0599\u0007%\u0002\u0002\u0593\u0599\u0007$\u0002\u0002",
    "\u0594\u0599\u0007#\u0002\u0002\u0595\u0599\u0007\u0003\u0002\u0002",
    "\u0596\u0599\u0007(\u0002\u0002\u0597\u0599\u0007)\u0002\u0002\u0598",
    "\u0591\u0003\u0002\u0002\u0002\u0598\u0592\u0003\u0002\u0002\u0002\u0598",
    "\u0593\u0003\u0002\u0002\u0002\u0598\u0594\u0003\u0002\u0002\u0002\u0598",
    "\u0595\u0003\u0002\u0002\u0002\u0598\u0596\u0003\u0002\u0002\u0002\u0598",
    "\u0597\u0003\u0002\u0002\u0002\u0599\u00eb\u0003\u0002\u0002\u0002\u059a",
    "\u059b\u0007\u0013\u0002\u0002\u059b\u059c\u0005r:\u0002\u059c\u00ed",
    "\u0003\u0002\u0002\u0002\u059d\u05a1\u0007=\u0002\u0002\u059e\u05a0",
    "\u0005\u00f0y\u0002\u059f\u059e\u0003\u0002\u0002\u0002\u05a0\u05a3",
    "\u0003\u0002\u0002\u0002\u05a1\u059f\u0003\u0002\u0002\u0002\u05a1\u05a2",
    "\u0003\u0002\u0002\u0002\u05a2\u05a4\u0003\u0002\u0002\u0002\u05a3\u05a1",
    "\u0003\u0002\u0002\u0002\u05a4\u05a5\u0007>\u0002\u0002\u05a5\u00ef",
    "\u0003\u0002\u0002\u0002\u05a6\u05ac\u0005\u00f2z\u0002\u05a7\u05ac",
    "\u0005\u00f8}\u0002\u05a8\u05ac\u0005`1\u0002\u05a9\u05ac\u0005\u00e2",
    "r\u0002\u05aa\u05ac\u0007A\u0002\u0002\u05ab\u05a6\u0003\u0002\u0002",
    "\u0002\u05ab\u05a7\u0003\u0002\u0002\u0002\u05ab\u05a8\u0003\u0002\u0002",
    "\u0002\u05ab\u05a9\u0003\u0002\u0002\u0002\u05ab\u05aa\u0003\u0002\u0002",
    "\u0002\u05ac\u00f1\u0003\u0002\u0002\u0002\u05ad\u05ae\u0005\u00f4{",
    "\u0002\u05ae\u05af\u0005\u0088E\u0002\u05af\u05b0\u0005\u0080A\u0002",
    "\u05b0\u05b1\u0007A\u0002\u0002\u05b1\u00f3\u0003\u0002\u0002\u0002",
    "\u05b2\u05b4\u0005\u00f6|\u0002\u05b3\u05b2\u0003\u0002\u0002\u0002",
    "\u05b4\u05b7\u0003\u0002\u0002\u0002\u05b5\u05b3\u0003\u0002\u0002\u0002",
    "\u05b5\u05b6\u0003\u0002\u0002\u0002\u05b6\u00f5\u0003\u0002\u0002\u0002",
    "\u05b7\u05b5\u0003\u0002\u0002\u0002\u05b8\u05bd\u0005\u010a\u0086\u0002",
    "\u05b9\u05bd\u0007%\u0002\u0002\u05ba\u05bd\u0007(\u0002\u0002\u05bb",
    "\u05bd\u0007\u0014\u0002\u0002\u05bc\u05b8\u0003\u0002\u0002\u0002\u05bc",
    "\u05b9\u0003\u0002\u0002\u0002\u05bc\u05ba\u0003\u0002\u0002\u0002\u05bc",
    "\u05bb\u0003\u0002\u0002\u0002\u05bd\u00f7\u0003\u0002\u0002\u0002\u05be",
    "\u05bf\u0005\u00fa~\u0002\u05bf\u05c0\u0005\u00a4S\u0002\u05c0\u05c1",
    "\u0005\u00c4c\u0002\u05c1\u00f9\u0003\u0002\u0002\u0002\u05c2\u05c4",
    "\u0005\u00fc\u007f\u0002\u05c3\u05c2\u0003\u0002\u0002\u0002\u05c4\u05c7",
    "\u0003\u0002\u0002\u0002\u05c5\u05c3\u0003\u0002\u0002\u0002\u05c5\u05c6",
    "\u0003\u0002\u0002\u0002\u05c6\u00fb\u0003\u0002\u0002\u0002\u05c7\u05c5",
    "\u0003\u0002\u0002\u0002\u05c8\u05cf\u0005\u010a\u0086\u0002\u05c9\u05cf",
    "\u0007%\u0002\u0002\u05ca\u05cf\u0007\u0003\u0002\u0002\u05cb\u05cf",
    "\u0007\u000e\u0002\u0002\u05cc\u05cf\u0007(\u0002\u0002\u05cd\u05cf",
    "\u0007)\u0002\u0002\u05ce\u05c8\u0003\u0002\u0002\u0002\u05ce\u05c9",
    "\u0003\u0002\u0002\u0002\u05ce\u05ca\u0003\u0002\u0002\u0002\u05ce\u05cb",
    "\u0003\u0002\u0002\u0002\u05ce\u05cc\u0003\u0002\u0002\u0002\u05ce\u05cd",
    "\u0003\u0002\u0002\u0002\u05cf\u00fd\u0003\u0002\u0002\u0002\u05d0\u05d2",
    "\u0005\u00eav\u0002\u05d1\u05d0\u0003\u0002\u0002\u0002\u05d2\u05d5",
    "\u0003\u0002\u0002\u0002\u05d3\u05d1\u0003\u0002\u0002\u0002\u05d3\u05d4",
    "\u0003\u0002\u0002\u0002\u05d4\u05d6\u0003\u0002\u0002\u0002\u05d5\u05d3",
    "\u0003\u0002\u0002\u0002\u05d6\u05d7\u0007i\u0002\u0002\u05d7\u05d8",
    "\u0007\u001e\u0002\u0002\u05d8\u05d9\u0007h\u0002\u0002\u05d9\u05da",
    "\u0005\u0100\u0081\u0002\u05da\u00ff\u0003\u0002\u0002\u0002\u05db\u05df",
    "\u0007=\u0002\u0002\u05dc\u05de\u0005\u0102\u0082\u0002\u05dd\u05dc",
    "\u0003\u0002\u0002\u0002\u05de\u05e1\u0003\u0002\u0002\u0002\u05df\u05dd",
    "\u0003\u0002\u0002\u0002\u05df\u05e0\u0003\u0002\u0002\u0002\u05e0\u05e2",
    "\u0003\u0002\u0002\u0002\u05e1\u05df\u0003\u0002\u0002\u0002\u05e2\u05e3",
    "\u0007>\u0002\u0002\u05e3\u0101\u0003\u0002\u0002\u0002\u05e4\u05ea",
    "\u0005\u0104\u0083\u0002\u05e5\u05ea\u0005\u00f2z\u0002\u05e6\u05ea",
    "\u0005`1\u0002\u05e7\u05ea\u0005\u00e2r\u0002\u05e8\u05ea\u0007A\u0002",
    "\u0002\u05e9\u05e4\u0003\u0002\u0002\u0002\u05e9\u05e5\u0003\u0002\u0002",
    "\u0002\u05e9\u05e6\u0003\u0002\u0002\u0002\u05e9\u05e7\u0003\u0002\u0002",
    "\u0002\u05e9\u05e8\u0003\u0002\u0002\u0002\u05ea\u0103\u0003\u0002\u0002",
    "\u0002\u05eb\u05ed\u0005\u0106\u0084\u0002\u05ec\u05eb\u0003\u0002\u0002",
    "\u0002\u05ed\u05f0\u0003\u0002\u0002\u0002\u05ee\u05ec\u0003\u0002\u0002",
    "\u0002\u05ee\u05ef\u0003\u0002\u0002\u0002\u05ef\u05f1\u0003\u0002\u0002",
    "\u0002\u05f0\u05ee\u0003\u0002\u0002\u0002\u05f1\u05f2\u0005\u0088E",
    "\u0002\u05f2\u05f3\u0007h\u0002\u0002\u05f3\u05f4\u0007;\u0002\u0002",
    "\u05f4\u05f6\u0007<\u0002\u0002\u05f5\u05f7\u00050\u0019\u0002\u05f6",
    "\u05f5\u0003\u0002\u0002\u0002\u05f6\u05f7\u0003\u0002\u0002\u0002\u05f7",
    "\u05f9\u0003\u0002\u0002\u0002\u05f8\u05fa\u0005\u0108\u0085\u0002\u05f9",
    "\u05f8\u0003\u0002\u0002\u0002\u05f9\u05fa\u0003\u0002\u0002\u0002\u05fa",
    "\u05fb\u0003\u0002\u0002\u0002\u05fb\u05fc\u0007A\u0002\u0002\u05fc",
    "\u0105\u0003\u0002\u0002\u0002\u05fd\u0601\u0005\u010a\u0086\u0002\u05fe",
    "\u0601\u0007%\u0002\u0002\u05ff\u0601\u0007\u0003\u0002\u0002\u0600",
    "\u05fd\u0003\u0002\u0002\u0002\u0600\u05fe\u0003\u0002\u0002\u0002\u0600",
    "\u05ff\u0003\u0002\u0002\u0002\u0601\u0107\u0003\u0002\u0002\u0002\u0602",
    "\u0603\u0007\u000e\u0002\u0002\u0603\u0604\u0005\u0112\u008a\u0002\u0604",
    "\u0109\u0003\u0002\u0002\u0002\u0605\u0609\u0005\u010c\u0087\u0002\u0606",
    "\u0609\u0005\u0118\u008d\u0002\u0607\u0609\u0005\u011a\u008e\u0002\u0608",
    "\u0605\u0003\u0002\u0002\u0002\u0608\u0606\u0003\u0002\u0002\u0002\u0608",
    "\u0607\u0003\u0002\u0002\u0002\u0609\u010b\u0003\u0002\u0002\u0002\u060a",
    "\u060b\u0007i\u0002\u0002\u060b\u060c\u0005F$\u0002\u060c\u060e\u0007",
    ";\u0002\u0002\u060d\u060f\u0005\u010e\u0088\u0002\u060e\u060d\u0003",
    "\u0002\u0002\u0002\u060e\u060f\u0003\u0002\u0002\u0002\u060f\u0610\u0003",
    "\u0002\u0002\u0002\u0610\u0611\u0007<\u0002\u0002\u0611\u010d\u0003",
    "\u0002\u0002\u0002\u0612\u0617\u0005\u0110\u0089\u0002\u0613\u0614\u0007",
    "B\u0002\u0002\u0614\u0616\u0005\u0110\u0089\u0002\u0615\u0613\u0003",
    "\u0002\u0002\u0002\u0616\u0619\u0003\u0002\u0002\u0002\u0617\u0615\u0003",
    "\u0002\u0002\u0002\u0617\u0618\u0003\u0002\u0002\u0002\u0618\u010f\u0003",
    "\u0002\u0002\u0002\u0619\u0617\u0003\u0002\u0002\u0002\u061a\u061b\u0007",
    "h\u0002\u0002\u061b\u061c\u0007D\u0002\u0002\u061c\u061d\u0005\u0112",
    "\u008a\u0002\u061d\u0111\u0003\u0002\u0002\u0002\u061e\u0622\u0005\u01da",
    "\u00ee\u0002\u061f\u0622\u0005\u0114\u008b\u0002\u0620\u0622\u0005\u010a",
    "\u0086\u0002\u0621\u061e\u0003\u0002\u0002\u0002\u0621\u061f\u0003\u0002",
    "\u0002\u0002\u0621\u0620\u0003\u0002\u0002\u0002\u0622\u0113\u0003\u0002",
    "\u0002\u0002\u0623\u0625\u0007=\u0002\u0002\u0624\u0626\u0005\u0116",
    "\u008c\u0002\u0625\u0624\u0003\u0002\u0002\u0002\u0625\u0626\u0003\u0002",
    "\u0002\u0002\u0626\u0628\u0003\u0002\u0002\u0002\u0627\u0629\u0007B",
    "\u0002\u0002\u0628\u0627\u0003\u0002\u0002\u0002\u0628\u0629\u0003\u0002",
    "\u0002\u0002\u0629\u062a\u0003\u0002\u0002\u0002\u062a\u062b\u0007>",
    "\u0002\u0002\u062b\u0115\u0003\u0002\u0002\u0002\u062c\u0631\u0005\u0112",
    "\u008a\u0002\u062d\u062e\u0007B\u0002\u0002\u062e\u0630\u0005\u0112",
    "\u008a\u0002\u062f\u062d\u0003\u0002\u0002\u0002\u0630\u0633\u0003\u0002",
    "\u0002\u0002\u0631\u062f\u0003\u0002\u0002\u0002\u0631\u0632\u0003\u0002",
    "\u0002\u0002\u0632\u0117\u0003\u0002\u0002\u0002\u0633\u0631\u0003\u0002",
    "\u0002\u0002\u0634\u0635\u0007i\u0002\u0002\u0635\u0636\u0005F$\u0002",
    "\u0636\u0119\u0003\u0002\u0002\u0002\u0637\u0638\u0007i\u0002\u0002",
    "\u0638\u0639\u0005F$\u0002\u0639\u063a\u0007;\u0002\u0002\u063a\u063b",
    "\u0005\u0112\u008a\u0002\u063b\u063c\u0007<\u0002\u0002\u063c\u011b",
    "\u0003\u0002\u0002\u0002\u063d\u063f\u0007=\u0002\u0002\u063e\u0640",
    "\u0005\u011e\u0090\u0002\u063f\u063e\u0003\u0002\u0002\u0002\u063f\u0640",
    "\u0003\u0002\u0002\u0002\u0640\u0642\u0003\u0002\u0002\u0002\u0641\u0643",
    "\u0007B\u0002\u0002\u0642\u0641\u0003\u0002\u0002\u0002\u0642\u0643",
    "\u0003\u0002\u0002\u0002\u0643\u0644\u0003\u0002\u0002\u0002\u0644\u0645",
    "\u0007>\u0002\u0002\u0645\u011d\u0003\u0002\u0002\u0002\u0646\u064b",
    "\u0005\u0086D\u0002\u0647\u0648\u0007B\u0002\u0002\u0648\u064a\u0005",
    "\u0086D\u0002\u0649\u0647\u0003\u0002\u0002\u0002\u064a\u064d\u0003",
    "\u0002\u0002\u0002\u064b\u0649\u0003\u0002\u0002\u0002\u064b\u064c\u0003",
    "\u0002\u0002\u0002\u064c\u011f\u0003\u0002\u0002\u0002\u064d\u064b\u0003",
    "\u0002\u0002\u0002\u064e\u0650\u0007=\u0002\u0002\u064f\u0651\u0005",
    "\u0122\u0092\u0002\u0650\u064f\u0003\u0002\u0002\u0002\u0650\u0651\u0003",
    "\u0002\u0002\u0002\u0651\u0652\u0003\u0002\u0002\u0002\u0652\u0653\u0007",
    ">\u0002\u0002\u0653\u0121\u0003\u0002\u0002\u0002\u0654\u0658\u0005",
    "\u0124\u0093\u0002\u0655\u0657\u0005\u0124\u0093\u0002\u0656\u0655\u0003",
    "\u0002\u0002\u0002\u0657\u065a\u0003\u0002\u0002\u0002\u0658\u0656\u0003",
    "\u0002\u0002\u0002\u0658\u0659\u0003\u0002\u0002\u0002\u0659\u0123\u0003",
    "\u0002\u0002\u0002\u065a\u0658\u0003\u0002\u0002\u0002\u065b\u065f\u0005",
    "\u0126\u0094\u0002\u065c\u065f\u0005`1\u0002\u065d\u065f\u0005\u012a",
    "\u0096\u0002\u065e\u065b\u0003\u0002\u0002\u0002\u065e\u065c\u0003\u0002",
    "\u0002\u0002\u065e\u065d\u0003\u0002\u0002\u0002\u065f\u0125\u0003\u0002",
    "\u0002\u0002\u0660\u0661\u0005\u0128\u0095\u0002\u0661\u0662\u0007A",
    "\u0002\u0002\u0662\u0127\u0003\u0002\u0002\u0002\u0663\u0665\u0005\u00b8",
    "]\u0002\u0664\u0663\u0003\u0002\u0002\u0002\u0665\u0668\u0003\u0002",
    "\u0002\u0002\u0666\u0664\u0003\u0002\u0002\u0002\u0666\u0667\u0003\u0002",
    "\u0002\u0002\u0667\u0669\u0003\u0002\u0002\u0002\u0668\u0666\u0003\u0002",
    "\u0002\u0002\u0669\u066a\u0005\u0088E\u0002\u066a\u066b\u0005\u0080",
    "A\u0002\u066b\u0129\u0003\u0002\u0002\u0002\u066c\u0673\u0005\u012e",
    "\u0098\u0002\u066d\u0673\u0005\u0132\u009a\u0002\u066e\u0673\u0005\u013a",
    "\u009e\u0002\u066f\u0673\u0005\u013c\u009f\u0002\u0670\u0673\u0005\u014e",
    "\u00a8\u0002\u0671\u0673\u0005\u0154\u00ab\u0002\u0672\u066c\u0003\u0002",
    "\u0002\u0002\u0672\u066d\u0003\u0002\u0002\u0002\u0672\u066e\u0003\u0002",
    "\u0002\u0002\u0672\u066f\u0003\u0002\u0002\u0002\u0672\u0670\u0003\u0002",
    "\u0002\u0002\u0672\u0671\u0003\u0002\u0002\u0002\u0673\u012b\u0003\u0002",
    "\u0002\u0002\u0674\u067a\u0005\u012e\u0098\u0002\u0675\u067a\u0005\u0134",
    "\u009b\u0002\u0676\u067a\u0005\u013e\u00a0\u0002\u0677\u067a\u0005\u0150",
    "\u00a9\u0002\u0678\u067a\u0005\u0156\u00ac\u0002\u0679\u0674\u0003\u0002",
    "\u0002\u0002\u0679\u0675\u0003\u0002\u0002\u0002\u0679\u0676\u0003\u0002",
    "\u0002\u0002\u0679\u0677\u0003\u0002\u0002\u0002\u0679\u0678\u0003\u0002",
    "\u0002\u0002\u067a\u012d\u0003\u0002\u0002\u0002\u067b\u0688\u0005\u0120",
    "\u0091\u0002\u067c\u0688\u0005\u0130\u0099\u0002\u067d\u0688\u0005\u0136",
    "\u009c\u0002\u067e\u0688\u0005\u0140\u00a1\u0002\u067f\u0688\u0005\u0142",
    "\u00a2\u0002\u0680\u0688\u0005\u0152\u00aa\u0002\u0681\u0688\u0005\u0166",
    "\u00b4\u0002\u0682\u0688\u0005\u0168\u00b5\u0002\u0683\u0688\u0005\u016a",
    "\u00b6\u0002\u0684\u0688\u0005\u016e\u00b8\u0002\u0685\u0688\u0005\u016c",
    "\u00b7\u0002\u0686\u0688\u0005\u0170\u00b9\u0002\u0687\u067b\u0003\u0002",
    "\u0002\u0002\u0687\u067c\u0003\u0002\u0002\u0002\u0687\u067d\u0003\u0002",
    "\u0002\u0002\u0687\u067e\u0003\u0002\u0002\u0002\u0687\u067f\u0003\u0002",
    "\u0002\u0002\u0687\u0680\u0003\u0002\u0002\u0002\u0687\u0681\u0003\u0002",
    "\u0002\u0002\u0687\u0682\u0003\u0002\u0002\u0002\u0687\u0683\u0003\u0002",
    "\u0002\u0002\u0687\u0684\u0003\u0002\u0002\u0002\u0687\u0685\u0003\u0002",
    "\u0002\u0002\u0687\u0686\u0003\u0002\u0002\u0002\u0688\u012f\u0003\u0002",
    "\u0002\u0002\u0689\u068a\u0007A\u0002\u0002\u068a\u0131\u0003\u0002",
    "\u0002\u0002\u068b\u068c\u0007h\u0002\u0002\u068c\u068d\u0007J\u0002",
    "\u0002\u068d\u068e\u0005\u012a\u0096\u0002\u068e\u0133\u0003\u0002\u0002",
    "\u0002\u068f\u0690\u0007h\u0002\u0002\u0690\u0691\u0007J\u0002\u0002",
    "\u0691\u0692\u0005\u012c\u0097\u0002\u0692\u0135\u0003\u0002\u0002\u0002",
    "\u0693\u0694\u0005\u0138\u009d\u0002\u0694\u0695\u0007A\u0002\u0002",
    "\u0695\u0137\u0003\u0002\u0002\u0002\u0696\u069e\u0005\u01d4\u00eb\u0002",
    "\u0697\u069e\u0005\u021c\u010f\u0002\u0698\u069e\u0005\u0220\u0111\u0002",
    "\u0699\u069e\u0005\u022a\u0116\u0002\u069a\u069e\u0005\u022e\u0118\u0002",
    "\u069b\u069e\u0005\u01ac\u00d7\u0002\u069c\u069e\u0005\u0198\u00cd\u0002",
    "\u069d\u0696\u0003\u0002\u0002\u0002\u069d\u0697\u0003\u0002\u0002\u0002",
    "\u069d\u0698\u0003\u0002\u0002\u0002\u069d\u0699\u0003\u0002\u0002\u0002",
    "\u069d\u069a\u0003\u0002\u0002\u0002\u069d\u069b\u0003\u0002\u0002\u0002",
    "\u069d\u069c\u0003\u0002\u0002\u0002\u069e\u0139\u0003\u0002\u0002\u0002",
    "\u069f\u06a0\u0007\u0018\u0002\u0002\u06a0\u06a1\u0007;\u0002\u0002",
    "\u06a1\u06a2\u0005\u01c8\u00e5\u0002\u06a2\u06a3\u0007<\u0002\u0002",
    "\u06a3\u06a4\u0005\u012a\u0096\u0002\u06a4\u013b\u0003\u0002\u0002\u0002",
    "\u06a5\u06a6\u0007\u0018\u0002\u0002\u06a6\u06a7\u0007;\u0002\u0002",
    "\u06a7\u06a8\u0005\u01c8\u00e5\u0002\u06a8\u06a9\u0007<\u0002\u0002",
    "\u06a9\u06aa\u0005\u012c\u0097\u0002\u06aa\u06ab\u0007\u0011\u0002\u0002",
    "\u06ab\u06ac\u0005\u012a\u0096\u0002\u06ac\u013d\u0003\u0002\u0002\u0002",
    "\u06ad\u06ae\u0007\u0018\u0002\u0002\u06ae\u06af\u0007;\u0002\u0002",
    "\u06af\u06b0\u0005\u01c8\u00e5\u0002\u06b0\u06b1\u0007<\u0002\u0002",
    "\u06b1\u06b2\u0005\u012c\u0097\u0002\u06b2\u06b3\u0007\u0011\u0002\u0002",
    "\u06b3\u06b4\u0005\u012c\u0097\u0002\u06b4\u013f\u0003\u0002\u0002\u0002",
    "\u06b5\u06b6\u0007\u0004\u0002\u0002\u06b6\u06b7\u0005\u01c8\u00e5\u0002",
    "\u06b7\u06b8\u0007A\u0002\u0002\u06b8\u06c0\u0003\u0002\u0002\u0002",
    "\u06b9\u06ba\u0007\u0004\u0002\u0002\u06ba\u06bb\u0005\u01c8\u00e5\u0002",
    "\u06bb\u06bc\u0007J\u0002\u0002\u06bc\u06bd\u0005\u01c8\u00e5\u0002",
    "\u06bd\u06be\u0007A\u0002\u0002\u06be\u06c0\u0003\u0002\u0002\u0002",
    "\u06bf\u06b5\u0003\u0002\u0002\u0002\u06bf\u06b9\u0003\u0002\u0002\u0002",
    "\u06c0\u0141\u0003\u0002\u0002\u0002\u06c1\u06c2\u0007+\u0002\u0002",
    "\u06c2\u06c3\u0007;\u0002\u0002\u06c3\u06c4\u0005\u01c8\u00e5\u0002",
    "\u06c4\u06c5\u0007<\u0002\u0002\u06c5\u06c6\u0005\u0144\u00a3\u0002",
    "\u06c6\u0143\u0003\u0002\u0002\u0002\u06c7\u06cb\u0007=\u0002\u0002",
    "\u06c8\u06ca\u0005\u0146\u00a4\u0002\u06c9\u06c8\u0003\u0002\u0002\u0002",
    "\u06ca\u06cd\u0003\u0002\u0002\u0002\u06cb\u06c9\u0003\u0002\u0002\u0002",
    "\u06cb\u06cc\u0003\u0002\u0002\u0002\u06cc\u06d1\u0003\u0002\u0002\u0002",
    "\u06cd\u06cb\u0003\u0002\u0002\u0002\u06ce\u06d0\u0005\u014a\u00a6\u0002",
    "\u06cf\u06ce\u0003\u0002\u0002\u0002\u06d0\u06d3\u0003\u0002\u0002\u0002",
    "\u06d1\u06cf\u0003\u0002\u0002\u0002\u06d1\u06d2\u0003\u0002\u0002\u0002",
    "\u06d2\u06d4\u0003\u0002\u0002\u0002\u06d3\u06d1\u0003\u0002\u0002\u0002",
    "\u06d4\u06d5\u0007>\u0002\u0002\u06d5\u0145\u0003\u0002\u0002\u0002",
    "\u06d6\u06d7\u0005\u0148\u00a5\u0002\u06d7\u06d8\u0005\u0122\u0092\u0002",
    "\u06d8\u0147\u0003\u0002\u0002\u0002\u06d9\u06dd\u0005\u014a\u00a6\u0002",
    "\u06da\u06dc\u0005\u014a\u00a6\u0002\u06db\u06da\u0003\u0002\u0002\u0002",
    "\u06dc\u06df\u0003\u0002\u0002\u0002\u06dd\u06db\u0003\u0002\u0002\u0002",
    "\u06dd\u06de\u0003\u0002\u0002\u0002\u06de\u0149\u0003\u0002\u0002\u0002",
    "\u06df\u06dd\u0003\u0002\u0002\u0002\u06e0\u06e1\u0007\b\u0002\u0002",
    "\u06e1\u06e2\u0005\u01c6\u00e4\u0002\u06e2\u06e3\u0007J\u0002\u0002",
    "\u06e3\u06eb\u0003\u0002\u0002\u0002\u06e4\u06e5\u0007\b\u0002\u0002",
    "\u06e5\u06e6\u0005\u014c\u00a7\u0002\u06e6\u06e7\u0007J\u0002\u0002",
    "\u06e7\u06eb\u0003\u0002\u0002\u0002\u06e8\u06e9\u0007\u000e\u0002\u0002",
    "\u06e9\u06eb\u0007J\u0002\u0002\u06ea\u06e0\u0003\u0002\u0002\u0002",
    "\u06ea\u06e4\u0003\u0002\u0002\u0002\u06ea\u06e8\u0003\u0002\u0002\u0002",
    "\u06eb\u014b\u0003\u0002\u0002\u0002\u06ec\u06ed\u0007h\u0002\u0002",
    "\u06ed\u014d\u0003\u0002\u0002\u0002\u06ee\u06ef\u00074\u0002\u0002",
    "\u06ef\u06f0\u0007;\u0002\u0002\u06f0\u06f1\u0005\u01c8\u00e5\u0002",
    "\u06f1\u06f2\u0007<\u0002\u0002\u06f2\u06f3\u0005\u012a\u0096\u0002",
    "\u06f3\u014f\u0003\u0002\u0002\u0002\u06f4\u06f5\u00074\u0002\u0002",
    "\u06f5\u06f6\u0007;\u0002\u0002\u06f6\u06f7\u0005\u01c8\u00e5\u0002",
    "\u06f7\u06f8\u0007<\u0002\u0002\u06f8\u06f9\u0005\u012c\u0097\u0002",
    "\u06f9\u0151\u0003\u0002\u0002\u0002\u06fa\u06fb\u0007\u000f\u0002\u0002",
    "\u06fb\u06fc\u0005\u012a\u0096\u0002\u06fc\u06fd\u00074\u0002\u0002",
    "\u06fd\u06fe\u0007;\u0002\u0002\u06fe\u06ff\u0005\u01c8\u00e5\u0002",
    "\u06ff\u0700\u0007<\u0002\u0002\u0700\u0701\u0007A\u0002\u0002\u0701",
    "\u0153\u0003\u0002\u0002\u0002\u0702\u0705\u0005\u0158\u00ad\u0002\u0703",
    "\u0705\u0005\u0162\u00b2\u0002\u0704\u0702\u0003\u0002\u0002\u0002\u0704",
    "\u0703\u0003\u0002\u0002\u0002\u0705\u0155\u0003\u0002\u0002\u0002\u0706",
    "\u0709\u0005\u015a\u00ae\u0002\u0707\u0709\u0005\u0164\u00b3\u0002\u0708",
    "\u0706\u0003\u0002\u0002\u0002\u0708\u0707\u0003\u0002\u0002\u0002\u0709",
    "\u0157\u0003\u0002\u0002\u0002\u070a\u070b\u0007\u0017\u0002\u0002\u070b",
    "\u070d\u0007;\u0002\u0002\u070c\u070e\u0005\u015c\u00af\u0002\u070d",
    "\u070c\u0003\u0002\u0002\u0002\u070d\u070e\u0003\u0002\u0002\u0002\u070e",
    "\u070f\u0003\u0002\u0002\u0002\u070f\u0711\u0007A\u0002\u0002\u0710",
    "\u0712\u0005\u01c8\u00e5\u0002\u0711\u0710\u0003\u0002\u0002\u0002\u0711",
    "\u0712\u0003\u0002\u0002\u0002\u0712\u0713\u0003\u0002\u0002\u0002\u0713",
    "\u0715\u0007A\u0002\u0002\u0714\u0716\u0005\u015e\u00b0\u0002\u0715",
    "\u0714\u0003\u0002\u0002\u0002\u0715\u0716\u0003\u0002\u0002\u0002\u0716",
    "\u0717\u0003\u0002\u0002\u0002\u0717\u0718\u0007<\u0002\u0002\u0718",
    "\u0719\u0005\u012a\u0096\u0002\u0719\u0159\u0003\u0002\u0002\u0002\u071a",
    "\u071b\u0007\u0017\u0002\u0002\u071b\u071d\u0007;\u0002\u0002\u071c",
    "\u071e\u0005\u015c\u00af\u0002\u071d\u071c\u0003\u0002\u0002\u0002\u071d",
    "\u071e\u0003\u0002\u0002\u0002\u071e\u071f\u0003\u0002\u0002\u0002\u071f",
    "\u0721\u0007A\u0002\u0002\u0720\u0722\u0005\u01c8\u00e5\u0002\u0721",
    "\u0720\u0003\u0002\u0002\u0002\u0721\u0722\u0003\u0002\u0002\u0002\u0722",
    "\u0723\u0003\u0002\u0002\u0002\u0723\u0725\u0007A\u0002\u0002\u0724",
    "\u0726\u0005\u015e\u00b0\u0002\u0725\u0724\u0003\u0002\u0002\u0002\u0725",
    "\u0726\u0003\u0002\u0002\u0002\u0726\u0727\u0003\u0002\u0002\u0002\u0727",
    "\u0728\u0007<\u0002\u0002\u0728\u0729\u0005\u012c\u0097\u0002\u0729",
    "\u015b\u0003\u0002\u0002\u0002\u072a\u072d\u0005\u0160\u00b1\u0002\u072b",
    "\u072d\u0005\u0128\u0095\u0002\u072c\u072a\u0003\u0002\u0002\u0002\u072c",
    "\u072b\u0003\u0002\u0002\u0002\u072d\u015d\u0003\u0002\u0002\u0002\u072e",
    "\u072f\u0005\u0160\u00b1\u0002\u072f\u015f\u0003\u0002\u0002\u0002\u0730",
    "\u0735\u0005\u0138\u009d\u0002\u0731\u0732\u0007B\u0002\u0002\u0732",
    "\u0734\u0005\u0138\u009d\u0002\u0733\u0731\u0003\u0002\u0002\u0002\u0734",
    "\u0737\u0003\u0002\u0002\u0002\u0735\u0733\u0003\u0002\u0002\u0002\u0735",
    "\u0736\u0003\u0002\u0002\u0002\u0736\u0161\u0003\u0002\u0002\u0002\u0737",
    "\u0735\u0003\u0002\u0002\u0002\u0738\u0739\u0007\u0017\u0002\u0002\u0739",
    "\u073d\u0007;\u0002\u0002\u073a\u073c\u0005\u00b8]\u0002\u073b\u073a",
    "\u0003\u0002\u0002\u0002\u073c\u073f\u0003\u0002\u0002\u0002\u073d\u073b",
    "\u0003\u0002\u0002\u0002\u073d\u073e\u0003\u0002\u0002\u0002\u073e\u0740",
    "\u0003\u0002\u0002\u0002\u073f\u073d\u0003\u0002\u0002\u0002\u0740\u0741",
    "\u0005\u0088E\u0002\u0741\u0742\u0005\u0084C\u0002\u0742\u0743\u0007",
    "J\u0002\u0002\u0743\u0744\u0005\u01c8\u00e5\u0002\u0744\u0745\u0007",
    "<\u0002\u0002\u0745\u0746\u0005\u012a\u0096\u0002\u0746\u0163\u0003",
    "\u0002\u0002\u0002\u0747\u0748\u0007\u0017\u0002\u0002\u0748\u074c\u0007",
    ";\u0002\u0002\u0749\u074b\u0005\u00b8]\u0002\u074a\u0749\u0003\u0002",
    "\u0002\u0002\u074b\u074e\u0003\u0002\u0002\u0002\u074c\u074a\u0003\u0002",
    "\u0002\u0002\u074c\u074d\u0003\u0002\u0002\u0002\u074d\u074f\u0003\u0002",
    "\u0002\u0002\u074e\u074c\u0003\u0002\u0002\u0002\u074f\u0750\u0005\u0088",
    "E\u0002\u0750\u0751\u0005\u0084C\u0002\u0751\u0752\u0007J\u0002\u0002",
    "\u0752\u0753\u0005\u01c8\u00e5\u0002\u0753\u0754\u0007<\u0002\u0002",
    "\u0754\u0755\u0005\u012c\u0097\u0002\u0755\u0165\u0003\u0002\u0002\u0002",
    "\u0756\u0758\u0007\u0006\u0002\u0002\u0757\u0759\u0007h\u0002\u0002",
    "\u0758\u0757\u0003\u0002\u0002\u0002\u0758\u0759\u0003\u0002\u0002\u0002",
    "\u0759\u075a\u0003\u0002\u0002\u0002\u075a\u075b\u0007A\u0002\u0002",
    "\u075b\u0167\u0003\u0002\u0002\u0002\u075c\u075e\u0007\r\u0002\u0002",
    "\u075d\u075f\u0007h\u0002\u0002\u075e\u075d\u0003\u0002\u0002\u0002",
    "\u075e\u075f\u0003\u0002\u0002\u0002\u075f\u0760\u0003\u0002\u0002\u0002",
    "\u0760\u0761\u0007A\u0002\u0002\u0761\u0169\u0003\u0002\u0002\u0002",
    "\u0762\u0764\u0007&\u0002\u0002\u0763\u0765\u0005\u01c8\u00e5\u0002",
    "\u0764\u0763\u0003\u0002\u0002\u0002\u0764\u0765\u0003\u0002\u0002\u0002",
    "\u0765\u0766\u0003\u0002\u0002\u0002\u0766\u0767\u0007A\u0002\u0002",
    "\u0767\u016b\u0003\u0002\u0002\u0002\u0768\u0769\u0007.\u0002\u0002",
    "\u0769\u076a\u0005\u01c8\u00e5\u0002\u076a\u076b\u0007A\u0002\u0002",
    "\u076b\u016d\u0003\u0002\u0002\u0002\u076c\u076d\u0007,\u0002\u0002",
    "\u076d\u076e\u0007;\u0002\u0002\u076e\u076f\u0005\u01c8\u00e5\u0002",
    "\u076f\u0770\u0007<\u0002\u0002\u0770\u0771\u0005\u0120\u0091\u0002",
    "\u0771\u016f\u0003\u0002\u0002\u0002\u0772\u0773\u00071\u0002\u0002",
    "\u0773\u0774\u0005\u0120\u0091\u0002\u0774\u0775\u0005\u0172\u00ba\u0002",
    "\u0775\u077f\u0003\u0002\u0002\u0002\u0776\u0777\u00071\u0002\u0002",
    "\u0777\u0779\u0005\u0120\u0091\u0002\u0778\u077a\u0005\u0172\u00ba\u0002",
    "\u0779\u0778\u0003\u0002\u0002\u0002\u0779\u077a\u0003\u0002\u0002\u0002",
    "\u077a\u077b\u0003\u0002\u0002\u0002\u077b\u077c\u0005\u017a\u00be\u0002",
    "\u077c\u077f\u0003\u0002\u0002\u0002\u077d\u077f\u0005\u017c\u00bf\u0002",
    "\u077e\u0772\u0003\u0002\u0002\u0002\u077e\u0776\u0003\u0002\u0002\u0002",
    "\u077e\u077d\u0003\u0002\u0002\u0002\u077f\u0171\u0003\u0002\u0002\u0002",
    "\u0780\u0784\u0005\u0174\u00bb\u0002\u0781\u0783\u0005\u0174\u00bb\u0002",
    "\u0782\u0781\u0003\u0002\u0002\u0002\u0783\u0786\u0003\u0002\u0002\u0002",
    "\u0784\u0782\u0003\u0002\u0002\u0002\u0784\u0785\u0003\u0002\u0002\u0002",
    "\u0785\u0173\u0003\u0002\u0002\u0002\u0786\u0784\u0003\u0002\u0002\u0002",
    "\u0787\u0788\u0007\t\u0002\u0002\u0788\u0789\u0007;\u0002\u0002\u0789",
    "\u078a\u0005\u0176\u00bc\u0002\u078a\u078b\u0007<\u0002\u0002\u078b",
    "\u078c\u0005\u0120\u0091\u0002\u078c\u0175\u0003\u0002\u0002\u0002\u078d",
    "\u078f\u0005\u00b8]\u0002\u078e\u078d\u0003\u0002\u0002\u0002\u078f",
    "\u0792\u0003\u0002\u0002\u0002\u0790\u078e\u0003\u0002\u0002\u0002\u0790",
    "\u0791\u0003\u0002\u0002\u0002\u0791\u0793\u0003\u0002\u0002\u0002\u0792",
    "\u0790\u0003\u0002\u0002\u0002\u0793\u0794\u0005\u0178\u00bd\u0002\u0794",
    "\u0795\u0005\u0084C\u0002\u0795\u0177\u0003\u0002\u0002\u0002\u0796",
    "\u079b\u0005\u0090I\u0002\u0797\u0798\u0007X\u0002\u0002\u0798\u079a",
    "\u0005 \u0011\u0002\u0799\u0797\u0003\u0002\u0002\u0002\u079a\u079d",
    "\u0003\u0002\u0002\u0002\u079b\u0799\u0003\u0002\u0002\u0002\u079b\u079c",
    "\u0003\u0002\u0002\u0002\u079c\u0179\u0003\u0002\u0002\u0002\u079d\u079b",
    "\u0003\u0002\u0002\u0002\u079e\u079f\u0007\u0015\u0002\u0002\u079f\u07a0",
    "\u0005\u0120\u0091\u0002\u07a0\u017b\u0003\u0002\u0002\u0002\u07a1\u07a2",
    "\u00071\u0002\u0002\u07a2\u07a3\u0005\u017e\u00c0\u0002\u07a3\u07a5",
    "\u0005\u0120\u0091\u0002\u07a4\u07a6\u0005\u0172\u00ba\u0002\u07a5\u07a4",
    "\u0003\u0002\u0002\u0002\u07a5\u07a6\u0003\u0002\u0002\u0002\u07a6\u07a8",
    "\u0003\u0002\u0002\u0002\u07a7\u07a9\u0005\u017a\u00be\u0002\u07a8\u07a7",
    "\u0003\u0002\u0002\u0002\u07a8\u07a9\u0003\u0002\u0002\u0002\u07a9\u017d",
    "\u0003\u0002\u0002\u0002\u07aa\u07ab\u0007;\u0002\u0002\u07ab\u07ad",
    "\u0005\u0180\u00c1\u0002\u07ac\u07ae\u0007A\u0002\u0002\u07ad\u07ac",
    "\u0003\u0002\u0002\u0002\u07ad\u07ae\u0003\u0002\u0002\u0002\u07ae\u07af",
    "\u0003\u0002\u0002\u0002\u07af\u07b0\u0007<\u0002\u0002\u07b0\u017f",
    "\u0003\u0002\u0002\u0002\u07b1\u07b6\u0005\u0182\u00c2\u0002\u07b2\u07b3",
    "\u0007A\u0002\u0002\u07b3\u07b5\u0005\u0182\u00c2\u0002\u07b4\u07b2",
    "\u0003\u0002\u0002\u0002\u07b5\u07b8\u0003\u0002\u0002\u0002\u07b6\u07b4",
    "\u0003\u0002\u0002\u0002\u07b6\u07b7\u0003\u0002\u0002\u0002\u07b7\u0181",
    "\u0003\u0002\u0002\u0002\u07b8\u07b6\u0003\u0002\u0002\u0002\u07b9\u07bb",
    "\u0005\u00b8]\u0002\u07ba\u07b9\u0003\u0002\u0002\u0002\u07bb\u07be",
    "\u0003\u0002\u0002\u0002\u07bc\u07ba\u0003\u0002\u0002\u0002\u07bc\u07bd",
    "\u0003\u0002\u0002\u0002\u07bd\u07bf\u0003\u0002\u0002\u0002\u07be\u07bc",
    "\u0003\u0002\u0002\u0002\u07bf\u07c0\u0005\u0088E\u0002\u07c0\u07c1",
    "\u0005\u0084C\u0002\u07c1\u07c2\u0007D\u0002\u0002\u07c2\u07c3\u0005",
    "\u01c8\u00e5\u0002\u07c3\u0183\u0003\u0002\u0002\u0002\u07c4\u07c7\u0005",
    "\u0192\u00ca\u0002\u07c5\u07c7\u0005\u01c0\u00e1\u0002\u07c6\u07c4\u0003",
    "\u0002\u0002\u0002\u07c6\u07c5\u0003\u0002\u0002\u0002\u07c7\u07cb\u0003",
    "\u0002\u0002\u0002\u07c8\u07ca\u0005\u018c\u00c7\u0002\u07c9\u07c8\u0003",
    "\u0002\u0002\u0002\u07ca\u07cd\u0003\u0002\u0002\u0002\u07cb\u07c9\u0003",
    "\u0002\u0002\u0002\u07cb\u07cc\u0003\u0002\u0002\u0002\u07cc\u0185\u0003",
    "\u0002\u0002\u0002\u07cd\u07cb\u0003\u0002\u0002\u0002\u07ce\u07ec\u0005",
    "\u0004\u0003\u0002\u07cf\u07d4\u0005F$\u0002\u07d0\u07d1\u0007?\u0002",
    "\u0002\u07d1\u07d3\u0007@\u0002\u0002\u07d2\u07d0\u0003\u0002\u0002",
    "\u0002\u07d3\u07d6\u0003\u0002\u0002\u0002\u07d4\u07d2\u0003\u0002\u0002",
    "\u0002\u07d4\u07d5\u0003\u0002\u0002\u0002\u07d5\u07d7\u0003\u0002\u0002",
    "\u0002\u07d6\u07d4\u0003\u0002\u0002\u0002\u07d7\u07d8\u0007C\u0002",
    "\u0002\u07d8\u07d9\u0007\u000b\u0002\u0002\u07d9\u07ec\u0003\u0002\u0002",
    "\u0002\u07da\u07db\u00072\u0002\u0002\u07db\u07dc\u0007C\u0002\u0002",
    "\u07dc\u07ec\u0007\u000b\u0002\u0002\u07dd\u07ec\u0007-\u0002\u0002",
    "\u07de\u07df\u0005F$\u0002\u07df\u07e0\u0007C\u0002\u0002\u07e0\u07e1",
    "\u0007-\u0002\u0002\u07e1\u07ec\u0003\u0002\u0002\u0002\u07e2\u07e3",
    "\u0007;\u0002\u0002\u07e3\u07e4\u0005\u01c8\u00e5\u0002\u07e4\u07e5",
    "\u0007<\u0002\u0002\u07e5\u07ec\u0003\u0002\u0002\u0002\u07e6\u07ec",
    "\u0005\u0198\u00cd\u0002\u07e7\u07ec\u0005\u01a0\u00d1\u0002\u07e8\u07ec",
    "\u0005\u01a6\u00d4\u0002\u07e9\u07ec\u0005\u01ac\u00d7\u0002\u07ea\u07ec",
    "\u0005\u01ba\u00de\u0002\u07eb\u07ce\u0003\u0002\u0002\u0002\u07eb\u07cf",
    "\u0003\u0002\u0002\u0002\u07eb\u07da\u0003\u0002\u0002\u0002\u07eb\u07dd",
    "\u0003\u0002\u0002\u0002\u07eb\u07de\u0003\u0002\u0002\u0002\u07eb\u07e2",
    "\u0003\u0002\u0002\u0002\u07eb\u07e6\u0003\u0002\u0002\u0002\u07eb\u07e7",
    "\u0003\u0002\u0002\u0002\u07eb\u07e8\u0003\u0002\u0002\u0002\u07eb\u07e9",
    "\u0003\u0002\u0002\u0002\u07eb\u07ea\u0003\u0002\u0002\u0002\u07ec\u0187",
    "\u0003\u0002\u0002\u0002\u07ed\u07ee\u0003\u0002\u0002\u0002\u07ee\u0189",
    "\u0003\u0002\u0002\u0002\u07ef\u080c\u0005\u0004\u0003\u0002\u07f0\u07f5",
    "\u0005F$\u0002\u07f1\u07f2\u0007?\u0002\u0002\u07f2\u07f4\u0007@\u0002",
    "\u0002\u07f3\u07f1\u0003\u0002\u0002\u0002\u07f4\u07f7\u0003\u0002\u0002",
    "\u0002\u07f5\u07f3\u0003\u0002\u0002\u0002\u07f5\u07f6\u0003\u0002\u0002",
    "\u0002\u07f6\u07f8\u0003\u0002\u0002\u0002\u07f7\u07f5\u0003\u0002\u0002",
    "\u0002\u07f8\u07f9\u0007C\u0002\u0002\u07f9\u07fa\u0007\u000b\u0002",
    "\u0002\u07fa\u080c\u0003\u0002\u0002\u0002\u07fb\u07fc\u00072\u0002",
    "\u0002\u07fc\u07fd\u0007C\u0002\u0002\u07fd\u080c\u0007\u000b\u0002",
    "\u0002\u07fe\u080c\u0007-\u0002\u0002\u07ff\u0800\u0005F$\u0002\u0800",
    "\u0801\u0007C\u0002\u0002\u0801\u0802\u0007-\u0002\u0002\u0802\u080c",
    "\u0003\u0002\u0002\u0002\u0803\u0804\u0007;\u0002\u0002\u0804\u0805",
    "\u0005\u01c8\u00e5\u0002\u0805\u0806\u0007<\u0002\u0002\u0806\u080c",
    "\u0003\u0002\u0002\u0002\u0807\u080c\u0005\u0198\u00cd\u0002\u0808\u080c",
    "\u0005\u01a0\u00d1\u0002\u0809\u080c\u0005\u01ac\u00d7\u0002\u080a\u080c",
    "\u0005\u01ba\u00de\u0002\u080b\u07ef\u0003\u0002\u0002\u0002\u080b\u07f0",
    "\u0003\u0002\u0002\u0002\u080b\u07fb\u0003\u0002\u0002\u0002\u080b\u07fe",
    "\u0003\u0002\u0002\u0002\u080b\u07ff\u0003\u0002\u0002\u0002\u080b\u0803",
    "\u0003\u0002\u0002\u0002\u080b\u0807\u0003\u0002\u0002\u0002\u080b\u0808",
    "\u0003\u0002\u0002\u0002\u080b\u0809\u0003\u0002\u0002\u0002\u080b\u080a",
    "\u0003\u0002\u0002\u0002\u080c\u018b\u0003\u0002\u0002\u0002\u080d\u0813",
    "\u0005\u019a\u00ce\u0002\u080e\u0813\u0005\u01a2\u00d2\u0002\u080f\u0813",
    "\u0005\u01a8\u00d5\u0002\u0810\u0813\u0005\u01b4\u00db\u0002\u0811\u0813",
    "\u0005\u01bc\u00df\u0002\u0812\u080d\u0003\u0002\u0002\u0002\u0812\u080e",
    "\u0003\u0002\u0002\u0002\u0812\u080f\u0003\u0002\u0002\u0002\u0812\u0810",
    "\u0003\u0002\u0002\u0002\u0812\u0811\u0003\u0002\u0002\u0002\u0813\u018d",
    "\u0003\u0002\u0002\u0002\u0814\u0815\u0003\u0002\u0002\u0002\u0815\u018f",
    "\u0003\u0002\u0002\u0002\u0816\u081b\u0005\u019a\u00ce\u0002\u0817\u081b",
    "\u0005\u01a2\u00d2\u0002\u0818\u081b\u0005\u01b4\u00db\u0002\u0819\u081b",
    "\u0005\u01bc\u00df\u0002\u081a\u0816\u0003\u0002\u0002\u0002\u081a\u0817",
    "\u0003\u0002\u0002\u0002\u081a\u0818\u0003\u0002\u0002\u0002\u081a\u0819",
    "\u0003\u0002\u0002\u0002\u081b\u0191\u0003\u0002\u0002\u0002\u081c\u0845",
    "\u0005\u0004\u0003\u0002\u081d\u0822\u0005F$\u0002\u081e\u081f\u0007",
    "?\u0002\u0002\u081f\u0821\u0007@\u0002\u0002\u0820\u081e\u0003\u0002",
    "\u0002\u0002\u0821\u0824\u0003\u0002\u0002\u0002\u0822\u0820\u0003\u0002",
    "\u0002\u0002\u0822\u0823\u0003\u0002\u0002\u0002\u0823\u0825\u0003\u0002",
    "\u0002\u0002\u0824\u0822\u0003\u0002\u0002\u0002\u0825\u0826\u0007C",
    "\u0002\u0002\u0826\u0827\u0007\u000b\u0002\u0002\u0827\u0845\u0003\u0002",
    "\u0002\u0002\u0828\u082d\u0005\u008aF\u0002\u0829\u082a\u0007?\u0002",
    "\u0002\u082a\u082c\u0007@\u0002\u0002\u082b\u0829\u0003\u0002\u0002",
    "\u0002\u082c\u082f\u0003\u0002\u0002\u0002\u082d\u082b\u0003\u0002\u0002",
    "\u0002\u082d\u082e\u0003\u0002\u0002\u0002\u082e\u0830\u0003\u0002\u0002",
    "\u0002\u082f\u082d\u0003\u0002\u0002\u0002\u0830\u0831\u0007C\u0002",
    "\u0002\u0831\u0832\u0007\u000b\u0002\u0002\u0832\u0845\u0003\u0002\u0002",
    "\u0002\u0833\u0834\u00072\u0002\u0002\u0834\u0835\u0007C\u0002\u0002",
    "\u0835\u0845\u0007\u000b\u0002\u0002\u0836\u0845\u0007-\u0002\u0002",
    "\u0837\u0838\u0005F$\u0002\u0838\u0839\u0007C\u0002\u0002\u0839\u083a",
    "\u0007-\u0002\u0002\u083a\u0845\u0003\u0002\u0002\u0002\u083b\u083c",
    "\u0007;\u0002\u0002\u083c\u083d\u0005\u01c8\u00e5\u0002\u083d\u083e",
    "\u0007<\u0002\u0002\u083e\u0845\u0003\u0002\u0002\u0002\u083f\u0845",
    "\u0005\u019c\u00cf\u0002\u0840\u0845\u0005\u01a4\u00d3\u0002\u0841\u0845",
    "\u0005\u01aa\u00d6\u0002\u0842\u0845\u0005\u01b6\u00dc\u0002\u0843\u0845",
    "\u0005\u01be\u00e0\u0002\u0844\u081c\u0003\u0002\u0002\u0002\u0844\u081d",
    "\u0003\u0002\u0002\u0002\u0844\u0828\u0003\u0002\u0002\u0002\u0844\u0833",
    "\u0003\u0002\u0002\u0002\u0844\u0836\u0003\u0002\u0002\u0002\u0844\u0837",
    "\u0003\u0002\u0002\u0002\u0844\u083b\u0003\u0002\u0002\u0002\u0844\u083f",
    "\u0003\u0002\u0002\u0002\u0844\u0840\u0003\u0002\u0002\u0002\u0844\u0841",
    "\u0003\u0002\u0002\u0002\u0844\u0842\u0003\u0002\u0002\u0002\u0844\u0843",
    "\u0003\u0002\u0002\u0002\u0845\u0193\u0003\u0002\u0002\u0002\u0846\u0847",
    "\u0003\u0002\u0002\u0002\u0847\u0195\u0003\u0002\u0002\u0002\u0848\u0870",
    "\u0005\u0004\u0003\u0002\u0849\u084e\u0005F$\u0002\u084a\u084b\u0007",
    "?\u0002\u0002\u084b\u084d\u0007@\u0002\u0002\u084c\u084a\u0003\u0002",
    "\u0002\u0002\u084d\u0850\u0003\u0002\u0002\u0002\u084e\u084c\u0003\u0002",
    "\u0002\u0002\u084e\u084f\u0003\u0002\u0002\u0002\u084f\u0851\u0003\u0002",
    "\u0002\u0002\u0850\u084e\u0003\u0002\u0002\u0002\u0851\u0852\u0007C",
    "\u0002\u0002\u0852\u0853\u0007\u000b\u0002\u0002\u0853\u0870\u0003\u0002",
    "\u0002\u0002\u0854\u0859\u0005\u008aF\u0002\u0855\u0856\u0007?\u0002",
    "\u0002\u0856\u0858\u0007@\u0002\u0002\u0857\u0855\u0003\u0002\u0002",
    "\u0002\u0858\u085b\u0003\u0002\u0002\u0002\u0859\u0857\u0003\u0002\u0002",
    "\u0002\u0859\u085a\u0003\u0002\u0002\u0002\u085a\u085c\u0003\u0002\u0002",
    "\u0002\u085b\u0859\u0003\u0002\u0002\u0002\u085c\u085d\u0007C\u0002",
    "\u0002\u085d\u085e\u0007\u000b\u0002\u0002\u085e\u0870\u0003\u0002\u0002",
    "\u0002\u085f\u0860\u00072\u0002\u0002\u0860\u0861\u0007C\u0002\u0002",
    "\u0861\u0870\u0007\u000b\u0002\u0002\u0862\u0870\u0007-\u0002\u0002",
    "\u0863\u0864\u0005F$\u0002\u0864\u0865\u0007C\u0002\u0002\u0865\u0866",
    "\u0007-\u0002\u0002\u0866\u0870\u0003\u0002\u0002\u0002\u0867\u0868",
    "\u0007;\u0002\u0002\u0868\u0869\u0005\u01c8\u00e5\u0002\u0869\u086a",
    "\u0007<\u0002\u0002\u086a\u0870\u0003\u0002\u0002\u0002\u086b\u0870",
    "\u0005\u019c\u00cf\u0002\u086c\u0870\u0005\u01a4\u00d3\u0002\u086d\u0870",
    "\u0005\u01b6\u00dc\u0002\u086e\u0870\u0005\u01be\u00e0\u0002\u086f\u0848",
    "\u0003\u0002\u0002\u0002\u086f\u0849\u0003\u0002\u0002\u0002\u086f\u0854",
    "\u0003\u0002\u0002\u0002\u086f\u085f\u0003\u0002\u0002\u0002\u086f\u0862",
    "\u0003\u0002\u0002\u0002\u086f\u0863\u0003\u0002\u0002\u0002\u086f\u0867",
    "\u0003\u0002\u0002\u0002\u086f\u086b\u0003\u0002\u0002\u0002\u086f\u086c",
    "\u0003\u0002\u0002\u0002\u086f\u086d\u0003\u0002\u0002\u0002\u086f\u086e",
    "\u0003\u0002\u0002\u0002\u0870\u0197\u0003\u0002\u0002\u0002\u0871\u0873",
    "\u0007!\u0002\u0002\u0872\u0874\u0005:\u001e\u0002\u0873\u0872\u0003",
    "\u0002\u0002\u0002\u0873\u0874\u0003\u0002\u0002\u0002\u0874\u0878\u0003",
    "\u0002\u0002\u0002\u0875\u0877\u0005\u010a\u0086\u0002\u0876\u0875\u0003",
    "\u0002\u0002\u0002\u0877\u087a\u0003\u0002\u0002\u0002\u0878\u0876\u0003",
    "\u0002\u0002\u0002\u0878\u0879\u0003\u0002\u0002\u0002\u0879\u087b\u0003",
    "\u0002\u0002\u0002\u087a\u0878\u0003\u0002\u0002\u0002\u087b\u0886\u0007",
    "h\u0002\u0002\u087c\u0880\u0007C\u0002\u0002\u087d\u087f\u0005\u010a",
    "\u0086\u0002\u087e\u087d\u0003\u0002\u0002\u0002\u087f\u0882\u0003\u0002",
    "\u0002\u0002\u0880\u087e\u0003\u0002\u0002\u0002\u0880\u0881\u0003\u0002",
    "\u0002\u0002\u0881\u0883\u0003\u0002\u0002\u0002\u0882\u0880\u0003\u0002",
    "\u0002\u0002\u0883\u0885\u0007h\u0002\u0002\u0884\u087c\u0003\u0002",
    "\u0002\u0002\u0885\u0888\u0003\u0002\u0002\u0002\u0886\u0884\u0003\u0002",
    "\u0002\u0002\u0886\u0887\u0003\u0002\u0002\u0002\u0887\u088a\u0003\u0002",
    "\u0002\u0002\u0888\u0886\u0003\u0002\u0002\u0002\u0889\u088b\u0005\u019e",
    "\u00d0\u0002\u088a\u0889\u0003\u0002\u0002\u0002\u088a\u088b\u0003\u0002",
    "\u0002\u0002\u088b\u088c\u0003\u0002\u0002\u0002\u088c\u088e\u0007;",
    "\u0002\u0002\u088d\u088f\u0005\u01b8\u00dd\u0002\u088e\u088d\u0003\u0002",
    "\u0002\u0002\u088e\u088f\u0003\u0002\u0002\u0002\u088f\u0890\u0003\u0002",
    "\u0002\u0002\u0890\u0892\u0007<\u0002\u0002\u0891\u0893\u0005t;\u0002",
    "\u0892\u0891\u0003\u0002\u0002\u0002\u0892\u0893\u0003\u0002\u0002\u0002",
    "\u0893\u08c5\u0003\u0002\u0002\u0002\u0894\u0895\u0005J&\u0002\u0895",
    "\u0896\u0007C\u0002\u0002\u0896\u0898\u0007!\u0002\u0002\u0897\u0899",
    "\u0005:\u001e\u0002\u0898\u0897\u0003\u0002\u0002\u0002\u0898\u0899",
    "\u0003\u0002\u0002\u0002\u0899\u089d\u0003\u0002\u0002\u0002\u089a\u089c",
    "\u0005\u010a\u0086\u0002\u089b\u089a\u0003\u0002\u0002\u0002\u089c\u089f",
    "\u0003\u0002\u0002\u0002\u089d\u089b\u0003\u0002\u0002\u0002\u089d\u089e",
    "\u0003\u0002\u0002\u0002\u089e\u08a0\u0003\u0002\u0002\u0002\u089f\u089d",
    "\u0003\u0002\u0002\u0002\u08a0\u08a2\u0007h\u0002\u0002\u08a1\u08a3",
    "\u0005\u019e\u00d0\u0002\u08a2\u08a1\u0003\u0002\u0002\u0002\u08a2\u08a3",
    "\u0003\u0002\u0002\u0002\u08a3\u08a4\u0003\u0002\u0002\u0002\u08a4\u08a6",
    "\u0007;\u0002\u0002\u08a5\u08a7\u0005\u01b8\u00dd\u0002\u08a6\u08a5",
    "\u0003\u0002\u0002\u0002\u08a6\u08a7\u0003\u0002\u0002\u0002\u08a7\u08a8",
    "\u0003\u0002\u0002\u0002\u08a8\u08aa\u0007<\u0002\u0002\u08a9\u08ab",
    "\u0005t;\u0002\u08aa\u08a9\u0003\u0002\u0002\u0002\u08aa\u08ab\u0003",
    "\u0002\u0002\u0002\u08ab\u08c5\u0003\u0002\u0002\u0002\u08ac\u08ad\u0005",
    "\u0184\u00c3\u0002\u08ad\u08ae\u0007C\u0002\u0002\u08ae\u08b0\u0007",
    "!\u0002\u0002\u08af\u08b1\u0005:\u001e\u0002\u08b0\u08af\u0003\u0002",
    "\u0002\u0002\u08b0\u08b1\u0003\u0002\u0002\u0002\u08b1\u08b5\u0003\u0002",
    "\u0002\u0002\u08b2\u08b4\u0005\u010a\u0086\u0002\u08b3\u08b2\u0003\u0002",
    "\u0002\u0002\u08b4\u08b7\u0003\u0002\u0002\u0002\u08b5\u08b3\u0003\u0002",
    "\u0002\u0002\u08b5\u08b6\u0003\u0002\u0002\u0002\u08b6\u08b8\u0003\u0002",
    "\u0002\u0002\u08b7\u08b5\u0003\u0002\u0002\u0002\u08b8\u08ba\u0007h",
    "\u0002\u0002\u08b9\u08bb\u0005\u019e\u00d0\u0002\u08ba\u08b9\u0003\u0002",
    "\u0002\u0002\u08ba\u08bb\u0003\u0002\u0002\u0002\u08bb\u08bc\u0003\u0002",
    "\u0002\u0002\u08bc\u08be\u0007;\u0002\u0002\u08bd\u08bf\u0005\u01b8",
    "\u00dd\u0002\u08be\u08bd\u0003\u0002\u0002\u0002\u08be\u08bf\u0003\u0002",
    "\u0002\u0002\u08bf\u08c0\u0003\u0002\u0002\u0002\u08c0\u08c2\u0007<",
    "\u0002\u0002\u08c1\u08c3\u0005t;\u0002\u08c2\u08c1\u0003\u0002\u0002",
    "\u0002\u08c2\u08c3\u0003\u0002\u0002\u0002\u08c3\u08c5\u0003\u0002\u0002",
    "\u0002\u08c4\u0871\u0003\u0002\u0002\u0002\u08c4\u0894\u0003\u0002\u0002",
    "\u0002\u08c4\u08ac\u0003\u0002\u0002\u0002\u08c5\u0199\u0003\u0002\u0002",
    "\u0002\u08c6\u08c7\u0007C\u0002\u0002\u08c7\u08c9\u0007!\u0002\u0002",
    "\u08c8\u08ca\u0005:\u001e\u0002\u08c9\u08c8\u0003\u0002\u0002\u0002",
    "\u08c9\u08ca\u0003\u0002\u0002\u0002\u08ca\u08ce\u0003\u0002\u0002\u0002",
    "\u08cb\u08cd\u0005\u010a\u0086\u0002\u08cc\u08cb\u0003\u0002\u0002\u0002",
    "\u08cd\u08d0\u0003\u0002\u0002\u0002\u08ce\u08cc\u0003\u0002\u0002\u0002",
    "\u08ce\u08cf\u0003\u0002\u0002\u0002\u08cf\u08d1\u0003\u0002\u0002\u0002",
    "\u08d0\u08ce\u0003\u0002\u0002\u0002\u08d1\u08d3\u0007h\u0002\u0002",
    "\u08d2\u08d4\u0005\u019e\u00d0\u0002\u08d3\u08d2\u0003\u0002\u0002\u0002",
    "\u08d3\u08d4\u0003\u0002\u0002\u0002\u08d4\u08d5\u0003\u0002\u0002\u0002",
    "\u08d5\u08d7\u0007;\u0002\u0002\u08d6\u08d8\u0005\u01b8\u00dd\u0002",
    "\u08d7\u08d6\u0003\u0002\u0002\u0002\u08d7\u08d8\u0003\u0002\u0002\u0002",
    "\u08d8\u08d9\u0003\u0002\u0002\u0002\u08d9\u08db\u0007<\u0002\u0002",
    "\u08da\u08dc\u0005t;\u0002\u08db\u08da\u0003\u0002\u0002\u0002\u08db",
    "\u08dc\u0003\u0002\u0002\u0002\u08dc\u019b\u0003\u0002\u0002\u0002\u08dd",
    "\u08df\u0007!\u0002\u0002\u08de\u08e0\u0005:\u001e\u0002\u08df\u08de",
    "\u0003\u0002\u0002\u0002\u08df\u08e0\u0003\u0002\u0002\u0002\u08e0\u08e4",
    "\u0003\u0002\u0002\u0002\u08e1\u08e3\u0005\u010a\u0086\u0002\u08e2\u08e1",
    "\u0003\u0002\u0002\u0002\u08e3\u08e6\u0003\u0002\u0002\u0002\u08e4\u08e2",
    "\u0003\u0002\u0002\u0002\u08e4\u08e5\u0003\u0002\u0002\u0002\u08e5\u08e7",
    "\u0003\u0002\u0002\u0002\u08e6\u08e4\u0003\u0002\u0002\u0002\u08e7\u08f2",
    "\u0007h\u0002\u0002\u08e8\u08ec\u0007C\u0002\u0002\u08e9\u08eb\u0005",
    "\u010a\u0086\u0002\u08ea\u08e9\u0003\u0002\u0002\u0002\u08eb\u08ee\u0003",
    "\u0002\u0002\u0002\u08ec\u08ea\u0003\u0002\u0002\u0002\u08ec\u08ed\u0003",
    "\u0002\u0002\u0002\u08ed\u08ef\u0003\u0002\u0002\u0002\u08ee\u08ec\u0003",
    "\u0002\u0002\u0002\u08ef\u08f1\u0007h\u0002\u0002\u08f0\u08e8\u0003",
    "\u0002\u0002\u0002\u08f1\u08f4\u0003\u0002\u0002\u0002\u08f2\u08f0\u0003",
    "\u0002\u0002\u0002\u08f2\u08f3\u0003\u0002\u0002\u0002\u08f3\u08f6\u0003",
    "\u0002\u0002\u0002\u08f4\u08f2\u0003\u0002\u0002\u0002\u08f5\u08f7\u0005",
    "\u019e\u00d0\u0002\u08f6\u08f5\u0003\u0002\u0002\u0002\u08f6\u08f7\u0003",
    "\u0002\u0002\u0002\u08f7\u08f8\u0003\u0002\u0002\u0002\u08f8\u08fa\u0007",
    ";\u0002\u0002\u08f9\u08fb\u0005\u01b8\u00dd\u0002\u08fa\u08f9\u0003",
    "\u0002\u0002\u0002\u08fa\u08fb\u0003\u0002\u0002\u0002\u08fb\u08fc\u0003",
    "\u0002\u0002\u0002\u08fc\u08fe\u0007<\u0002\u0002\u08fd\u08ff\u0005",
    "t;\u0002\u08fe\u08fd\u0003\u0002\u0002\u0002\u08fe\u08ff\u0003\u0002",
    "\u0002\u0002\u08ff\u0919\u0003\u0002\u0002\u0002\u0900\u0901\u0005J",
    "&\u0002\u0901\u0902\u0007C\u0002\u0002\u0902\u0904\u0007!\u0002\u0002",
    "\u0903\u0905\u0005:\u001e\u0002\u0904\u0903\u0003\u0002\u0002\u0002",
    "\u0904\u0905\u0003\u0002\u0002\u0002\u0905\u0909\u0003\u0002\u0002\u0002",
    "\u0906\u0908\u0005\u010a\u0086\u0002\u0907\u0906\u0003\u0002\u0002\u0002",
    "\u0908\u090b\u0003\u0002\u0002\u0002\u0909\u0907\u0003\u0002\u0002\u0002",
    "\u0909\u090a\u0003\u0002\u0002\u0002\u090a\u090c\u0003\u0002\u0002\u0002",
    "\u090b\u0909\u0003\u0002\u0002\u0002\u090c\u090e\u0007h\u0002\u0002",
    "\u090d\u090f\u0005\u019e\u00d0\u0002\u090e\u090d\u0003\u0002\u0002\u0002",
    "\u090e\u090f\u0003\u0002\u0002\u0002\u090f\u0910\u0003\u0002\u0002\u0002",
    "\u0910\u0912\u0007;\u0002\u0002\u0911\u0913\u0005\u01b8\u00dd\u0002",
    "\u0912\u0911\u0003\u0002\u0002\u0002\u0912\u0913\u0003\u0002\u0002\u0002",
    "\u0913\u0914\u0003\u0002\u0002\u0002\u0914\u0916\u0007<\u0002\u0002",
    "\u0915\u0917\u0005t;\u0002\u0916\u0915\u0003\u0002\u0002\u0002\u0916",
    "\u0917\u0003\u0002\u0002\u0002\u0917\u0919\u0003\u0002\u0002\u0002\u0918",
    "\u08dd\u0003\u0002\u0002\u0002\u0918\u0900\u0003\u0002\u0002\u0002\u0919",
    "\u019d\u0003\u0002\u0002\u0002\u091a\u091e\u0005:\u001e\u0002\u091b",
    "\u091c\u0007F\u0002\u0002\u091c\u091e\u0007E\u0002\u0002\u091d\u091a",
    "\u0003\u0002\u0002\u0002\u091d\u091b\u0003\u0002\u0002\u0002\u091e\u019f",
    "\u0003\u0002\u0002\u0002\u091f\u0920\u0005\u0184\u00c3\u0002\u0920\u0921",
    "\u0007C\u0002\u0002\u0921\u0922\u0007h\u0002\u0002\u0922\u092d\u0003",
    "\u0002\u0002\u0002\u0923\u0924\u0007*\u0002\u0002\u0924\u0925\u0007",
    "C\u0002\u0002\u0925\u092d\u0007h\u0002\u0002\u0926\u0927\u0005F$\u0002",
    "\u0927\u0928\u0007C\u0002\u0002\u0928\u0929\u0007*\u0002\u0002\u0929",
    "\u092a\u0007C\u0002\u0002\u092a\u092b\u0007h\u0002\u0002\u092b\u092d",
    "\u0003\u0002\u0002\u0002\u092c\u091f\u0003\u0002\u0002\u0002\u092c\u0923",
    "\u0003\u0002\u0002\u0002\u092c\u0926\u0003\u0002\u0002\u0002\u092d\u01a1",
    "\u0003\u0002\u0002\u0002\u092e\u092f\u0007C\u0002\u0002\u092f\u0930",
    "\u0007h\u0002\u0002\u0930\u01a3\u0003\u0002\u0002\u0002\u0931\u0932",
    "\u0007*\u0002\u0002\u0932\u0933\u0007C\u0002\u0002\u0933\u093b\u0007",
    "h\u0002\u0002\u0934\u0935\u0005F$\u0002\u0935\u0936\u0007C\u0002\u0002",
    "\u0936\u0937\u0007*\u0002\u0002\u0937\u0938\u0007C\u0002\u0002\u0938",
    "\u0939\u0007h\u0002\u0002\u0939\u093b\u0003\u0002\u0002\u0002\u093a",
    "\u0931\u0003\u0002\u0002\u0002\u093a\u0934\u0003\u0002\u0002\u0002\u093b",
    "\u01a5\u0003\u0002\u0002\u0002\u093c\u093d\u0005J&\u0002\u093d\u093e",
    "\u0007?\u0002\u0002\u093e\u093f\u0005\u01c8\u00e5\u0002\u093f\u0940",
    "\u0007@\u0002\u0002\u0940\u0947\u0003\u0002\u0002\u0002\u0941\u0942",
    "\u0005\u018a\u00c6\u0002\u0942\u0943\u0007?\u0002\u0002\u0943\u0944",
    "\u0005\u01c8\u00e5\u0002\u0944\u0945\u0007@\u0002\u0002\u0945\u0947",
    "\u0003\u0002\u0002\u0002\u0946\u093c\u0003\u0002\u0002\u0002\u0946\u0941",
    "\u0003\u0002\u0002\u0002\u0947\u094f\u0003\u0002\u0002\u0002\u0948\u0949",
    "\u0005\u0188\u00c5\u0002\u0949\u094a\u0007?\u0002\u0002\u094a\u094b",
    "\u0005\u01c8\u00e5\u0002\u094b\u094c\u0007@\u0002\u0002\u094c\u094e",
    "\u0003\u0002\u0002\u0002\u094d\u0948\u0003\u0002\u0002\u0002\u094e\u0951",
    "\u0003\u0002\u0002\u0002\u094f\u094d\u0003\u0002\u0002\u0002\u094f\u0950",
    "\u0003\u0002\u0002\u0002\u0950\u01a7\u0003\u0002\u0002\u0002\u0951\u094f",
    "\u0003\u0002\u0002\u0002\u0952\u0953\u0005\u0190\u00c9\u0002\u0953\u0954",
    "\u0007?\u0002\u0002\u0954\u0955\u0005\u01c8\u00e5\u0002\u0955\u0956",
    "\u0007@\u0002\u0002\u0956\u095e\u0003\u0002\u0002\u0002\u0957\u0958",
    "\u0005\u018e\u00c8\u0002\u0958\u0959\u0007?\u0002\u0002\u0959\u095a",
    "\u0005\u01c8\u00e5\u0002\u095a\u095b\u0007@\u0002\u0002\u095b\u095d",
    "\u0003\u0002\u0002\u0002\u095c\u0957\u0003\u0002\u0002\u0002\u095d\u0960",
    "\u0003\u0002\u0002\u0002\u095e\u095c\u0003\u0002\u0002\u0002\u095e\u095f",
    "\u0003\u0002\u0002\u0002\u095f\u01a9\u0003\u0002\u0002\u0002\u0960\u095e",
    "\u0003\u0002\u0002\u0002\u0961\u0962\u0005J&\u0002\u0962\u0963\u0007",
    "?\u0002\u0002\u0963\u0964\u0005\u01c8\u00e5\u0002\u0964\u0965\u0007",
    "@\u0002\u0002\u0965\u096c\u0003\u0002\u0002\u0002\u0966\u0967\u0005",
    "\u0196\u00cc\u0002\u0967\u0968\u0007?\u0002\u0002\u0968\u0969\u0005",
    "\u01c8\u00e5\u0002\u0969\u096a\u0007@\u0002\u0002\u096a\u096c\u0003",
    "\u0002\u0002\u0002\u096b\u0961\u0003\u0002\u0002\u0002\u096b\u0966\u0003",
    "\u0002\u0002\u0002\u096c\u0974\u0003\u0002\u0002\u0002\u096d\u096e\u0005",
    "\u0194\u00cb\u0002\u096e\u096f\u0007?\u0002\u0002\u096f\u0970\u0005",
    "\u01c8\u00e5\u0002\u0970\u0971\u0007@\u0002\u0002\u0971\u0973\u0003",
    "\u0002\u0002\u0002\u0972\u096d\u0003\u0002\u0002\u0002\u0973\u0976\u0003",
    "\u0002\u0002\u0002\u0974\u0972\u0003\u0002\u0002\u0002\u0974\u0975\u0003",
    "\u0002\u0002\u0002\u0975\u01ab\u0003\u0002\u0002\u0002\u0976\u0974\u0003",
    "\u0002\u0002\u0002\u0977\u0978\u0005\u01b2\u00da\u0002\u0978\u097a\u0007",
    ";\u0002\u0002\u0979\u097b\u0005\u01b8\u00dd\u0002\u097a\u0979\u0003",
    "\u0002\u0002\u0002\u097a\u097b\u0003\u0002\u0002\u0002\u097b\u097c\u0003",
    "\u0002\u0002\u0002\u097c\u097d\u0007<\u0002\u0002\u097d\u09bc\u0003",
    "\u0002\u0002\u0002\u097e\u097f\u0005\u01ae\u00d8\u0002\u097f\u0981\u0007",
    "C\u0002\u0002\u0980\u0982\u0005:\u001e\u0002\u0981\u0980\u0003\u0002",
    "\u0002\u0002\u0981\u0982\u0003\u0002\u0002\u0002\u0982\u0983\u0003\u0002",
    "\u0002\u0002\u0983\u0984\u0005\u01b2\u00da\u0002\u0984\u0986\u0007;",
    "\u0002\u0002\u0985\u0987\u0005\u01b8\u00dd\u0002\u0986\u0985\u0003\u0002",
    "\u0002\u0002\u0986\u0987\u0003\u0002\u0002\u0002\u0987\u0988\u0003\u0002",
    "\u0002\u0002\u0988\u0989\u0007<\u0002\u0002\u0989\u09bc\u0003\u0002",
    "\u0002\u0002\u098a\u098b\u0005J&\u0002\u098b\u098d\u0007C\u0002\u0002",
    "\u098c\u098e\u0005:\u001e\u0002\u098d\u098c\u0003\u0002\u0002\u0002",
    "\u098d\u098e\u0003\u0002\u0002\u0002\u098e\u098f\u0003\u0002\u0002\u0002",
    "\u098f\u0990\u0005\u01b2\u00da\u0002\u0990\u0992\u0007;\u0002\u0002",
    "\u0991\u0993\u0005\u01b8\u00dd\u0002\u0992\u0991\u0003\u0002\u0002\u0002",
    "\u0992\u0993\u0003\u0002\u0002\u0002\u0993\u0994\u0003\u0002\u0002\u0002",
    "\u0994\u0995\u0007<\u0002\u0002\u0995\u09bc\u0003\u0002\u0002\u0002",
    "\u0996\u0997\u0005\u0184\u00c3\u0002\u0997\u0999\u0007C\u0002\u0002",
    "\u0998\u099a\u0005:\u001e\u0002\u0999\u0998\u0003\u0002\u0002\u0002",
    "\u0999\u099a\u0003\u0002\u0002\u0002\u099a\u099b\u0003\u0002\u0002\u0002",
    "\u099b\u099c\u0007h\u0002\u0002\u099c\u099e\u0007;\u0002\u0002\u099d",
    "\u099f\u0005\u01b8\u00dd\u0002\u099e\u099d\u0003\u0002\u0002\u0002\u099e",
    "\u099f\u0003\u0002\u0002\u0002\u099f\u09a0\u0003\u0002\u0002\u0002\u09a0",
    "\u09a1\u0007<\u0002\u0002\u09a1\u09bc\u0003\u0002\u0002\u0002\u09a2",
    "\u09a3\u0007*\u0002\u0002\u09a3\u09a5\u0007C\u0002\u0002\u09a4\u09a6",
    "\u0005:\u001e\u0002\u09a5\u09a4\u0003\u0002\u0002\u0002\u09a5\u09a6",
    "\u0003\u0002\u0002\u0002\u09a6\u09a7\u0003\u0002\u0002\u0002\u09a7\u09a8",
    "\u0007h\u0002\u0002\u09a8\u09aa\u0007;\u0002\u0002\u09a9\u09ab\u0005",
    "\u01b8\u00dd\u0002\u09aa\u09a9\u0003\u0002\u0002\u0002\u09aa\u09ab\u0003",
    "\u0002\u0002\u0002\u09ab\u09ac\u0003\u0002\u0002\u0002\u09ac\u09bc\u0007",
    "<\u0002\u0002\u09ad\u09ae\u0005F$\u0002\u09ae\u09af\u0007C\u0002\u0002",
    "\u09af\u09b0\u0007*\u0002\u0002\u09b0\u09b2\u0007C\u0002\u0002\u09b1",
    "\u09b3\u0005:\u001e\u0002\u09b2\u09b1\u0003\u0002\u0002\u0002\u09b2",
    "\u09b3\u0003\u0002\u0002\u0002\u09b3\u09b4\u0003\u0002\u0002\u0002\u09b4",
    "\u09b5\u0007h\u0002\u0002\u09b5\u09b7\u0007;\u0002\u0002\u09b6\u09b8",
    "\u0005\u01b8\u00dd\u0002\u09b7\u09b6\u0003\u0002\u0002\u0002\u09b7\u09b8",
    "\u0003\u0002\u0002\u0002\u09b8\u09b9\u0003\u0002\u0002\u0002\u09b9\u09ba",
    "\u0007<\u0002\u0002\u09ba\u09bc\u0003\u0002\u0002\u0002\u09bb\u0977",
    "\u0003\u0002\u0002\u0002\u09bb\u097e\u0003\u0002\u0002\u0002\u09bb\u098a",
    "\u0003\u0002\u0002\u0002\u09bb\u0996\u0003\u0002\u0002\u0002\u09bb\u09a2",
    "\u0003\u0002\u0002\u0002\u09bb\u09ad\u0003\u0002\u0002\u0002\u09bc\u01ad",
    "\u0003\u0002\u0002\u0002\u09bd\u09be\u0005\u01b0\u00d9\u0002\u09be\u01af",
    "\u0003\u0002\u0002\u0002\u09bf\u09c4\u0005\u01b2\u00da\u0002\u09c0\u09c1",
    "\u0007C\u0002\u0002\u09c1\u09c3\u0005\u01b2\u00da\u0002\u09c2\u09c0",
    "\u0003\u0002\u0002\u0002\u09c3\u09c6\u0003\u0002\u0002\u0002\u09c4\u09c2",
    "\u0003\u0002\u0002\u0002\u09c4\u09c5\u0003\u0002\u0002\u0002\u09c5\u01b1",
    "\u0003\u0002\u0002\u0002\u09c6\u09c4\u0003\u0002\u0002\u0002\u09c7\u09c8",
    "\u0007h\u0002\u0002\u09c8\u01b3\u0003\u0002\u0002\u0002\u09c9\u09cb",
    "\u0007C\u0002\u0002\u09ca\u09cc\u0005:\u001e\u0002\u09cb\u09ca\u0003",
    "\u0002\u0002\u0002\u09cb\u09cc\u0003\u0002\u0002\u0002\u09cc\u09cd\u0003",
    "\u0002\u0002\u0002\u09cd\u09ce\u0007h\u0002\u0002\u09ce\u09d0\u0007",
    ";\u0002\u0002\u09cf\u09d1\u0005\u01b8\u00dd\u0002\u09d0\u09cf\u0003",
    "\u0002\u0002\u0002\u09d0\u09d1\u0003\u0002\u0002\u0002\u09d1\u09d2\u0003",
    "\u0002\u0002\u0002\u09d2\u09d3\u0007<\u0002\u0002\u09d3\u01b5\u0003",
    "\u0002\u0002\u0002\u09d4\u09d5\u0005\u00aaV\u0002\u09d5\u09d7\u0007",
    ";\u0002\u0002\u09d6\u09d8\u0005\u01b8\u00dd\u0002\u09d7\u09d6\u0003",
    "\u0002\u0002\u0002\u09d7\u09d8\u0003\u0002\u0002\u0002\u09d8\u09d9\u0003",
    "\u0002\u0002\u0002\u09d9\u09da\u0007<\u0002\u0002\u09da\u0a0d\u0003",
    "\u0002\u0002\u0002\u09db\u09dc\u0005F$\u0002\u09dc\u09de\u0007C\u0002",
    "\u0002\u09dd\u09df\u0005:\u001e\u0002\u09de\u09dd\u0003\u0002\u0002",
    "\u0002\u09de\u09df\u0003\u0002\u0002\u0002\u09df\u09e0\u0003\u0002\u0002",
    "\u0002\u09e0\u09e1\u0007h\u0002\u0002\u09e1\u09e3\u0007;\u0002\u0002",
    "\u09e2\u09e4\u0005\u01b8\u00dd\u0002\u09e3\u09e2\u0003\u0002\u0002\u0002",
    "\u09e3\u09e4\u0003\u0002\u0002\u0002\u09e4\u09e5\u0003\u0002\u0002\u0002",
    "\u09e5\u09e6\u0007<\u0002\u0002\u09e6\u0a0d\u0003\u0002\u0002\u0002",
    "\u09e7\u09e8\u0005J&\u0002\u09e8\u09ea\u0007C\u0002\u0002\u09e9\u09eb",
    "\u0005:\u001e\u0002\u09ea\u09e9\u0003\u0002\u0002\u0002\u09ea\u09eb",
    "\u0003\u0002\u0002\u0002\u09eb\u09ec\u0003\u0002\u0002\u0002\u09ec\u09ed",
    "\u0007h\u0002\u0002\u09ed\u09ef\u0007;\u0002\u0002\u09ee\u09f0\u0005",
    "\u01b8\u00dd\u0002\u09ef\u09ee\u0003\u0002\u0002\u0002\u09ef\u09f0\u0003",
    "\u0002\u0002\u0002\u09f0\u09f1\u0003\u0002\u0002\u0002\u09f1\u09f2\u0007",
    "<\u0002\u0002\u09f2\u0a0d\u0003\u0002\u0002\u0002\u09f3\u09f4\u0007",
    "*\u0002\u0002\u09f4\u09f6\u0007C\u0002\u0002\u09f5\u09f7\u0005:\u001e",
    "\u0002\u09f6\u09f5\u0003\u0002\u0002\u0002\u09f6\u09f7\u0003\u0002\u0002",
    "\u0002\u09f7\u09f8\u0003\u0002\u0002\u0002\u09f8\u09f9\u0007h\u0002",
    "\u0002\u09f9\u09fb\u0007;\u0002\u0002\u09fa\u09fc\u0005\u01b8\u00dd",
    "\u0002\u09fb\u09fa\u0003\u0002\u0002\u0002\u09fb\u09fc\u0003\u0002\u0002",
    "\u0002\u09fc\u09fd\u0003\u0002\u0002\u0002\u09fd\u0a0d\u0007<\u0002",
    "\u0002\u09fe\u09ff\u0005F$\u0002\u09ff\u0a00\u0007C\u0002\u0002\u0a00",
    "\u0a01\u0007*\u0002\u0002\u0a01\u0a03\u0007C\u0002\u0002\u0a02\u0a04",
    "\u0005:\u001e\u0002\u0a03\u0a02\u0003\u0002\u0002\u0002\u0a03\u0a04",
    "\u0003\u0002\u0002\u0002\u0a04\u0a05\u0003\u0002\u0002\u0002\u0a05\u0a06",
    "\u0007h\u0002\u0002\u0a06\u0a08\u0007;\u0002\u0002\u0a07\u0a09\u0005",
    "\u01b8\u00dd\u0002\u0a08\u0a07\u0003\u0002\u0002\u0002\u0a08\u0a09\u0003",
    "\u0002\u0002\u0002\u0a09\u0a0a\u0003\u0002\u0002\u0002\u0a0a\u0a0b\u0007",
    "<\u0002\u0002\u0a0b\u0a0d\u0003\u0002\u0002\u0002\u0a0c\u09d4\u0003",
    "\u0002\u0002\u0002\u0a0c\u09db\u0003\u0002\u0002\u0002\u0a0c\u09e7\u0003",
    "\u0002\u0002\u0002\u0a0c\u09f3\u0003\u0002\u0002\u0002\u0a0c\u09fe\u0003",
    "\u0002\u0002\u0002\u0a0d\u01b7\u0003\u0002\u0002\u0002\u0a0e\u0a13\u0005",
    "\u01c8\u00e5\u0002\u0a0f\u0a10\u0007B\u0002\u0002\u0a10\u0a12\u0005",
    "\u01c8\u00e5\u0002\u0a11\u0a0f\u0003\u0002\u0002\u0002\u0a12\u0a15\u0003",
    "\u0002\u0002\u0002\u0a13\u0a11\u0003\u0002\u0002\u0002\u0a13\u0a14\u0003",
    "\u0002\u0002\u0002\u0a14\u01b9\u0003\u0002\u0002\u0002\u0a15\u0a13\u0003",
    "\u0002\u0002\u0002\u0a16\u0a17\u0005J&\u0002\u0a17\u0a19\u0007\\\u0002",
    "\u0002\u0a18\u0a1a\u0005:\u001e\u0002\u0a19\u0a18\u0003\u0002\u0002",
    "\u0002\u0a19\u0a1a\u0003\u0002\u0002\u0002\u0a1a\u0a1b\u0003\u0002\u0002",
    "\u0002\u0a1b\u0a1c\u0007h\u0002\u0002\u0a1c\u0a46\u0003\u0002\u0002",
    "\u0002\u0a1d\u0a1e\u0005\u001c\u000f\u0002\u0a1e\u0a20\u0007\\\u0002",
    "\u0002\u0a1f\u0a21\u0005:\u001e\u0002\u0a20\u0a1f\u0003\u0002\u0002",
    "\u0002\u0a20\u0a21\u0003\u0002\u0002\u0002\u0a21\u0a22\u0003\u0002\u0002",
    "\u0002\u0a22\u0a23\u0007h\u0002\u0002\u0a23\u0a46\u0003\u0002\u0002",
    "\u0002\u0a24\u0a25\u0005\u0184\u00c3\u0002\u0a25\u0a27\u0007\\\u0002",
    "\u0002\u0a26\u0a28\u0005:\u001e\u0002\u0a27\u0a26\u0003\u0002\u0002",
    "\u0002\u0a27\u0a28\u0003\u0002\u0002\u0002\u0a28\u0a29\u0003\u0002\u0002",
    "\u0002\u0a29\u0a2a\u0007h\u0002\u0002\u0a2a\u0a46\u0003\u0002\u0002",
    "\u0002\u0a2b\u0a2c\u0007*\u0002\u0002\u0a2c\u0a2e\u0007\\\u0002\u0002",
    "\u0a2d\u0a2f\u0005:\u001e\u0002\u0a2e\u0a2d\u0003\u0002\u0002\u0002",
    "\u0a2e\u0a2f\u0003\u0002\u0002\u0002\u0a2f\u0a30\u0003\u0002\u0002\u0002",
    "\u0a30\u0a46\u0007h\u0002\u0002\u0a31\u0a32\u0005F$\u0002\u0a32\u0a33",
    "\u0007C\u0002\u0002\u0a33\u0a34\u0007*\u0002\u0002\u0a34\u0a36\u0007",
    "\\\u0002\u0002\u0a35\u0a37\u0005:\u001e\u0002\u0a36\u0a35\u0003\u0002",
    "\u0002\u0002\u0a36\u0a37\u0003\u0002\u0002\u0002\u0a37\u0a38\u0003\u0002",
    "\u0002\u0002\u0a38\u0a39\u0007h\u0002\u0002\u0a39\u0a46\u0003\u0002",
    "\u0002\u0002\u0a3a\u0a3b\u0005 \u0011\u0002\u0a3b\u0a3d\u0007\\\u0002",
    "\u0002\u0a3c\u0a3e\u0005:\u001e\u0002\u0a3d\u0a3c\u0003\u0002\u0002",
    "\u0002\u0a3d\u0a3e\u0003\u0002\u0002\u0002\u0a3e\u0a3f\u0003\u0002\u0002",
    "\u0002\u0a3f\u0a40\u0007!\u0002\u0002\u0a40\u0a46\u0003\u0002\u0002",
    "\u0002\u0a41\u0a42\u0005.\u0018\u0002\u0a42\u0a43\u0007\\\u0002\u0002",
    "\u0a43\u0a44\u0007!\u0002\u0002\u0a44\u0a46\u0003\u0002\u0002\u0002",
    "\u0a45\u0a16\u0003\u0002\u0002\u0002\u0a45\u0a1d\u0003\u0002\u0002\u0002",
    "\u0a45\u0a24\u0003\u0002\u0002\u0002\u0a45\u0a2b\u0003\u0002\u0002\u0002",
    "\u0a45\u0a31\u0003\u0002\u0002\u0002\u0a45\u0a3a\u0003\u0002\u0002\u0002",
    "\u0a45\u0a41\u0003\u0002\u0002\u0002\u0a46\u01bb\u0003\u0002\u0002\u0002",
    "\u0a47\u0a49\u0007\\\u0002\u0002\u0a48\u0a4a\u0005:\u001e\u0002\u0a49",
    "\u0a48\u0003\u0002\u0002\u0002\u0a49\u0a4a\u0003\u0002\u0002\u0002\u0a4a",
    "\u0a4b\u0003\u0002\u0002\u0002\u0a4b\u0a4c\u0007h\u0002\u0002\u0a4c",
    "\u01bd\u0003\u0002\u0002\u0002\u0a4d\u0a4e\u0005J&\u0002\u0a4e\u0a50",
    "\u0007\\\u0002\u0002\u0a4f\u0a51\u0005:\u001e\u0002\u0a50\u0a4f\u0003",
    "\u0002\u0002\u0002\u0a50\u0a51\u0003\u0002\u0002\u0002\u0a51\u0a52\u0003",
    "\u0002\u0002\u0002\u0a52\u0a53\u0007h\u0002\u0002\u0a53\u0a76\u0003",
    "\u0002\u0002\u0002\u0a54\u0a55\u0005\u001c\u000f\u0002\u0a55\u0a57\u0007",
    "\\\u0002\u0002\u0a56\u0a58\u0005:\u001e\u0002\u0a57\u0a56\u0003\u0002",
    "\u0002\u0002\u0a57\u0a58\u0003\u0002\u0002\u0002\u0a58\u0a59\u0003\u0002",
    "\u0002\u0002\u0a59\u0a5a\u0007h\u0002\u0002\u0a5a\u0a76\u0003\u0002",
    "\u0002\u0002\u0a5b\u0a5c\u0007*\u0002\u0002\u0a5c\u0a5e\u0007\\\u0002",
    "\u0002\u0a5d\u0a5f\u0005:\u001e\u0002\u0a5e\u0a5d\u0003\u0002\u0002",
    "\u0002\u0a5e\u0a5f\u0003\u0002\u0002\u0002\u0a5f\u0a60\u0003\u0002\u0002",
    "\u0002\u0a60\u0a76\u0007h\u0002\u0002\u0a61\u0a62\u0005F$\u0002\u0a62",
    "\u0a63\u0007C\u0002\u0002\u0a63\u0a64\u0007*\u0002\u0002\u0a64\u0a66",
    "\u0007\\\u0002\u0002\u0a65\u0a67\u0005:\u001e\u0002\u0a66\u0a65\u0003",
    "\u0002\u0002\u0002\u0a66\u0a67\u0003\u0002\u0002\u0002\u0a67\u0a68\u0003",
    "\u0002\u0002\u0002\u0a68\u0a69\u0007h\u0002\u0002\u0a69\u0a76\u0003",
    "\u0002\u0002\u0002\u0a6a\u0a6b\u0005 \u0011\u0002\u0a6b\u0a6d\u0007",
    "\\\u0002\u0002\u0a6c\u0a6e\u0005:\u001e\u0002\u0a6d\u0a6c\u0003\u0002",
    "\u0002\u0002\u0a6d\u0a6e\u0003\u0002\u0002\u0002\u0a6e\u0a6f\u0003\u0002",
    "\u0002\u0002\u0a6f\u0a70\u0007!\u0002\u0002\u0a70\u0a76\u0003\u0002",
    "\u0002\u0002\u0a71\u0a72\u0005.\u0018\u0002\u0a72\u0a73\u0007\\\u0002",
    "\u0002\u0a73\u0a74\u0007!\u0002\u0002\u0a74\u0a76\u0003\u0002\u0002",
    "\u0002\u0a75\u0a4d\u0003\u0002\u0002\u0002\u0a75\u0a54\u0003\u0002\u0002",
    "\u0002\u0a75\u0a5b\u0003\u0002\u0002\u0002\u0a75\u0a61\u0003\u0002\u0002",
    "\u0002\u0a75\u0a6a\u0003\u0002\u0002\u0002\u0a75\u0a71\u0003\u0002\u0002",
    "\u0002\u0a76\u01bf\u0003\u0002\u0002\u0002\u0a77\u0a78\u0007!\u0002",
    "\u0002\u0a78\u0a79\u0005\u0014\u000b\u0002\u0a79\u0a7b\u0005\u01c2\u00e2",
    "\u0002\u0a7a\u0a7c\u00050\u0019\u0002\u0a7b\u0a7a\u0003\u0002\u0002",
    "\u0002\u0a7b\u0a7c\u0003\u0002\u0002\u0002\u0a7c\u0a8e\u0003\u0002\u0002",
    "\u0002\u0a7d\u0a7e\u0007!\u0002\u0002\u0a7e\u0a7f\u0005\u001e\u0010",
    "\u0002\u0a7f\u0a81\u0005\u01c2\u00e2\u0002\u0a80\u0a82\u00050\u0019",
    "\u0002\u0a81\u0a80\u0003\u0002\u0002\u0002\u0a81\u0a82\u0003\u0002\u0002",
    "\u0002\u0a82\u0a8e\u0003\u0002\u0002\u0002\u0a83\u0a84\u0007!\u0002",
    "\u0002\u0a84\u0a85\u0005\u0014\u000b\u0002\u0a85\u0a86\u00050\u0019",
    "\u0002\u0a86\u0a87\u0005\u011c\u008f\u0002\u0a87\u0a8e\u0003\u0002\u0002",
    "\u0002\u0a88\u0a89\u0007!\u0002\u0002\u0a89\u0a8a\u0005\u001e\u0010",
    "\u0002\u0a8a\u0a8b\u00050\u0019\u0002\u0a8b\u0a8c\u0005\u011c\u008f",
    "\u0002\u0a8c\u0a8e\u0003\u0002\u0002\u0002\u0a8d\u0a77\u0003\u0002\u0002",
    "\u0002\u0a8d\u0a7d\u0003\u0002\u0002\u0002\u0a8d\u0a83\u0003\u0002\u0002",
    "\u0002\u0a8d\u0a88\u0003\u0002\u0002\u0002\u0a8e\u01c1\u0003\u0002\u0002",
    "\u0002\u0a8f\u0a93\u0005\u01c4\u00e3\u0002\u0a90\u0a92\u0005\u01c4\u00e3",
    "\u0002\u0a91\u0a90\u0003\u0002\u0002\u0002\u0a92\u0a95\u0003\u0002\u0002",
    "\u0002\u0a93\u0a91\u0003\u0002\u0002\u0002\u0a93\u0a94\u0003\u0002\u0002",
    "\u0002\u0a94\u01c3\u0003\u0002\u0002\u0002\u0a95\u0a93\u0003\u0002\u0002",
    "\u0002\u0a96\u0a98\u0005\u010a\u0086\u0002\u0a97\u0a96\u0003\u0002\u0002",
    "\u0002\u0a98\u0a9b\u0003\u0002\u0002\u0002\u0a99\u0a97\u0003\u0002\u0002",
    "\u0002\u0a99\u0a9a\u0003\u0002\u0002\u0002\u0a9a\u0a9c\u0003\u0002\u0002",
    "\u0002\u0a9b\u0a99\u0003\u0002\u0002\u0002\u0a9c\u0a9d\u0007?\u0002",
    "\u0002\u0a9d\u0a9e\u0005\u01c8\u00e5\u0002\u0a9e\u0a9f\u0007@\u0002",
    "\u0002\u0a9f\u01c5\u0003\u0002\u0002\u0002\u0aa0\u0aa1\u0005\u01c8\u00e5",
    "\u0002\u0aa1\u01c7\u0003\u0002\u0002\u0002\u0aa2\u0aa5\u0005\u01ca\u00e6",
    "\u0002\u0aa3\u0aa5\u0005\u01d2\u00ea\u0002\u0aa4\u0aa2\u0003\u0002\u0002",
    "\u0002\u0aa4\u0aa3\u0003\u0002\u0002\u0002\u0aa5\u01c9\u0003\u0002\u0002",
    "\u0002\u0aa6\u0aa7\u0005\u01cc\u00e7\u0002\u0aa7\u0aa8\u0007[\u0002",
    "\u0002\u0aa8\u0aa9\u0005\u01d0\u00e9\u0002\u0aa9\u01cb\u0003\u0002\u0002",
    "\u0002\u0aaa\u0ab5\u0007h\u0002\u0002\u0aab\u0aad\u0007;\u0002\u0002",
    "\u0aac\u0aae\u0005\u00acW\u0002\u0aad\u0aac\u0003\u0002\u0002\u0002",
    "\u0aad\u0aae\u0003\u0002\u0002\u0002\u0aae\u0aaf\u0003\u0002\u0002\u0002",
    "\u0aaf\u0ab5\u0007<\u0002\u0002\u0ab0\u0ab1\u0007;\u0002\u0002\u0ab1",
    "\u0ab2\u0005\u01ce\u00e8\u0002\u0ab2\u0ab3\u0007<\u0002\u0002\u0ab3",
    "\u0ab5\u0003\u0002\u0002\u0002\u0ab4\u0aaa\u0003\u0002\u0002\u0002\u0ab4",
    "\u0aab\u0003\u0002\u0002\u0002\u0ab4\u0ab0\u0003\u0002\u0002\u0002\u0ab5",
    "\u01cd\u0003\u0002\u0002\u0002\u0ab6\u0abb\u0007h\u0002\u0002\u0ab7",
    "\u0ab8\u0007B\u0002\u0002\u0ab8\u0aba\u0007h\u0002\u0002\u0ab9\u0ab7",
    "\u0003\u0002\u0002\u0002\u0aba\u0abd\u0003\u0002\u0002\u0002\u0abb\u0ab9",
    "\u0003\u0002\u0002\u0002\u0abb\u0abc\u0003\u0002\u0002\u0002\u0abc\u01cf",
    "\u0003\u0002\u0002\u0002\u0abd\u0abb\u0003\u0002\u0002\u0002\u0abe\u0ac1",
    "\u0005\u01c8\u00e5\u0002\u0abf\u0ac1\u0005\u0120\u0091\u0002\u0ac0\u0abe",
    "\u0003\u0002\u0002\u0002\u0ac0\u0abf\u0003\u0002\u0002\u0002\u0ac1\u01d1",
    "\u0003\u0002\u0002\u0002\u0ac2\u0ac5\u0005\u01da\u00ee\u0002\u0ac3\u0ac5",
    "\u0005\u01d4\u00eb\u0002\u0ac4\u0ac2\u0003\u0002\u0002\u0002\u0ac4\u0ac3",
    "\u0003\u0002\u0002\u0002\u0ac5\u01d3\u0003\u0002\u0002\u0002\u0ac6\u0ac7",
    "\u0005\u01d6\u00ec\u0002\u0ac7\u0ac8\u0005\u01d8\u00ed\u0002\u0ac8\u0ac9",
    "\u0005\u01c8\u00e5\u0002\u0ac9\u01d5\u0003\u0002\u0002\u0002\u0aca\u0ace",
    "\u0005J&\u0002\u0acb\u0ace\u0005\u01a0\u00d1\u0002\u0acc\u0ace\u0005",
    "\u01a6\u00d4\u0002\u0acd\u0aca\u0003\u0002\u0002\u0002\u0acd\u0acb\u0003",
    "\u0002\u0002\u0002\u0acd\u0acc\u0003\u0002\u0002\u0002\u0ace\u01d7\u0003",
    "\u0002\u0002\u0002\u0acf\u0ad0\t\u0004\u0002\u0002\u0ad0\u01d9\u0003",
    "\u0002\u0002\u0002\u0ad1\u0ad9\u0005\u01de\u00f0\u0002\u0ad2\u0ad3\u0005",
    "\u01de\u00f0\u0002\u0ad3\u0ad4\u0007I\u0002\u0002\u0ad4\u0ad5\u0005",
    "\u01c8\u00e5\u0002\u0ad5\u0ad6\u0007J\u0002\u0002\u0ad6\u0ad7\u0005",
    "\u01da\u00ee\u0002\u0ad7\u0ad9\u0003\u0002\u0002\u0002\u0ad8\u0ad1\u0003",
    "\u0002\u0002\u0002\u0ad8\u0ad2\u0003\u0002\u0002\u0002\u0ad9\u01db\u0003",
    "\u0002\u0002\u0002\u0ada\u0adb\u0007P\u0002\u0002\u0adb\u01dd\u0003",
    "\u0002\u0002\u0002\u0adc\u0add\b\u00f0\u0001\u0002\u0add\u0ade\u0005",
    "\u01e2\u00f2\u0002\u0ade\u0ae5\u0003\u0002\u0002\u0002\u0adf\u0ae0\f",
    "\u0003\u0002\u0002\u0ae0\u0ae1\u0005\u01dc\u00ef\u0002\u0ae1\u0ae2\u0005",
    "\u01e2\u00f2\u0002\u0ae2\u0ae4\u0003\u0002\u0002\u0002\u0ae3\u0adf\u0003",
    "\u0002\u0002\u0002\u0ae4\u0ae7\u0003\u0002\u0002\u0002\u0ae5\u0ae3\u0003",
    "\u0002\u0002\u0002\u0ae5\u0ae6\u0003\u0002\u0002\u0002\u0ae6\u01df\u0003",
    "\u0002\u0002\u0002\u0ae7\u0ae5\u0003\u0002\u0002\u0002\u0ae8\u0ae9\u0007",
    "O\u0002\u0002\u0ae9\u01e1\u0003\u0002\u0002\u0002\u0aea\u0aeb\b\u00f2",
    "\u0001\u0002\u0aeb\u0aec\u0005\u01e6\u00f4\u0002\u0aec\u0af3\u0003\u0002",
    "\u0002\u0002\u0aed\u0aee\f\u0003\u0002\u0002\u0aee\u0aef\u0005\u01e0",
    "\u00f1\u0002\u0aef\u0af0\u0005\u01e6\u00f4\u0002\u0af0\u0af2\u0003\u0002",
    "\u0002\u0002\u0af1\u0aed\u0003\u0002\u0002\u0002\u0af2\u0af5\u0003\u0002",
    "\u0002\u0002\u0af3\u0af1\u0003\u0002\u0002\u0002\u0af3\u0af4\u0003\u0002",
    "\u0002\u0002\u0af4\u01e3\u0003\u0002\u0002\u0002\u0af5\u0af3\u0003\u0002",
    "\u0002\u0002\u0af6\u0af7\u0007X\u0002\u0002\u0af7\u01e5\u0003\u0002",
    "\u0002\u0002\u0af8\u0af9\b\u00f4\u0001\u0002\u0af9\u0afa\u0005\u01ea",
    "\u00f6\u0002\u0afa\u0b01\u0003\u0002\u0002\u0002\u0afb\u0afc\f\u0003",
    "\u0002\u0002\u0afc\u0afd\u0005\u01e4\u00f3\u0002\u0afd\u0afe\u0005\u01ea",
    "\u00f6\u0002\u0afe\u0b00\u0003\u0002\u0002\u0002\u0aff\u0afb\u0003\u0002",
    "\u0002\u0002\u0b00\u0b03\u0003\u0002\u0002\u0002\u0b01\u0aff\u0003\u0002",
    "\u0002\u0002\u0b01\u0b02\u0003\u0002\u0002\u0002\u0b02\u01e7\u0003\u0002",
    "\u0002\u0002\u0b03\u0b01\u0003\u0002\u0002\u0002\u0b04\u0b05\u0007Y",
    "\u0002\u0002\u0b05\u01e9\u0003\u0002\u0002\u0002\u0b06\u0b07\b\u00f6",
    "\u0001\u0002\u0b07\u0b08\u0005\u01ee\u00f8\u0002\u0b08\u0b0f\u0003\u0002",
    "\u0002\u0002\u0b09\u0b0a\f\u0003\u0002\u0002\u0b0a\u0b0b\u0005\u01e8",
    "\u00f5\u0002\u0b0b\u0b0c\u0005\u01ee\u00f8\u0002\u0b0c\u0b0e\u0003\u0002",
    "\u0002\u0002\u0b0d\u0b09\u0003\u0002\u0002\u0002\u0b0e\u0b11\u0003\u0002",
    "\u0002\u0002\u0b0f\u0b0d\u0003\u0002\u0002\u0002\u0b0f\u0b10\u0003\u0002",
    "\u0002\u0002\u0b10\u01eb\u0003\u0002\u0002\u0002\u0b11\u0b0f\u0003\u0002",
    "\u0002\u0002\u0b12\u0b13\u0007W\u0002\u0002\u0b13\u01ed\u0003\u0002",
    "\u0002\u0002\u0b14\u0b15\b\u00f8\u0001\u0002\u0b15\u0b16\u0005\u01f4",
    "\u00fb\u0002\u0b16\u0b1d\u0003\u0002\u0002\u0002\u0b17\u0b18\f\u0003",
    "\u0002\u0002\u0b18\u0b19\u0005\u01ec\u00f7\u0002\u0b19\u0b1a\u0005\u01f4",
    "\u00fb\u0002\u0b1a\u0b1c\u0003\u0002\u0002\u0002\u0b1b\u0b17\u0003\u0002",
    "\u0002\u0002\u0b1c\u0b1f\u0003\u0002\u0002\u0002\u0b1d\u0b1b\u0003\u0002",
    "\u0002\u0002\u0b1d\u0b1e\u0003\u0002\u0002\u0002\u0b1e\u01ef\u0003\u0002",
    "\u0002\u0002\u0b1f\u0b1d\u0003\u0002\u0002\u0002\u0b20\u0b21\u0007K",
    "\u0002\u0002\u0b21\u01f1\u0003\u0002\u0002\u0002\u0b22\u0b23\u0007N",
    "\u0002\u0002\u0b23\u01f3\u0003\u0002\u0002\u0002\u0b24\u0b25\b\u00fb",
    "\u0001\u0002\u0b25\u0b26\u0005\u0200\u0101\u0002\u0b26\u0b31\u0003\u0002",
    "\u0002\u0002\u0b27\u0b28\f\u0004\u0002\u0002\u0b28\u0b29\u0005\u01f0",
    "\u00f9\u0002\u0b29\u0b2a\u0005\u0200\u0101\u0002\u0b2a\u0b30\u0003\u0002",
    "\u0002\u0002\u0b2b\u0b2c\f\u0003\u0002\u0002\u0b2c\u0b2d\u0005\u01f2",
    "\u00fa\u0002\u0b2d\u0b2e\u0005\u0200\u0101\u0002\u0b2e\u0b30\u0003\u0002",
    "\u0002\u0002\u0b2f\u0b27\u0003\u0002\u0002\u0002\u0b2f\u0b2b\u0003\u0002",
    "\u0002\u0002\u0b30\u0b33\u0003\u0002\u0002\u0002\u0b31\u0b2f\u0003\u0002",
    "\u0002\u0002\u0b31\u0b32\u0003\u0002\u0002\u0002\u0b32\u01f5\u0003\u0002",
    "\u0002\u0002\u0b33\u0b31\u0003\u0002\u0002\u0002\u0b34\u0b35\u0007F",
    "\u0002\u0002\u0b35\u01f7\u0003\u0002\u0002\u0002\u0b36\u0b37\u0007E",
    "\u0002\u0002\u0b37\u01f9\u0003\u0002\u0002\u0002\u0b38\u0b39\u0007L",
    "\u0002\u0002\u0b39\u01fb\u0003\u0002\u0002\u0002\u0b3a\u0b3b\u0007M",
    "\u0002\u0002\u0b3b\u01fd\u0003\u0002\u0002\u0002\u0b3c\u0b3d\u0007\u001c",
    "\u0002\u0002\u0b3d\u01ff\u0003\u0002\u0002\u0002\u0b3e\u0b3f\b\u0101",
    "\u0001\u0002\u0b3f\u0b40\u0005\u0208\u0105\u0002\u0b40\u0b57\u0003\u0002",
    "\u0002\u0002\u0b41\u0b42\f\u0007\u0002\u0002\u0b42\u0b43\u0005\u01f6",
    "\u00fc\u0002\u0b43\u0b44\u0005\u0208\u0105\u0002\u0b44\u0b56\u0003\u0002",
    "\u0002\u0002\u0b45\u0b46\f\u0006\u0002\u0002\u0b46\u0b47\u0005\u01f8",
    "\u00fd\u0002\u0b47\u0b48\u0005\u0208\u0105\u0002\u0b48\u0b56\u0003\u0002",
    "\u0002\u0002\u0b49\u0b4a\f\u0005\u0002\u0002\u0b4a\u0b4b\u0005\u01fa",
    "\u00fe\u0002\u0b4b\u0b4c\u0005\u0208\u0105\u0002\u0b4c\u0b56\u0003\u0002",
    "\u0002\u0002\u0b4d\u0b4e\f\u0004\u0002\u0002\u0b4e\u0b4f\u0005\u01fc",
    "\u00ff\u0002\u0b4f\u0b50\u0005\u0208\u0105\u0002\u0b50\u0b56\u0003\u0002",
    "\u0002\u0002\u0b51\u0b52\f\u0003\u0002\u0002\u0b52\u0b53\u0005\u01fe",
    "\u0100\u0002\u0b53\u0b54\u0005\u001c\u000f\u0002\u0b54\u0b56\u0003\u0002",
    "\u0002\u0002\u0b55\u0b41\u0003\u0002\u0002\u0002\u0b55\u0b45\u0003\u0002",
    "\u0002\u0002\u0b55\u0b49\u0003\u0002\u0002\u0002\u0b55\u0b4d\u0003\u0002",
    "\u0002\u0002\u0b55\u0b51\u0003\u0002\u0002\u0002\u0b56\u0b59\u0003\u0002",
    "\u0002\u0002\u0b57\u0b55\u0003\u0002\u0002\u0002\u0b57\u0b58\u0003\u0002",
    "\u0002\u0002\u0b58\u0201\u0003\u0002\u0002\u0002\u0b59\u0b57\u0003\u0002",
    "\u0002\u0002\u0b5a\u0b5b\u0007F\u0002\u0002\u0b5b\u0b5c\u0007F\u0002",
    "\u0002\u0b5c\u0203\u0003\u0002\u0002\u0002\u0b5d\u0b5e\u0007E\u0002",
    "\u0002\u0b5e\u0b5f\u0007E\u0002\u0002\u0b5f\u0205\u0003\u0002\u0002",
    "\u0002\u0b60\u0b61\u0007E\u0002\u0002\u0b61\u0b62\u0007E\u0002\u0002",
    "\u0b62\u0b63\u0007E\u0002\u0002\u0b63\u0207\u0003\u0002\u0002\u0002",
    "\u0b64\u0b65\b\u0105\u0001\u0002\u0b65\u0b66\u0005\u020a\u0106\u0002",
    "\u0b66\u0b75\u0003\u0002\u0002\u0002\u0b67\u0b68\f\u0005\u0002\u0002",
    "\u0b68\u0b69\u0005\u0202\u0102\u0002\u0b69\u0b6a\u0005\u020a\u0106\u0002",
    "\u0b6a\u0b74\u0003\u0002\u0002\u0002\u0b6b\u0b6c\f\u0004\u0002\u0002",
    "\u0b6c\u0b6d\u0005\u0204\u0103\u0002\u0b6d\u0b6e\u0005\u020a\u0106\u0002",
    "\u0b6e\u0b74\u0003\u0002\u0002\u0002\u0b6f\u0b70\f\u0003\u0002\u0002",
    "\u0b70\u0b71\u0005\u0206\u0104\u0002\u0b71\u0b72\u0005\u020a\u0106\u0002",
    "\u0b72\u0b74\u0003\u0002\u0002\u0002\u0b73\u0b67\u0003\u0002\u0002\u0002",
    "\u0b73\u0b6b\u0003\u0002\u0002\u0002\u0b73\u0b6f\u0003\u0002\u0002\u0002",
    "\u0b74\u0b77\u0003\u0002\u0002\u0002\u0b75\u0b73\u0003\u0002\u0002\u0002",
    "\u0b75\u0b76\u0003\u0002\u0002\u0002\u0b76\u0209\u0003\u0002\u0002\u0002",
    "\u0b77\u0b75\u0003\u0002\u0002\u0002\u0b78\u0b79\b\u0106\u0001\u0002",
    "\u0b79\u0b7a\u0005\u0212\u010a\u0002\u0b7a\u0b85\u0003\u0002\u0002\u0002",
    "\u0b7b\u0b7c\f\u0004\u0002\u0002\u0b7c\u0b7d\u0005\u0214\u010b\u0002",
    "\u0b7d\u0b7e\u0005\u0212\u010a\u0002\u0b7e\u0b84\u0003\u0002\u0002\u0002",
    "\u0b7f\u0b80\f\u0003\u0002\u0002\u0b80\u0b81\u0005\u0216\u010c\u0002",
    "\u0b81\u0b82\u0005\u0212\u010a\u0002\u0b82\u0b84\u0003\u0002\u0002\u0002",
    "\u0b83\u0b7b\u0003\u0002\u0002\u0002\u0b83\u0b7f\u0003\u0002\u0002\u0002",
    "\u0b84\u0b87\u0003\u0002\u0002\u0002\u0b85\u0b83\u0003\u0002\u0002\u0002",
    "\u0b85\u0b86\u0003\u0002\u0002\u0002\u0b86\u020b\u0003\u0002\u0002\u0002",
    "\u0b87\u0b85\u0003\u0002\u0002\u0002\u0b88\u0b89\u0007U\u0002\u0002",
    "\u0b89\u020d\u0003\u0002\u0002\u0002\u0b8a\u0b8b\u0007V\u0002\u0002",
    "\u0b8b\u020f\u0003\u0002\u0002\u0002\u0b8c\u0b8d\u0007Z\u0002\u0002",
    "\u0b8d\u0211\u0003\u0002\u0002\u0002\u0b8e\u0b8f\b\u010a\u0001\u0002",
    "\u0b8f\u0b90\u0005\u0218\u010d\u0002\u0b90\u0b9f\u0003\u0002\u0002\u0002",
    "\u0b91\u0b92\f\u0005\u0002\u0002\u0b92\u0b93\u0005\u020c\u0107\u0002",
    "\u0b93\u0b94\u0005\u0218\u010d\u0002\u0b94\u0b9e\u0003\u0002\u0002\u0002",
    "\u0b95\u0b96\f\u0004\u0002\u0002\u0b96\u0b97\u0005\u020e\u0108\u0002",
    "\u0b97\u0b98\u0005\u0218\u010d\u0002\u0b98\u0b9e\u0003\u0002\u0002\u0002",
    "\u0b99\u0b9a\f\u0003\u0002\u0002\u0b9a\u0b9b\u0005\u0210\u0109\u0002",
    "\u0b9b\u0b9c\u0005\u0218\u010d\u0002\u0b9c\u0b9e\u0003\u0002\u0002\u0002",
    "\u0b9d\u0b91\u0003\u0002\u0002\u0002\u0b9d\u0b95\u0003\u0002\u0002\u0002",
    "\u0b9d\u0b99\u0003\u0002\u0002\u0002\u0b9e\u0ba1\u0003\u0002\u0002\u0002",
    "\u0b9f\u0b9d\u0003\u0002\u0002\u0002\u0b9f\u0ba0\u0003\u0002\u0002\u0002",
    "\u0ba0\u0213\u0003\u0002\u0002\u0002\u0ba1\u0b9f\u0003\u0002\u0002\u0002",
    "\u0ba2\u0ba3\u0007S\u0002\u0002\u0ba3\u0215\u0003\u0002\u0002\u0002",
    "\u0ba4\u0ba5\u0007T\u0002\u0002\u0ba5\u0217\u0003\u0002\u0002\u0002",
    "\u0ba6\u0bb0\u0005\u021c\u010f\u0002\u0ba7\u0bb0\u0005\u0220\u0111\u0002",
    "\u0ba8\u0ba9\u0005\u0214\u010b\u0002\u0ba9\u0baa\u0005\u0218\u010d\u0002",
    "\u0baa\u0bb0\u0003\u0002\u0002\u0002\u0bab\u0bac\u0005\u0216\u010c\u0002",
    "\u0bac\u0bad\u0005\u0218\u010d\u0002\u0bad\u0bb0\u0003\u0002\u0002\u0002",
    "\u0bae\u0bb0\u0005\u0226\u0114\u0002\u0baf\u0ba6\u0003\u0002\u0002\u0002",
    "\u0baf\u0ba7\u0003\u0002\u0002\u0002\u0baf\u0ba8\u0003\u0002\u0002\u0002",
    "\u0baf\u0bab\u0003\u0002\u0002\u0002\u0baf\u0bae\u0003\u0002\u0002\u0002",
    "\u0bb0\u0219\u0003\u0002\u0002\u0002\u0bb1\u0bb2\u0007Q\u0002\u0002",
    "\u0bb2\u021b\u0003\u0002\u0002\u0002\u0bb3\u0bb4\u0005\u021a\u010e\u0002",
    "\u0bb4\u0bb5\u0005\u0218\u010d\u0002\u0bb5\u021d\u0003\u0002\u0002\u0002",
    "\u0bb6\u0bb7\u0007R\u0002\u0002\u0bb7\u021f\u0003\u0002\u0002\u0002",
    "\u0bb8\u0bb9\u0005\u021e\u0110\u0002\u0bb9\u0bba\u0005\u0218\u010d\u0002",
    "\u0bba\u0221\u0003\u0002\u0002\u0002\u0bbb\u0bbc\u0007H\u0002\u0002",
    "\u0bbc\u0223\u0003\u0002\u0002\u0002\u0bbd\u0bbe\u0007G\u0002\u0002",
    "\u0bbe\u0225\u0003\u0002\u0002\u0002\u0bbf\u0bc8\u0005\u0228\u0115\u0002",
    "\u0bc0\u0bc1\u0005\u0222\u0112\u0002\u0bc1\u0bc2\u0005\u0218\u010d\u0002",
    "\u0bc2\u0bc8\u0003\u0002\u0002\u0002\u0bc3\u0bc4\u0005\u0224\u0113\u0002",
    "\u0bc4\u0bc5\u0005\u0218\u010d\u0002\u0bc5\u0bc8\u0003\u0002\u0002\u0002",
    "\u0bc6\u0bc8\u0005\u0232\u011a\u0002\u0bc7\u0bbf\u0003\u0002\u0002\u0002",
    "\u0bc7\u0bc0\u0003\u0002\u0002\u0002\u0bc7\u0bc3\u0003\u0002\u0002\u0002",
    "\u0bc7\u0bc6\u0003\u0002\u0002\u0002\u0bc8\u0227\u0003\u0002\u0002\u0002",
    "\u0bc9\u0bd7\u0005\u0184\u00c3\u0002\u0bca\u0bd7\u0005J&\u0002\u0bcb",
    "\u0bce\u0005\u0184\u00c3\u0002\u0bcc\u0bce\u0005J&\u0002\u0bcd\u0bcb",
    "\u0003\u0002\u0002\u0002\u0bcd\u0bcc\u0003\u0002\u0002\u0002\u0bce\u0bd3",
    "\u0003\u0002\u0002\u0002\u0bcf\u0bd2\u0005\u022c\u0117\u0002\u0bd0\u0bd2",
    "\u0005\u0230\u0119\u0002\u0bd1\u0bcf\u0003\u0002\u0002\u0002\u0bd1\u0bd0",
    "\u0003\u0002\u0002\u0002\u0bd2\u0bd5\u0003\u0002\u0002\u0002\u0bd3\u0bd1",
    "\u0003\u0002\u0002\u0002\u0bd3\u0bd4\u0003\u0002\u0002\u0002\u0bd4\u0bd7",
    "\u0003\u0002\u0002\u0002\u0bd5\u0bd3\u0003\u0002\u0002\u0002\u0bd6\u0bc9",
    "\u0003\u0002\u0002\u0002\u0bd6\u0bca\u0003\u0002\u0002\u0002\u0bd6\u0bcd",
    "\u0003\u0002\u0002\u0002\u0bd7\u0229\u0003\u0002\u0002\u0002\u0bd8\u0bd9",
    "\u0005\u0228\u0115\u0002\u0bd9\u0bda\u0005\u021a\u010e\u0002\u0bda\u022b",
    "\u0003\u0002\u0002\u0002\u0bdb\u0bdc\u0007Q\u0002\u0002\u0bdc\u022d",
    "\u0003\u0002\u0002\u0002\u0bdd\u0bde\u0005\u0228\u0115\u0002\u0bde\u0bdf",
    "\u0005\u021e\u0110\u0002\u0bdf\u022f\u0003\u0002\u0002\u0002\u0be0\u0be1",
    "\u0007R\u0002\u0002\u0be1\u0231\u0003\u0002\u0002\u0002\u0be2\u0be3",
    "\u0007;\u0002\u0002\u0be3\u0be4\u0005\u0014\u000b\u0002\u0be4\u0be5",
    "\u0007<\u0002\u0002\u0be5\u0be6\u0005\u0218\u010d\u0002\u0be6\u0bfe",
    "\u0003\u0002\u0002\u0002\u0be7\u0be8\u0007;\u0002\u0002\u0be8\u0bec",
    "\u0005\u001c\u000f\u0002\u0be9\u0beb\u00058\u001d\u0002\u0bea\u0be9",
    "\u0003\u0002\u0002\u0002\u0beb\u0bee\u0003\u0002\u0002\u0002\u0bec\u0bea",
    "\u0003\u0002\u0002\u0002\u0bec\u0bed\u0003\u0002\u0002\u0002\u0bed\u0bef",
    "\u0003\u0002\u0002\u0002\u0bee\u0bec\u0003\u0002\u0002\u0002\u0bef\u0bf0",
    "\u0007<\u0002\u0002\u0bf0\u0bf1\u0005\u0226\u0114\u0002\u0bf1\u0bfe",
    "\u0003\u0002\u0002\u0002\u0bf2\u0bf3\u0007;\u0002\u0002\u0bf3\u0bf7",
    "\u0005\u001c\u000f\u0002\u0bf4\u0bf6\u00058\u001d\u0002\u0bf5\u0bf4",
    "\u0003\u0002\u0002\u0002\u0bf6\u0bf9\u0003\u0002\u0002\u0002\u0bf7\u0bf5",
    "\u0003\u0002\u0002\u0002\u0bf7\u0bf8\u0003\u0002\u0002\u0002\u0bf8\u0bfa",
    "\u0003\u0002\u0002\u0002\u0bf9\u0bf7\u0003\u0002\u0002\u0002\u0bfa\u0bfb",
    "\u0007<\u0002\u0002\u0bfb\u0bfc\u0005\u01ca\u00e6\u0002\u0bfc\u0bfe",
    "\u0003\u0002\u0002\u0002\u0bfd\u0be2\u0003\u0002\u0002\u0002\u0bfd\u0be7",
    "\u0003\u0002\u0002\u0002\u0bfd\u0bf2\u0003\u0002\u0002\u0002\u0bfe\u0233",
    "\u0003\u0002\u0002\u0002\u014b\u0235\u023d\u024d\u0252\u0259\u025d\u0261",
    "\u026a\u026e\u0272\u0274\u027a\u027f\u0286\u028b\u028d\u0293\u0298\u029d",
    "\u02a2\u02ad\u02bb\u02c0\u02c8\u02cf\u02d5\u02da\u02e5\u02e8\u02f6\u02fb",
    "\u0300\u0305\u030b\u0315\u031d\u0327\u032f\u0339\u033d\u0342\u0348\u034e",
    "\u0357\u0362\u037f\u0383\u0389\u038c\u038f\u0398\u03a3\u03ae\u03bc\u03c3",
    "\u03cc\u03d3\u03dd\u03e8\u03ef\u03f5\u03f9\u03fd\u0401\u0405\u040a\u040e",
    "\u0412\u0414\u0419\u0420\u0425\u0427\u042d\u0432\u0436\u0449\u044e\u045e",
    "\u0463\u0469\u046f\u0471\u0475\u047a\u047e\u0487\u048e\u0496\u0499\u049e",
    "\u04a8\u04ae\u04b3\u04ba\u04c1\u04c6\u04cc\u04d8\u04dd\u04e1\u04eb\u04f0",
    "\u04f8\u04fb\u0500\u0508\u050b\u0510\u0515\u051a\u051f\u0526\u052b\u0533",
    "\u0538\u053d\u0542\u0548\u054e\u0551\u0554\u055d\u0563\u0569\u056c\u056f",
    "\u0577\u057c\u0582\u0585\u058c\u0598\u05a1\u05ab\u05b5\u05bc\u05c5\u05ce",
    "\u05d3\u05df\u05e9\u05ee\u05f6\u05f9\u0600\u0608\u060e\u0617\u0621\u0625",
    "\u0628\u0631\u063f\u0642\u064b\u0650\u0658\u065e\u0666\u0672\u0679\u0687",
    "\u069d\u06bf\u06cb\u06d1\u06dd\u06ea\u0704\u0708\u070d\u0711\u0715\u071d",
    "\u0721\u0725\u072c\u0735\u073d\u074c\u0758\u075e\u0764\u0779\u077e\u0784",
    "\u0790\u079b\u07a5\u07a8\u07ad\u07b6\u07bc\u07c6\u07cb\u07d4\u07eb\u07f5",
    "\u080b\u0812\u081a\u0822\u082d\u0844\u084e\u0859\u086f\u0873\u0878\u0880",
    "\u0886\u088a\u088e\u0892\u0898\u089d\u08a2\u08a6\u08aa\u08b0\u08b5\u08ba",
    "\u08be\u08c2\u08c4\u08c9\u08ce\u08d3\u08d7\u08db\u08df\u08e4\u08ec\u08f2",
    "\u08f6\u08fa\u08fe\u0904\u0909\u090e\u0912\u0916\u0918\u091d\u092c\u093a",
    "\u0946\u094f\u095e\u096b\u0974\u097a\u0981\u0986\u098d\u0992\u0999\u099e",
    "\u09a5\u09aa\u09b2\u09b7\u09bb\u09c4\u09cb\u09d0\u09d7\u09de\u09e3\u09ea",
    "\u09ef\u09f6\u09fb\u0a03\u0a08\u0a0c\u0a13\u0a19\u0a20\u0a27\u0a2e\u0a36",
    "\u0a3d\u0a45\u0a49\u0a50\u0a57\u0a5e\u0a66\u0a6d\u0a75\u0a7b\u0a81\u0a8d",
    "\u0a93\u0a99\u0aa4\u0aad\u0ab4\u0abb\u0ac0\u0ac4\u0acd\u0ad8\u0ae5\u0af3",
    "\u0b01\u0b0f\u0b1d\u0b2f\u0b31\u0b55\u0b57\u0b73\u0b75\u0b83\u0b85\u0b9d",
    "\u0b9f\u0baf\u0bc7\u0bcd\u0bd1\u0bd3\u0bd6\u0bec\u0bf7\u0bfd"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'abstract'", "'assert'", "'boolean'", "'break'", 
                     "'byte'", "'case'", "'catch'", "'char'", "'class'", 
                     "'const'", "'continue'", "'default'", "'do'", "'double'", 
                     "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
                     "'float'", "'for'", "'if'", "'goto'", "'implements'", 
                     "'import'", "'instanceof'", "'int'", "'interface'", 
                     "'long'", "'native'", "'new'", "'package'", "'private'", 
                     "'protected'", "'public'", "'return'", "'short'", "'static'", 
                     "'strictfp'", "'super'", "'switch'", "'synchronized'", 
                     "'this'", "'throw'", "'throws'", "'transient'", "'try'", 
                     "'void'", "'volatile'", "'while'", null, null, null, 
                     null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", 
                     "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", 
                     "'~'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", 
                     "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", 
                     "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", "'::'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'>>>='", null, "'@'", "'...'" ];

var symbolicNames = [ null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", 
                      "CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", 
                      "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", 
                      "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
                      "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", 
                      "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", 
                      "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", 
                      "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", 
                      "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "IntegerLiteral", "FloatingPointLiteral", 
                      "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
                      "NullLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                      "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", 
                      "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
                      "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", 
                      "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", 
                      "CARET", "MOD", "ARROW", "COLONCOLON", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
                      "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                      "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", "AT", 
                      "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT" ];

var ruleNames =  [ "translationunit", "literal", "integerLiteral", "floatingPointLiteral", 
                   "booleanLiteral", "stringLiteral", "characterLiteral", 
                   "nullLiteral", "type", "primitiveType", "numericType", 
                   "integralType", "floatingPointType", "referenceType", 
                   "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType", 
                   "classType_lfno_classOrInterfaceType", "interfaceType", 
                   "interfaceType_lf_classOrInterfaceType", "interfaceType_lfno_classOrInterfaceType", 
                   "typeVariable", "arrayType", "dims", "typeParameter", 
                   "typeParameterModifier", "typeBound", "additionalBound", 
                   "typeArguments", "typeArgumentList", "typeArgument", 
                   "wildcard", "wildcardBounds", "packageName", "typeName", 
                   "packageOrTypeName", "expressionName", "ambiguousName", 
                   "compilationUnit", "packageDeclaration", "packageModifier", 
                   "importDeclaration", "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", 
                   "singleStaticImportDeclaration", "staticImportOnDemandDeclaration", 
                   "typeDeclaration", "classDeclaration", "normalClassDeclaration", 
                   "className", "classModifiers", "classModifier", "typeParameters", 
                   "typeParameterList", "superclass", "superinterfaces", 
                   "interfaceTypeList", "classBody", "classBodyDeclaration", 
                   "classMemberDeclaration", "fieldDeclaration", "fieldModifiers", 
                   "fieldModifier", "variableDeclaratorList", "variableDeclarator", 
                   "variableDeclaratorId", "variableInitializer", "unannType", 
                   "unannPrimitiveType", "unannReferenceType", "unannClassOrInterfaceType", 
                   "unannClassType", "unannClassType_lf_unannClassOrInterfaceType", 
                   "unannClassType_lfno_unannClassOrInterfaceType", "unannInterfaceType", 
                   "unannInterfaceType_lf_unannClassOrInterfaceType", "unannInterfaceType_lfno_unannClassOrInterfaceType", 
                   "unannTypeVariable", "unannArrayType", "methodDeclaration", 
                   "methodModifier", "methodHeader", "result", "methodDeclarator", 
                   "methodName", "formalParameterList", "formalParameters", 
                   "formalParameter", "parameterDeclaratorIds", "parameterDeclaratorId", 
                   "parameterName", "variableModifier", "lastFormalParameter", 
                   "receiverParameter", "throws_", "exceptionTypeList", 
                   "exceptionType", "methodBody", "instanceInitializer", 
                   "staticInitializer", "constructorDeclaration", "constructorModifier", 
                   "constructorDeclarator", "simpleTypeName", "constructorBody", 
                   "explicitConstructorInvocation", "enumDeclaration", "enumBody", 
                   "enumConstantList", "enumConstant", "enumConstantModifier", 
                   "enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
                   "interfaceModifiers", "interfaceName", "interfaceModifier", 
                   "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration", 
                   "constantDeclaration", "constantModifiers", "constantModifier", 
                   "interfaceMethodDeclaration", "interfaceMethodModifiers", 
                   "interfaceMethodModifier", "annotationTypeDeclaration", 
                   "annotationTypeBody", "annotationTypeMemberDeclaration", 
                   "annotationTypeElementDeclaration", "annotationTypeElementModifier", 
                   "defaultValue", "annotation", "normalAnnotation", "elementValuePairList", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "elementValueList", "markerAnnotation", "singleElementAnnotation", 
                   "arrayInitializer", "variableInitializerList", "block", 
                   "blockStatements", "blockStatement", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "statement", "statementNoShortIf", 
                   "statementWithoutTrailingSubstatement", "emptyStatement", 
                   "labeledStatement", "labeledStatementNoShortIf", "expressionStatement", 
                   "statementExpression", "ifThenStatement", "ifThenElseStatement", 
                   "ifThenElseStatementNoShortIf", "assertStatement", "switchStatement", 
                   "switchBlock", "switchBlockStatementGroup", "switchLabels", 
                   "switchLabel", "enumConstantName", "whileStatement", 
                   "whileStatementNoShortIf", "doStatement", "forStatement", 
                   "forStatementNoShortIf", "basicForStatement", "basicForStatementNoShortIf", 
                   "forInit", "forUpdate", "statementExpressionList", "enhancedForStatement", 
                   "enhancedForStatementNoShortIf", "breakStatement", "continueStatement", 
                   "returnStatement", "throwStatement", "synchronizedStatement", 
                   "tryStatement", "catches", "catchClause", "catchFormalParameter", 
                   "catchType", "finally_", "tryWithResourcesStatement", 
                   "resourceSpecification", "resourceList", "resource", 
                   "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
                   "primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
                   "primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", 
                   "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
                   "primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
                   "primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", 
                   "classInstanceCreationExpression", "classInstanceCreationExpression_lf_primary", 
                   "classInstanceCreationExpression_lfno_primary", "typeArgumentsOrDiamond", 
                   "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary", 
                   "arrayAccess", "arrayAccess_lf_primary", "arrayAccess_lfno_primary", 
                   "methodInvocation", "receivers", "receiver", "ident", 
                   "methodInvocation_lf_primary", "methodInvocation_lfno_primary", 
                   "argumentList", "methodReference", "methodReference_lf_primary", 
                   "methodReference_lfno_primary", "arrayCreationExpression", 
                   "dimExprs", "dimExpr", "constantExpression", "expression", 
                   "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
                   "lambdaBody", "assignmentExpression", "assignment", "leftHandSide", 
                   "assignmentOperator", "conditionalExpression", "or", 
                   "conditionalOrExpression", "and", "conditionalAndExpression", 
                   "bitor", "inclusiveOrExpression", "caret", "exclusiveOrExpression", 
                   "bitand", "andExpression", "equal", "notequal", "equalityExpression", 
                   "lt", "gt", "le", "ge", "instanceof", "relationalExpression", 
                   "ltlt", "gtgt", "gtgtgt", "shiftExpression", "additiveExpression", 
                   "mul", "div", "mod", "multiplicativeExpression", "add", 
                   "sub", "unaryExpression", "inc", "preIncrementExpression", 
                   "dec", "preDecrementExpression", "tilde", "bang", "unaryExpressionNotPlusMinus", 
                   "postfixExpression", "postIncrementExpression", "postIncrementExpression_lf_postfixExpression", 
                   "postDecrementExpression", "postDecrementExpression_lf_postfixExpression", 
                   "castExpression" ];

function Java8Parser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

Java8Parser.prototype = Object.create(antlr4.Parser.prototype);
Java8Parser.prototype.constructor = Java8Parser;

Object.defineProperty(Java8Parser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

Java8Parser.EOF = antlr4.Token.EOF;
Java8Parser.ABSTRACT = 1;
Java8Parser.ASSERT = 2;
Java8Parser.BOOLEAN = 3;
Java8Parser.BREAK = 4;
Java8Parser.BYTE = 5;
Java8Parser.CASE = 6;
Java8Parser.CATCH = 7;
Java8Parser.CHAR = 8;
Java8Parser.CLASS = 9;
Java8Parser.CONST = 10;
Java8Parser.CONTINUE = 11;
Java8Parser.DEFAULT = 12;
Java8Parser.DO = 13;
Java8Parser.DOUBLE = 14;
Java8Parser.ELSE = 15;
Java8Parser.ENUM = 16;
Java8Parser.EXTENDS = 17;
Java8Parser.FINAL = 18;
Java8Parser.FINALLY = 19;
Java8Parser.FLOAT = 20;
Java8Parser.FOR = 21;
Java8Parser.IF = 22;
Java8Parser.GOTO = 23;
Java8Parser.IMPLEMENTS = 24;
Java8Parser.IMPORT = 25;
Java8Parser.INSTANCEOF = 26;
Java8Parser.INT = 27;
Java8Parser.INTERFACE = 28;
Java8Parser.LONG = 29;
Java8Parser.NATIVE = 30;
Java8Parser.NEW = 31;
Java8Parser.PACKAGE = 32;
Java8Parser.PRIVATE = 33;
Java8Parser.PROTECTED = 34;
Java8Parser.PUBLIC = 35;
Java8Parser.RETURN = 36;
Java8Parser.SHORT = 37;
Java8Parser.STATIC = 38;
Java8Parser.STRICTFP = 39;
Java8Parser.SUPER = 40;
Java8Parser.SWITCH = 41;
Java8Parser.SYNCHRONIZED = 42;
Java8Parser.THIS = 43;
Java8Parser.THROW = 44;
Java8Parser.THROWS = 45;
Java8Parser.TRANSIENT = 46;
Java8Parser.TRY = 47;
Java8Parser.VOID = 48;
Java8Parser.VOLATILE = 49;
Java8Parser.WHILE = 50;
Java8Parser.IntegerLiteral = 51;
Java8Parser.FloatingPointLiteral = 52;
Java8Parser.BooleanLiteral = 53;
Java8Parser.CharacterLiteral = 54;
Java8Parser.StringLiteral = 55;
Java8Parser.NullLiteral = 56;
Java8Parser.LPAREN = 57;
Java8Parser.RPAREN = 58;
Java8Parser.LBRACE = 59;
Java8Parser.RBRACE = 60;
Java8Parser.LBRACK = 61;
Java8Parser.RBRACK = 62;
Java8Parser.SEMI = 63;
Java8Parser.COMMA = 64;
Java8Parser.DOT = 65;
Java8Parser.ASSIGN = 66;
Java8Parser.GT = 67;
Java8Parser.LT = 68;
Java8Parser.BANG = 69;
Java8Parser.TILDE = 70;
Java8Parser.QUESTION = 71;
Java8Parser.COLON = 72;
Java8Parser.EQUAL = 73;
Java8Parser.LE = 74;
Java8Parser.GE = 75;
Java8Parser.NOTEQUAL = 76;
Java8Parser.AND = 77;
Java8Parser.OR = 78;
Java8Parser.INC = 79;
Java8Parser.DEC = 80;
Java8Parser.ADD = 81;
Java8Parser.SUB = 82;
Java8Parser.MUL = 83;
Java8Parser.DIV = 84;
Java8Parser.BITAND = 85;
Java8Parser.BITOR = 86;
Java8Parser.CARET = 87;
Java8Parser.MOD = 88;
Java8Parser.ARROW = 89;
Java8Parser.COLONCOLON = 90;
Java8Parser.ADD_ASSIGN = 91;
Java8Parser.SUB_ASSIGN = 92;
Java8Parser.MUL_ASSIGN = 93;
Java8Parser.DIV_ASSIGN = 94;
Java8Parser.AND_ASSIGN = 95;
Java8Parser.OR_ASSIGN = 96;
Java8Parser.XOR_ASSIGN = 97;
Java8Parser.MOD_ASSIGN = 98;
Java8Parser.LSHIFT_ASSIGN = 99;
Java8Parser.RSHIFT_ASSIGN = 100;
Java8Parser.URSHIFT_ASSIGN = 101;
Java8Parser.Identifier = 102;
Java8Parser.AT = 103;
Java8Parser.ELLIPSIS = 104;
Java8Parser.WS = 105;
Java8Parser.COMMENT = 106;
Java8Parser.LINE_COMMENT = 107;

Java8Parser.RULE_translationunit = 0;
Java8Parser.RULE_literal = 1;
Java8Parser.RULE_integerLiteral = 2;
Java8Parser.RULE_floatingPointLiteral = 3;
Java8Parser.RULE_booleanLiteral = 4;
Java8Parser.RULE_stringLiteral = 5;
Java8Parser.RULE_characterLiteral = 6;
Java8Parser.RULE_nullLiteral = 7;
Java8Parser.RULE_type = 8;
Java8Parser.RULE_primitiveType = 9;
Java8Parser.RULE_numericType = 10;
Java8Parser.RULE_integralType = 11;
Java8Parser.RULE_floatingPointType = 12;
Java8Parser.RULE_referenceType = 13;
Java8Parser.RULE_classOrInterfaceType = 14;
Java8Parser.RULE_classType = 15;
Java8Parser.RULE_classType_lf_classOrInterfaceType = 16;
Java8Parser.RULE_classType_lfno_classOrInterfaceType = 17;
Java8Parser.RULE_interfaceType = 18;
Java8Parser.RULE_interfaceType_lf_classOrInterfaceType = 19;
Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType = 20;
Java8Parser.RULE_typeVariable = 21;
Java8Parser.RULE_arrayType = 22;
Java8Parser.RULE_dims = 23;
Java8Parser.RULE_typeParameter = 24;
Java8Parser.RULE_typeParameterModifier = 25;
Java8Parser.RULE_typeBound = 26;
Java8Parser.RULE_additionalBound = 27;
Java8Parser.RULE_typeArguments = 28;
Java8Parser.RULE_typeArgumentList = 29;
Java8Parser.RULE_typeArgument = 30;
Java8Parser.RULE_wildcard = 31;
Java8Parser.RULE_wildcardBounds = 32;
Java8Parser.RULE_packageName = 33;
Java8Parser.RULE_typeName = 34;
Java8Parser.RULE_packageOrTypeName = 35;
Java8Parser.RULE_expressionName = 36;
Java8Parser.RULE_ambiguousName = 37;
Java8Parser.RULE_compilationUnit = 38;
Java8Parser.RULE_packageDeclaration = 39;
Java8Parser.RULE_packageModifier = 40;
Java8Parser.RULE_importDeclaration = 41;
Java8Parser.RULE_singleTypeImportDeclaration = 42;
Java8Parser.RULE_typeImportOnDemandDeclaration = 43;
Java8Parser.RULE_singleStaticImportDeclaration = 44;
Java8Parser.RULE_staticImportOnDemandDeclaration = 45;
Java8Parser.RULE_typeDeclaration = 46;
Java8Parser.RULE_classDeclaration = 47;
Java8Parser.RULE_normalClassDeclaration = 48;
Java8Parser.RULE_className = 49;
Java8Parser.RULE_classModifiers = 50;
Java8Parser.RULE_classModifier = 51;
Java8Parser.RULE_typeParameters = 52;
Java8Parser.RULE_typeParameterList = 53;
Java8Parser.RULE_superclass = 54;
Java8Parser.RULE_superinterfaces = 55;
Java8Parser.RULE_interfaceTypeList = 56;
Java8Parser.RULE_classBody = 57;
Java8Parser.RULE_classBodyDeclaration = 58;
Java8Parser.RULE_classMemberDeclaration = 59;
Java8Parser.RULE_fieldDeclaration = 60;
Java8Parser.RULE_fieldModifiers = 61;
Java8Parser.RULE_fieldModifier = 62;
Java8Parser.RULE_variableDeclaratorList = 63;
Java8Parser.RULE_variableDeclarator = 64;
Java8Parser.RULE_variableDeclaratorId = 65;
Java8Parser.RULE_variableInitializer = 66;
Java8Parser.RULE_unannType = 67;
Java8Parser.RULE_unannPrimitiveType = 68;
Java8Parser.RULE_unannReferenceType = 69;
Java8Parser.RULE_unannClassOrInterfaceType = 70;
Java8Parser.RULE_unannClassType = 71;
Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType = 72;
Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType = 73;
Java8Parser.RULE_unannInterfaceType = 74;
Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 75;
Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 76;
Java8Parser.RULE_unannTypeVariable = 77;
Java8Parser.RULE_unannArrayType = 78;
Java8Parser.RULE_methodDeclaration = 79;
Java8Parser.RULE_methodModifier = 80;
Java8Parser.RULE_methodHeader = 81;
Java8Parser.RULE_result = 82;
Java8Parser.RULE_methodDeclarator = 83;
Java8Parser.RULE_methodName = 84;
Java8Parser.RULE_formalParameterList = 85;
Java8Parser.RULE_formalParameters = 86;
Java8Parser.RULE_formalParameter = 87;
Java8Parser.RULE_parameterDeclaratorIds = 88;
Java8Parser.RULE_parameterDeclaratorId = 89;
Java8Parser.RULE_parameterName = 90;
Java8Parser.RULE_variableModifier = 91;
Java8Parser.RULE_lastFormalParameter = 92;
Java8Parser.RULE_receiverParameter = 93;
Java8Parser.RULE_throws_ = 94;
Java8Parser.RULE_exceptionTypeList = 95;
Java8Parser.RULE_exceptionType = 96;
Java8Parser.RULE_methodBody = 97;
Java8Parser.RULE_instanceInitializer = 98;
Java8Parser.RULE_staticInitializer = 99;
Java8Parser.RULE_constructorDeclaration = 100;
Java8Parser.RULE_constructorModifier = 101;
Java8Parser.RULE_constructorDeclarator = 102;
Java8Parser.RULE_simpleTypeName = 103;
Java8Parser.RULE_constructorBody = 104;
Java8Parser.RULE_explicitConstructorInvocation = 105;
Java8Parser.RULE_enumDeclaration = 106;
Java8Parser.RULE_enumBody = 107;
Java8Parser.RULE_enumConstantList = 108;
Java8Parser.RULE_enumConstant = 109;
Java8Parser.RULE_enumConstantModifier = 110;
Java8Parser.RULE_enumBodyDeclarations = 111;
Java8Parser.RULE_interfaceDeclaration = 112;
Java8Parser.RULE_normalInterfaceDeclaration = 113;
Java8Parser.RULE_interfaceModifiers = 114;
Java8Parser.RULE_interfaceName = 115;
Java8Parser.RULE_interfaceModifier = 116;
Java8Parser.RULE_extendsInterfaces = 117;
Java8Parser.RULE_interfaceBody = 118;
Java8Parser.RULE_interfaceMemberDeclaration = 119;
Java8Parser.RULE_constantDeclaration = 120;
Java8Parser.RULE_constantModifiers = 121;
Java8Parser.RULE_constantModifier = 122;
Java8Parser.RULE_interfaceMethodDeclaration = 123;
Java8Parser.RULE_interfaceMethodModifiers = 124;
Java8Parser.RULE_interfaceMethodModifier = 125;
Java8Parser.RULE_annotationTypeDeclaration = 126;
Java8Parser.RULE_annotationTypeBody = 127;
Java8Parser.RULE_annotationTypeMemberDeclaration = 128;
Java8Parser.RULE_annotationTypeElementDeclaration = 129;
Java8Parser.RULE_annotationTypeElementModifier = 130;
Java8Parser.RULE_defaultValue = 131;
Java8Parser.RULE_annotation = 132;
Java8Parser.RULE_normalAnnotation = 133;
Java8Parser.RULE_elementValuePairList = 134;
Java8Parser.RULE_elementValuePair = 135;
Java8Parser.RULE_elementValue = 136;
Java8Parser.RULE_elementValueArrayInitializer = 137;
Java8Parser.RULE_elementValueList = 138;
Java8Parser.RULE_markerAnnotation = 139;
Java8Parser.RULE_singleElementAnnotation = 140;
Java8Parser.RULE_arrayInitializer = 141;
Java8Parser.RULE_variableInitializerList = 142;
Java8Parser.RULE_block = 143;
Java8Parser.RULE_blockStatements = 144;
Java8Parser.RULE_blockStatement = 145;
Java8Parser.RULE_localVariableDeclarationStatement = 146;
Java8Parser.RULE_localVariableDeclaration = 147;
Java8Parser.RULE_statement = 148;
Java8Parser.RULE_statementNoShortIf = 149;
Java8Parser.RULE_statementWithoutTrailingSubstatement = 150;
Java8Parser.RULE_emptyStatement = 151;
Java8Parser.RULE_labeledStatement = 152;
Java8Parser.RULE_labeledStatementNoShortIf = 153;
Java8Parser.RULE_expressionStatement = 154;
Java8Parser.RULE_statementExpression = 155;
Java8Parser.RULE_ifThenStatement = 156;
Java8Parser.RULE_ifThenElseStatement = 157;
Java8Parser.RULE_ifThenElseStatementNoShortIf = 158;
Java8Parser.RULE_assertStatement = 159;
Java8Parser.RULE_switchStatement = 160;
Java8Parser.RULE_switchBlock = 161;
Java8Parser.RULE_switchBlockStatementGroup = 162;
Java8Parser.RULE_switchLabels = 163;
Java8Parser.RULE_switchLabel = 164;
Java8Parser.RULE_enumConstantName = 165;
Java8Parser.RULE_whileStatement = 166;
Java8Parser.RULE_whileStatementNoShortIf = 167;
Java8Parser.RULE_doStatement = 168;
Java8Parser.RULE_forStatement = 169;
Java8Parser.RULE_forStatementNoShortIf = 170;
Java8Parser.RULE_basicForStatement = 171;
Java8Parser.RULE_basicForStatementNoShortIf = 172;
Java8Parser.RULE_forInit = 173;
Java8Parser.RULE_forUpdate = 174;
Java8Parser.RULE_statementExpressionList = 175;
Java8Parser.RULE_enhancedForStatement = 176;
Java8Parser.RULE_enhancedForStatementNoShortIf = 177;
Java8Parser.RULE_breakStatement = 178;
Java8Parser.RULE_continueStatement = 179;
Java8Parser.RULE_returnStatement = 180;
Java8Parser.RULE_throwStatement = 181;
Java8Parser.RULE_synchronizedStatement = 182;
Java8Parser.RULE_tryStatement = 183;
Java8Parser.RULE_catches = 184;
Java8Parser.RULE_catchClause = 185;
Java8Parser.RULE_catchFormalParameter = 186;
Java8Parser.RULE_catchType = 187;
Java8Parser.RULE_finally_ = 188;
Java8Parser.RULE_tryWithResourcesStatement = 189;
Java8Parser.RULE_resourceSpecification = 190;
Java8Parser.RULE_resourceList = 191;
Java8Parser.RULE_resource = 192;
Java8Parser.RULE_primary = 193;
Java8Parser.RULE_primaryNoNewArray = 194;
Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess = 195;
Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess = 196;
Java8Parser.RULE_primaryNoNewArray_lf_primary = 197;
Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 198;
Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 199;
Java8Parser.RULE_primaryNoNewArray_lfno_primary = 200;
Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 201;
Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 202;
Java8Parser.RULE_classInstanceCreationExpression = 203;
Java8Parser.RULE_classInstanceCreationExpression_lf_primary = 204;
Java8Parser.RULE_classInstanceCreationExpression_lfno_primary = 205;
Java8Parser.RULE_typeArgumentsOrDiamond = 206;
Java8Parser.RULE_fieldAccess = 207;
Java8Parser.RULE_fieldAccess_lf_primary = 208;
Java8Parser.RULE_fieldAccess_lfno_primary = 209;
Java8Parser.RULE_arrayAccess = 210;
Java8Parser.RULE_arrayAccess_lf_primary = 211;
Java8Parser.RULE_arrayAccess_lfno_primary = 212;
Java8Parser.RULE_methodInvocation = 213;
Java8Parser.RULE_receivers = 214;
Java8Parser.RULE_receiver = 215;
Java8Parser.RULE_ident = 216;
Java8Parser.RULE_methodInvocation_lf_primary = 217;
Java8Parser.RULE_methodInvocation_lfno_primary = 218;
Java8Parser.RULE_argumentList = 219;
Java8Parser.RULE_methodReference = 220;
Java8Parser.RULE_methodReference_lf_primary = 221;
Java8Parser.RULE_methodReference_lfno_primary = 222;
Java8Parser.RULE_arrayCreationExpression = 223;
Java8Parser.RULE_dimExprs = 224;
Java8Parser.RULE_dimExpr = 225;
Java8Parser.RULE_constantExpression = 226;
Java8Parser.RULE_expression = 227;
Java8Parser.RULE_lambdaExpression = 228;
Java8Parser.RULE_lambdaParameters = 229;
Java8Parser.RULE_inferredFormalParameterList = 230;
Java8Parser.RULE_lambdaBody = 231;
Java8Parser.RULE_assignmentExpression = 232;
Java8Parser.RULE_assignment = 233;
Java8Parser.RULE_leftHandSide = 234;
Java8Parser.RULE_assignmentOperator = 235;
Java8Parser.RULE_conditionalExpression = 236;
Java8Parser.RULE_or = 237;
Java8Parser.RULE_conditionalOrExpression = 238;
Java8Parser.RULE_and = 239;
Java8Parser.RULE_conditionalAndExpression = 240;
Java8Parser.RULE_bitor = 241;
Java8Parser.RULE_inclusiveOrExpression = 242;
Java8Parser.RULE_caret = 243;
Java8Parser.RULE_exclusiveOrExpression = 244;
Java8Parser.RULE_bitand = 245;
Java8Parser.RULE_andExpression = 246;
Java8Parser.RULE_equal = 247;
Java8Parser.RULE_notequal = 248;
Java8Parser.RULE_equalityExpression = 249;
Java8Parser.RULE_lt = 250;
Java8Parser.RULE_gt = 251;
Java8Parser.RULE_le = 252;
Java8Parser.RULE_ge = 253;
Java8Parser.RULE_instanceof = 254;
Java8Parser.RULE_relationalExpression = 255;
Java8Parser.RULE_ltlt = 256;
Java8Parser.RULE_gtgt = 257;
Java8Parser.RULE_gtgtgt = 258;
Java8Parser.RULE_shiftExpression = 259;
Java8Parser.RULE_additiveExpression = 260;
Java8Parser.RULE_mul = 261;
Java8Parser.RULE_div = 262;
Java8Parser.RULE_mod = 263;
Java8Parser.RULE_multiplicativeExpression = 264;
Java8Parser.RULE_add = 265;
Java8Parser.RULE_sub = 266;
Java8Parser.RULE_unaryExpression = 267;
Java8Parser.RULE_inc = 268;
Java8Parser.RULE_preIncrementExpression = 269;
Java8Parser.RULE_dec = 270;
Java8Parser.RULE_preDecrementExpression = 271;
Java8Parser.RULE_tilde = 272;
Java8Parser.RULE_bang = 273;
Java8Parser.RULE_unaryExpressionNotPlusMinus = 274;
Java8Parser.RULE_postfixExpression = 275;
Java8Parser.RULE_postIncrementExpression = 276;
Java8Parser.RULE_postIncrementExpression_lf_postfixExpression = 277;
Java8Parser.RULE_postDecrementExpression = 278;
Java8Parser.RULE_postDecrementExpression_lf_postfixExpression = 279;
Java8Parser.RULE_castExpression = 280;

function TranslationunitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_translationunit;
    return this;
}

TranslationunitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TranslationunitContext.prototype.constructor = TranslationunitContext;

TranslationunitContext.prototype.compilationUnit = function() {
    return this.getTypedRuleContext(CompilationUnitContext,0);
};

TranslationunitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTranslationunit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TranslationunitContext = TranslationunitContext;

Java8Parser.prototype.translationunit = function() {

    var localctx = new TranslationunitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, Java8Parser.RULE_translationunit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 562;
            this.compilationUnit();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.integerLiteral = function() {
    return this.getTypedRuleContext(IntegerLiteralContext,0);
};

LiteralContext.prototype.floatingPointLiteral = function() {
    return this.getTypedRuleContext(FloatingPointLiteralContext,0);
};

LiteralContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

LiteralContext.prototype.characterLiteral = function() {
    return this.getTypedRuleContext(CharacterLiteralContext,0);
};

LiteralContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

LiteralContext.prototype.nullLiteral = function() {
    return this.getTypedRuleContext(NullLiteralContext,0);
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LiteralContext = LiteralContext;

Java8Parser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, Java8Parser.RULE_literal);
    try {
        this.state = 571;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.IntegerLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 565;
            this.integerLiteral();
            break;
        case Java8Parser.FloatingPointLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 566;
            this.floatingPointLiteral();
            break;
        case Java8Parser.BooleanLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 567;
            this.booleanLiteral();
            break;
        case Java8Parser.CharacterLiteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 568;
            this.characterLiteral();
            break;
        case Java8Parser.StringLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 569;
            this.stringLiteral();
            break;
        case Java8Parser.NullLiteral:
            this.enterOuterAlt(localctx, 6);
            this.state = 570;
            this.nullLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegerLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_integerLiteral;
    return this;
}

IntegerLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

IntegerLiteralContext.prototype.IntegerLiteral = function() {
    return this.getToken(Java8Parser.IntegerLiteral, 0);
};

IntegerLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitIntegerLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.IntegerLiteralContext = IntegerLiteralContext;

Java8Parser.prototype.integerLiteral = function() {

    var localctx = new IntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, Java8Parser.RULE_integerLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this.match(Java8Parser.IntegerLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FloatingPointLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_floatingPointLiteral;
    return this;
}

FloatingPointLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloatingPointLiteralContext.prototype.constructor = FloatingPointLiteralContext;

FloatingPointLiteralContext.prototype.FloatingPointLiteral = function() {
    return this.getToken(Java8Parser.FloatingPointLiteral, 0);
};

FloatingPointLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFloatingPointLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FloatingPointLiteralContext = FloatingPointLiteralContext;

Java8Parser.prototype.floatingPointLiteral = function() {

    var localctx = new FloatingPointLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, Java8Parser.RULE_floatingPointLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this.match(Java8Parser.FloatingPointLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(Java8Parser.BooleanLiteral, 0);
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.BooleanLiteralContext = BooleanLiteralContext;

Java8Parser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, Java8Parser.RULE_booleanLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 577;
        this.match(Java8Parser.BooleanLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.StringLiteral = function() {
    return this.getToken(Java8Parser.StringLiteral, 0);
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.StringLiteralContext = StringLiteralContext;

Java8Parser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, Java8Parser.RULE_stringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 579;
        this.match(Java8Parser.StringLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CharacterLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_characterLiteral;
    return this;
}

CharacterLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharacterLiteralContext.prototype.constructor = CharacterLiteralContext;

CharacterLiteralContext.prototype.CharacterLiteral = function() {
    return this.getToken(Java8Parser.CharacterLiteral, 0);
};

CharacterLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitCharacterLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.CharacterLiteralContext = CharacterLiteralContext;

Java8Parser.prototype.characterLiteral = function() {

    var localctx = new CharacterLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, Java8Parser.RULE_characterLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 581;
        this.match(Java8Parser.CharacterLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NullLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_nullLiteral;
    return this;
}

NullLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

NullLiteralContext.prototype.NullLiteral = function() {
    return this.getToken(Java8Parser.NullLiteral, 0);
};

NullLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitNullLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.NullLiteralContext = NullLiteralContext;

Java8Parser.prototype.nullLiteral = function() {

    var localctx = new NullLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, Java8Parser.RULE_nullLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this.match(Java8Parser.NullLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

TypeContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

TypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeContext = TypeContext;

Java8Parser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, Java8Parser.RULE_type);
    try {
        this.state = 587;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 585;
            this.primitiveType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 586;
            this.referenceType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimitiveTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primitiveType;
    return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;

PrimitiveTypeContext.prototype.numericType = function() {
    return this.getTypedRuleContext(NumericTypeContext,0);
};

PrimitiveTypeContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

PrimitiveTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimitiveType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimitiveTypeContext = PrimitiveTypeContext;

Java8Parser.prototype.primitiveType = function() {

    var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, Java8Parser.RULE_primitiveType);
    var _la = 0; // Token type
    try {
        this.state = 603;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 592;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 589;
                this.annotation();
                this.state = 594;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 595;
            this.numericType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 596;
                this.annotation();
                this.state = 601;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 602;
            this.match(Java8Parser.BOOLEAN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_numericType;
    return this;
}

NumericTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericTypeContext.prototype.constructor = NumericTypeContext;

NumericTypeContext.prototype.integralType = function() {
    return this.getTypedRuleContext(IntegralTypeContext,0);
};

NumericTypeContext.prototype.floatingPointType = function() {
    return this.getTypedRuleContext(FloatingPointTypeContext,0);
};

NumericTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitNumericType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.NumericTypeContext = NumericTypeContext;

Java8Parser.prototype.numericType = function() {

    var localctx = new NumericTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, Java8Parser.RULE_numericType);
    try {
        this.state = 607;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.BYTE:
        case Java8Parser.CHAR:
        case Java8Parser.INT:
        case Java8Parser.LONG:
        case Java8Parser.SHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 605;
            this.integralType();
            break;
        case Java8Parser.DOUBLE:
        case Java8Parser.FLOAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 606;
            this.floatingPointType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegralTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_integralType;
    return this;
}

IntegralTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegralTypeContext.prototype.constructor = IntegralTypeContext;


IntegralTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitIntegralType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.IntegralTypeContext = IntegralTypeContext;

Java8Parser.prototype.integralType = function() {

    var localctx = new IntegralTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, Java8Parser.RULE_integralType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la===Java8Parser.SHORT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FloatingPointTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_floatingPointType;
    return this;
}

FloatingPointTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloatingPointTypeContext.prototype.constructor = FloatingPointTypeContext;


FloatingPointTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFloatingPointType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FloatingPointTypeContext = FloatingPointTypeContext;

Java8Parser.prototype.floatingPointType = function() {

    var localctx = new FloatingPointTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, Java8Parser.RULE_floatingPointType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 611;
        _la = this._input.LA(1);
        if(!(_la===Java8Parser.DOUBLE || _la===Java8Parser.FLOAT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReferenceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_referenceType;
    return this;
}

ReferenceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceTypeContext.prototype.constructor = ReferenceTypeContext;

ReferenceTypeContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

ReferenceTypeContext.prototype.typeVariable = function() {
    return this.getTypedRuleContext(TypeVariableContext,0);
};

ReferenceTypeContext.prototype.arrayType = function() {
    return this.getTypedRuleContext(ArrayTypeContext,0);
};

ReferenceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitReferenceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ReferenceTypeContext = ReferenceTypeContext;

Java8Parser.prototype.referenceType = function() {

    var localctx = new ReferenceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, Java8Parser.RULE_referenceType);
    try {
        this.state = 616;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 613;
            this.classOrInterfaceType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 614;
            this.typeVariable();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 615;
            this.arrayType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classOrInterfaceType;
    return this;
}

ClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceTypeContext.prototype.constructor = ClassOrInterfaceTypeContext;

ClassOrInterfaceTypeContext.prototype.classType_lfno_classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassType_lfno_classOrInterfaceTypeContext,0);
};

ClassOrInterfaceTypeContext.prototype.interfaceType_lfno_classOrInterfaceType = function() {
    return this.getTypedRuleContext(InterfaceType_lfno_classOrInterfaceTypeContext,0);
};

ClassOrInterfaceTypeContext.prototype.classType_lf_classOrInterfaceType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassType_lf_classOrInterfaceTypeContext);
    } else {
        return this.getTypedRuleContext(ClassType_lf_classOrInterfaceTypeContext,i);
    }
};

ClassOrInterfaceTypeContext.prototype.interfaceType_lf_classOrInterfaceType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceType_lf_classOrInterfaceTypeContext);
    } else {
        return this.getTypedRuleContext(InterfaceType_lf_classOrInterfaceTypeContext,i);
    }
};

ClassOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext;

Java8Parser.prototype.classOrInterfaceType = function() {

    var localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, Java8Parser.RULE_classOrInterfaceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 620;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.state = 618;
            this.classType_lfno_classOrInterfaceType();
            break;

        case 2:
            this.state = 619;
            this.interfaceType_lfno_classOrInterfaceType();
            break;

        }
        this.state = 626;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 624;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 622;
                    this.classType_lf_classOrInterfaceType();
                    break;

                case 2:
                    this.state = 623;
                    this.interfaceType_lf_classOrInterfaceType();
                    break;

                } 
            }
            this.state = 628;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classType;
    return this;
}

ClassTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTypeContext.prototype.constructor = ClassTypeContext;

ClassTypeContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

ClassTypeContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

ClassTypeContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

ClassTypeContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

ClassTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassTypeContext = ClassTypeContext;

Java8Parser.prototype.classType = function() {

    var localctx = new ClassTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, Java8Parser.RULE_classType);
    var _la = 0; // Token type
    try {
        this.state = 651;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 632;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 629;
                this.annotation();
                this.state = 634;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 635;
            this.match(Java8Parser.Identifier);
            this.state = 637;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 636;
                this.typeArguments();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 639;
            this.classOrInterfaceType();
            this.state = 640;
            this.match(Java8Parser.DOT);
            this.state = 644;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 641;
                this.annotation();
                this.state = 646;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 647;
            this.match(Java8Parser.Identifier);
            this.state = 649;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 648;
                this.typeArguments();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassType_lf_classOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classType_lf_classOrInterfaceType;
    return this;
}

ClassType_lf_classOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassType_lf_classOrInterfaceTypeContext.prototype.constructor = ClassType_lf_classOrInterfaceTypeContext;

ClassType_lf_classOrInterfaceTypeContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

ClassType_lf_classOrInterfaceTypeContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

ClassType_lf_classOrInterfaceTypeContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

ClassType_lf_classOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassType_lf_classOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassType_lf_classOrInterfaceTypeContext = ClassType_lf_classOrInterfaceTypeContext;

Java8Parser.prototype.classType_lf_classOrInterfaceType = function() {

    var localctx = new ClassType_lf_classOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, Java8Parser.RULE_classType_lf_classOrInterfaceType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 653;
        this.match(Java8Parser.DOT);
        this.state = 657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 654;
            this.annotation();
            this.state = 659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 660;
        this.match(Java8Parser.Identifier);
        this.state = 662;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        if(la_===1) {
            this.state = 661;
            this.typeArguments();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassType_lfno_classOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classType_lfno_classOrInterfaceType;
    return this;
}

ClassType_lfno_classOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassType_lfno_classOrInterfaceTypeContext.prototype.constructor = ClassType_lfno_classOrInterfaceTypeContext;

ClassType_lfno_classOrInterfaceTypeContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

ClassType_lfno_classOrInterfaceTypeContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

ClassType_lfno_classOrInterfaceTypeContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

ClassType_lfno_classOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassType_lfno_classOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassType_lfno_classOrInterfaceTypeContext = ClassType_lfno_classOrInterfaceTypeContext;

Java8Parser.prototype.classType_lfno_classOrInterfaceType = function() {

    var localctx = new ClassType_lfno_classOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, Java8Parser.RULE_classType_lfno_classOrInterfaceType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 667;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 664;
            this.annotation();
            this.state = 669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 670;
        this.match(Java8Parser.Identifier);
        this.state = 672;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 671;
            this.typeArguments();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceType;
    return this;
}

InterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceTypeContext.prototype.constructor = InterfaceTypeContext;

InterfaceTypeContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

InterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceTypeContext = InterfaceTypeContext;

Java8Parser.prototype.interfaceType = function() {

    var localctx = new InterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, Java8Parser.RULE_interfaceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 674;
        this.classType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceType_lf_classOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceType_lf_classOrInterfaceType;
    return this;
}

InterfaceType_lf_classOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceType_lf_classOrInterfaceTypeContext.prototype.constructor = InterfaceType_lf_classOrInterfaceTypeContext;

InterfaceType_lf_classOrInterfaceTypeContext.prototype.classType_lf_classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassType_lf_classOrInterfaceTypeContext,0);
};

InterfaceType_lf_classOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceType_lf_classOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceType_lf_classOrInterfaceTypeContext = InterfaceType_lf_classOrInterfaceTypeContext;

Java8Parser.prototype.interfaceType_lf_classOrInterfaceType = function() {

    var localctx = new InterfaceType_lf_classOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, Java8Parser.RULE_interfaceType_lf_classOrInterfaceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 676;
        this.classType_lf_classOrInterfaceType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceType_lfno_classOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType;
    return this;
}

InterfaceType_lfno_classOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceType_lfno_classOrInterfaceTypeContext.prototype.constructor = InterfaceType_lfno_classOrInterfaceTypeContext;

InterfaceType_lfno_classOrInterfaceTypeContext.prototype.classType_lfno_classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassType_lfno_classOrInterfaceTypeContext,0);
};

InterfaceType_lfno_classOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceType_lfno_classOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceType_lfno_classOrInterfaceTypeContext = InterfaceType_lfno_classOrInterfaceTypeContext;

Java8Parser.prototype.interfaceType_lfno_classOrInterfaceType = function() {

    var localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 678;
        this.classType_lfno_classOrInterfaceType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeVariable;
    return this;
}

TypeVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeVariableContext.prototype.constructor = TypeVariableContext;

TypeVariableContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

TypeVariableContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

TypeVariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeVariableContext = TypeVariableContext;

Java8Parser.prototype.typeVariable = function() {

    var localctx = new TypeVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, Java8Parser.RULE_typeVariable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 683;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 680;
            this.annotation();
            this.state = 685;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 686;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_arrayType;
    return this;
}

ArrayTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayTypeContext.prototype.constructor = ArrayTypeContext;

ArrayTypeContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

ArrayTypeContext.prototype.dims = function() {
    return this.getTypedRuleContext(DimsContext,0);
};

ArrayTypeContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

ArrayTypeContext.prototype.typeVariable = function() {
    return this.getTypedRuleContext(TypeVariableContext,0);
};

ArrayTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitArrayType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ArrayTypeContext = ArrayTypeContext;

Java8Parser.prototype.arrayType = function() {

    var localctx = new ArrayTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, Java8Parser.RULE_arrayType);
    try {
        this.state = 697;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 688;
            this.primitiveType();
            this.state = 689;
            this.dims();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 691;
            this.classOrInterfaceType();
            this.state = 692;
            this.dims();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 694;
            this.typeVariable();
            this.state = 695;
            this.dims();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_dims;
    return this;
}

DimsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimsContext.prototype.constructor = DimsContext;

DimsContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

DimsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitDims(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.DimsContext = DimsContext;

Java8Parser.prototype.dims = function() {

    var localctx = new DimsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, Java8Parser.RULE_dims);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 702;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 699;
            this.annotation();
            this.state = 704;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 705;
        this.match(Java8Parser.LBRACK);
        this.state = 706;
        this.match(Java8Parser.RBRACK);
        this.state = 717;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 710;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===Java8Parser.AT) {
                    this.state = 707;
                    this.annotation();
                    this.state = 712;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 713;
                this.match(Java8Parser.LBRACK);
                this.state = 714;
                this.match(Java8Parser.RBRACK); 
            }
            this.state = 719;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

TypeParameterContext.prototype.typeParameterModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterModifierContext);
    } else {
        return this.getTypedRuleContext(TypeParameterModifierContext,i);
    }
};

TypeParameterContext.prototype.typeBound = function() {
    return this.getTypedRuleContext(TypeBoundContext,0);
};

TypeParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeParameterContext = TypeParameterContext;

Java8Parser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, Java8Parser.RULE_typeParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 723;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 720;
            this.typeParameterModifier();
            this.state = 725;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 726;
        this.match(Java8Parser.Identifier);
        this.state = 728;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.EXTENDS) {
            this.state = 727;
            this.typeBound();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeParameterModifier;
    return this;
}

TypeParameterModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterModifierContext.prototype.constructor = TypeParameterModifierContext;

TypeParameterModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

TypeParameterModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeParameterModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeParameterModifierContext = TypeParameterModifierContext;

Java8Parser.prototype.typeParameterModifier = function() {

    var localctx = new TypeParameterModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, Java8Parser.RULE_typeParameterModifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 730;
        this.annotation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeBound;
    return this;
}

TypeBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeBoundContext.prototype.constructor = TypeBoundContext;

TypeBoundContext.prototype.typeVariable = function() {
    return this.getTypedRuleContext(TypeVariableContext,0);
};

TypeBoundContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

TypeBoundContext.prototype.additionalBound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AdditionalBoundContext);
    } else {
        return this.getTypedRuleContext(AdditionalBoundContext,i);
    }
};

TypeBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeBound(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeBoundContext = TypeBoundContext;

Java8Parser.prototype.typeBound = function() {

    var localctx = new TypeBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, Java8Parser.RULE_typeBound);
    var _la = 0; // Token type
    try {
        this.state = 742;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 732;
            this.match(Java8Parser.EXTENDS);
            this.state = 733;
            this.typeVariable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 734;
            this.match(Java8Parser.EXTENDS);
            this.state = 735;
            this.classOrInterfaceType();
            this.state = 739;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.BITAND) {
                this.state = 736;
                this.additionalBound();
                this.state = 741;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AdditionalBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_additionalBound;
    return this;
}

AdditionalBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditionalBoundContext.prototype.constructor = AdditionalBoundContext;

AdditionalBoundContext.prototype.interfaceType = function() {
    return this.getTypedRuleContext(InterfaceTypeContext,0);
};

AdditionalBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAdditionalBound(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AdditionalBoundContext = AdditionalBoundContext;

Java8Parser.prototype.additionalBound = function() {

    var localctx = new AdditionalBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, Java8Parser.RULE_additionalBound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 744;
        this.match(Java8Parser.BITAND);
        this.state = 745;
        this.interfaceType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.typeArgumentList = function() {
    return this.getTypedRuleContext(TypeArgumentListContext,0);
};

TypeArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeArgumentsContext = TypeArgumentsContext;

Java8Parser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, Java8Parser.RULE_typeArguments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this.match(Java8Parser.LT);
        this.state = 748;
        this.typeArgumentList();
        this.state = 749;
        this.match(Java8Parser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeArgumentList;
    return this;
}

TypeArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentListContext.prototype.constructor = TypeArgumentListContext;

TypeArgumentListContext.prototype.typeArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentContext,i);
    }
};

TypeArgumentListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeArgumentList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeArgumentListContext = TypeArgumentListContext;

Java8Parser.prototype.typeArgumentList = function() {

    var localctx = new TypeArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, Java8Parser.RULE_typeArgumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 751;
        this.typeArgument();
        this.state = 756;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.COMMA) {
            this.state = 752;
            this.match(Java8Parser.COMMA);
            this.state = 753;
            this.typeArgument();
            this.state = 758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeArgument;
    return this;
}

TypeArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentContext.prototype.constructor = TypeArgumentContext;

TypeArgumentContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

TypeArgumentContext.prototype.wildcard = function() {
    return this.getTypedRuleContext(WildcardContext,0);
};

TypeArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeArgumentContext = TypeArgumentContext;

Java8Parser.prototype.typeArgument = function() {

    var localctx = new TypeArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, Java8Parser.RULE_typeArgument);
    try {
        this.state = 761;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 759;
            this.referenceType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 760;
            this.wildcard();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WildcardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_wildcard;
    return this;
}

WildcardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WildcardContext.prototype.constructor = WildcardContext;

WildcardContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

WildcardContext.prototype.wildcardBounds = function() {
    return this.getTypedRuleContext(WildcardBoundsContext,0);
};

WildcardContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitWildcard(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.WildcardContext = WildcardContext;

Java8Parser.prototype.wildcard = function() {

    var localctx = new WildcardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, Java8Parser.RULE_wildcard);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 766;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 763;
            this.annotation();
            this.state = 768;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 769;
        this.match(Java8Parser.QUESTION);
        this.state = 771;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.EXTENDS || _la===Java8Parser.SUPER) {
            this.state = 770;
            this.wildcardBounds();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WildcardBoundsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_wildcardBounds;
    return this;
}

WildcardBoundsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WildcardBoundsContext.prototype.constructor = WildcardBoundsContext;

WildcardBoundsContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

WildcardBoundsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitWildcardBounds(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.WildcardBoundsContext = WildcardBoundsContext;

Java8Parser.prototype.wildcardBounds = function() {

    var localctx = new WildcardBoundsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, Java8Parser.RULE_wildcardBounds);
    try {
        this.state = 777;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.EXTENDS:
            this.enterOuterAlt(localctx, 1);
            this.state = 773;
            this.match(Java8Parser.EXTENDS);
            this.state = 774;
            this.referenceType();
            break;
        case Java8Parser.SUPER:
            this.enterOuterAlt(localctx, 2);
            this.state = 775;
            this.match(Java8Parser.SUPER);
            this.state = 776;
            this.referenceType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PackageNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_packageName;
    return this;
}

PackageNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageNameContext.prototype.constructor = PackageNameContext;

PackageNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

PackageNameContext.prototype.packageName = function() {
    return this.getTypedRuleContext(PackageNameContext,0);
};

PackageNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPackageName(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.packageName = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PackageNameContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 66;
    this.enterRecursionRule(localctx, 66, Java8Parser.RULE_packageName, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 780;
        this.match(Java8Parser.Identifier);
        this._ctx.stop = this._input.LT(-1);
        this.state = 787;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PackageNameContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_packageName);
                this.state = 782;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 783;
                this.match(Java8Parser.DOT);
                this.state = 784;
                this.match(Java8Parser.Identifier); 
            }
            this.state = 789;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

TypeNameContext.prototype.packageOrTypeName = function() {
    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
};

TypeNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeNameContext = TypeNameContext;

Java8Parser.prototype.typeName = function() {

    var localctx = new TypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, Java8Parser.RULE_typeName);
    try {
        this.state = 795;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 790;
            this.match(Java8Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 791;
            this.packageOrTypeName(0);
            this.state = 792;
            this.match(Java8Parser.DOT);
            this.state = 793;
            this.match(Java8Parser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PackageOrTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_packageOrTypeName;
    return this;
}

PackageOrTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageOrTypeNameContext.prototype.constructor = PackageOrTypeNameContext;

PackageOrTypeNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

PackageOrTypeNameContext.prototype.packageOrTypeName = function() {
    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
};

PackageOrTypeNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPackageOrTypeName(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.packageOrTypeName = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PackageOrTypeNameContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 70;
    this.enterRecursionRule(localctx, 70, Java8Parser.RULE_packageOrTypeName, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 798;
        this.match(Java8Parser.Identifier);
        this._ctx.stop = this._input.LT(-1);
        this.state = 805;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PackageOrTypeNameContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_packageOrTypeName);
                this.state = 800;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 801;
                this.match(Java8Parser.DOT);
                this.state = 802;
                this.match(Java8Parser.Identifier); 
            }
            this.state = 807;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExpressionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_expressionName;
    return this;
}

ExpressionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionNameContext.prototype.constructor = ExpressionNameContext;

ExpressionNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

ExpressionNameContext.prototype.ambiguousName = function() {
    return this.getTypedRuleContext(AmbiguousNameContext,0);
};

ExpressionNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitExpressionName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ExpressionNameContext = ExpressionNameContext;

Java8Parser.prototype.expressionName = function() {

    var localctx = new ExpressionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, Java8Parser.RULE_expressionName);
    try {
        this.state = 813;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 808;
            this.match(Java8Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 809;
            this.ambiguousName(0);
            this.state = 810;
            this.match(Java8Parser.DOT);
            this.state = 811;
            this.match(Java8Parser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AmbiguousNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_ambiguousName;
    return this;
}

AmbiguousNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AmbiguousNameContext.prototype.constructor = AmbiguousNameContext;

AmbiguousNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

AmbiguousNameContext.prototype.ambiguousName = function() {
    return this.getTypedRuleContext(AmbiguousNameContext,0);
};

AmbiguousNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAmbiguousName(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.ambiguousName = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AmbiguousNameContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, Java8Parser.RULE_ambiguousName, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 816;
        this.match(Java8Parser.Identifier);
        this._ctx.stop = this._input.LT(-1);
        this.state = 823;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AmbiguousNameContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_ambiguousName);
                this.state = 818;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 819;
                this.match(Java8Parser.DOT);
                this.state = 820;
                this.match(Java8Parser.Identifier); 
            }
            this.state = 825;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.packageDeclaration = function() {
    return this.getTypedRuleContext(PackageDeclarationContext,0);
};

CompilationUnitContext.prototype.importDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDeclarationContext);
    } else {
        return this.getTypedRuleContext(ImportDeclarationContext,i);
    }
};

CompilationUnitContext.prototype.typeDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeDeclarationContext);
    } else {
        return this.getTypedRuleContext(TypeDeclarationContext,i);
    }
};

CompilationUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitCompilationUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.CompilationUnitContext = CompilationUnitContext;

Java8Parser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, Java8Parser.RULE_compilationUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 827;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        if(la_===1) {
            this.state = 826;
            this.packageDeclaration();

        }
        this.state = 832;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.IMPORT) {
            this.state = 829;
            this.importDeclaration();
            this.state = 834;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 838;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.INTERFACE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la===Java8Parser.AT) {
            this.state = 835;
            this.typeDeclaration();
            this.state = 840;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PackageDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_packageDeclaration;
    return this;
}

PackageDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageDeclarationContext.prototype.constructor = PackageDeclarationContext;

PackageDeclarationContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Java8Parser.Identifier);
    } else {
        return this.getToken(Java8Parser.Identifier, i);
    }
};


PackageDeclarationContext.prototype.packageModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PackageModifierContext);
    } else {
        return this.getTypedRuleContext(PackageModifierContext,i);
    }
};

PackageDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPackageDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PackageDeclarationContext = PackageDeclarationContext;

Java8Parser.prototype.packageDeclaration = function() {

    var localctx = new PackageDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, Java8Parser.RULE_packageDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 844;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 841;
            this.packageModifier();
            this.state = 846;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 847;
        this.match(Java8Parser.PACKAGE);
        this.state = 848;
        this.match(Java8Parser.Identifier);
        this.state = 853;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.DOT) {
            this.state = 849;
            this.match(Java8Parser.DOT);
            this.state = 850;
            this.match(Java8Parser.Identifier);
            this.state = 855;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 856;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PackageModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_packageModifier;
    return this;
}

PackageModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageModifierContext.prototype.constructor = PackageModifierContext;

PackageModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

PackageModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPackageModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PackageModifierContext = PackageModifierContext;

Java8Parser.prototype.packageModifier = function() {

    var localctx = new PackageModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, Java8Parser.RULE_packageModifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 858;
        this.annotation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.singleTypeImportDeclaration = function() {
    return this.getTypedRuleContext(SingleTypeImportDeclarationContext,0);
};

ImportDeclarationContext.prototype.typeImportOnDemandDeclaration = function() {
    return this.getTypedRuleContext(TypeImportOnDemandDeclarationContext,0);
};

ImportDeclarationContext.prototype.singleStaticImportDeclaration = function() {
    return this.getTypedRuleContext(SingleStaticImportDeclarationContext,0);
};

ImportDeclarationContext.prototype.staticImportOnDemandDeclaration = function() {
    return this.getTypedRuleContext(StaticImportOnDemandDeclarationContext,0);
};

ImportDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitImportDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ImportDeclarationContext = ImportDeclarationContext;

Java8Parser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, Java8Parser.RULE_importDeclaration);
    try {
        this.state = 864;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 860;
            this.singleTypeImportDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 861;
            this.typeImportOnDemandDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 862;
            this.singleStaticImportDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 863;
            this.staticImportOnDemandDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleTypeImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_singleTypeImportDeclaration;
    return this;
}

SingleTypeImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleTypeImportDeclarationContext.prototype.constructor = SingleTypeImportDeclarationContext;

SingleTypeImportDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

SingleTypeImportDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSingleTypeImportDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SingleTypeImportDeclarationContext = SingleTypeImportDeclarationContext;

Java8Parser.prototype.singleTypeImportDeclaration = function() {

    var localctx = new SingleTypeImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, Java8Parser.RULE_singleTypeImportDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 866;
        this.match(Java8Parser.IMPORT);
        this.state = 867;
        this.typeName();
        this.state = 868;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeImportOnDemandDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeImportOnDemandDeclaration;
    return this;
}

TypeImportOnDemandDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeImportOnDemandDeclarationContext.prototype.constructor = TypeImportOnDemandDeclarationContext;

TypeImportOnDemandDeclarationContext.prototype.packageOrTypeName = function() {
    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
};

TypeImportOnDemandDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeImportOnDemandDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeImportOnDemandDeclarationContext = TypeImportOnDemandDeclarationContext;

Java8Parser.prototype.typeImportOnDemandDeclaration = function() {

    var localctx = new TypeImportOnDemandDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, Java8Parser.RULE_typeImportOnDemandDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.match(Java8Parser.IMPORT);
        this.state = 871;
        this.packageOrTypeName(0);
        this.state = 872;
        this.match(Java8Parser.DOT);
        this.state = 873;
        this.match(Java8Parser.MUL);
        this.state = 874;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleStaticImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_singleStaticImportDeclaration;
    return this;
}

SingleStaticImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleStaticImportDeclarationContext.prototype.constructor = SingleStaticImportDeclarationContext;

SingleStaticImportDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

SingleStaticImportDeclarationContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

SingleStaticImportDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSingleStaticImportDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SingleStaticImportDeclarationContext = SingleStaticImportDeclarationContext;

Java8Parser.prototype.singleStaticImportDeclaration = function() {

    var localctx = new SingleStaticImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, Java8Parser.RULE_singleStaticImportDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.match(Java8Parser.IMPORT);
        this.state = 877;
        this.match(Java8Parser.STATIC);
        this.state = 878;
        this.typeName();
        this.state = 879;
        this.match(Java8Parser.DOT);
        this.state = 880;
        this.match(Java8Parser.Identifier);
        this.state = 881;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StaticImportOnDemandDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_staticImportOnDemandDeclaration;
    return this;
}

StaticImportOnDemandDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StaticImportOnDemandDeclarationContext.prototype.constructor = StaticImportOnDemandDeclarationContext;

StaticImportOnDemandDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

StaticImportOnDemandDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitStaticImportOnDemandDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.StaticImportOnDemandDeclarationContext = StaticImportOnDemandDeclarationContext;

Java8Parser.prototype.staticImportOnDemandDeclaration = function() {

    var localctx = new StaticImportOnDemandDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, Java8Parser.RULE_staticImportOnDemandDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 883;
        this.match(Java8Parser.IMPORT);
        this.state = 884;
        this.match(Java8Parser.STATIC);
        this.state = 885;
        this.typeName();
        this.state = 886;
        this.match(Java8Parser.DOT);
        this.state = 887;
        this.match(Java8Parser.MUL);
        this.state = 888;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeDeclaration;
    return this;
}

TypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclarationContext.prototype.constructor = TypeDeclarationContext;

TypeDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

TypeDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

TypeDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeDeclarationContext = TypeDeclarationContext;

Java8Parser.prototype.typeDeclaration = function() {

    var localctx = new TypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, Java8Parser.RULE_typeDeclaration);
    try {
        this.state = 893;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 890;
            this.classDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 891;
            this.interfaceDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 892;
            this.match(Java8Parser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.normalClassDeclaration = function() {
    return this.getTypedRuleContext(NormalClassDeclarationContext,0);
};

ClassDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

ClassDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassDeclarationContext = ClassDeclarationContext;

Java8Parser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, Java8Parser.RULE_classDeclaration);
    try {
        this.state = 897;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 895;
            this.normalClassDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 896;
            this.enumDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NormalClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_normalClassDeclaration;
    return this;
}

NormalClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NormalClassDeclarationContext.prototype.constructor = NormalClassDeclarationContext;

NormalClassDeclarationContext.prototype.classModifiers = function() {
    return this.getTypedRuleContext(ClassModifiersContext,0);
};

NormalClassDeclarationContext.prototype.className = function() {
    return this.getTypedRuleContext(ClassNameContext,0);
};

NormalClassDeclarationContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

NormalClassDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

NormalClassDeclarationContext.prototype.superclass = function() {
    return this.getTypedRuleContext(SuperclassContext,0);
};

NormalClassDeclarationContext.prototype.superinterfaces = function() {
    return this.getTypedRuleContext(SuperinterfacesContext,0);
};

NormalClassDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitNormalClassDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.NormalClassDeclarationContext = NormalClassDeclarationContext;

Java8Parser.prototype.normalClassDeclaration = function() {

    var localctx = new NormalClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, Java8Parser.RULE_normalClassDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 899;
        this.classModifiers();
        this.state = 900;
        this.match(Java8Parser.CLASS);
        this.state = 901;
        this.className();
        this.state = 903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LT) {
            this.state = 902;
            this.typeParameters();
        }

        this.state = 906;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.EXTENDS) {
            this.state = 905;
            this.superclass();
        }

        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.IMPLEMENTS) {
            this.state = 908;
            this.superinterfaces();
        }

        this.state = 911;
        this.classBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_className;
    return this;
}

ClassNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassNameContext.prototype.constructor = ClassNameContext;

ClassNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

ClassNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassNameContext = ClassNameContext;

Java8Parser.prototype.className = function() {

    var localctx = new ClassNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, Java8Parser.RULE_className);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 913;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassModifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classModifiers;
    return this;
}

ClassModifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassModifiersContext.prototype.constructor = ClassModifiersContext;

ClassModifiersContext.prototype.classModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassModifierContext);
    } else {
        return this.getTypedRuleContext(ClassModifierContext,i);
    }
};

ClassModifiersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassModifiers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassModifiersContext = ClassModifiersContext;

Java8Parser.prototype.classModifiers = function() {

    var localctx = new ClassModifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, Java8Parser.RULE_classModifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.ABSTRACT || _la===Java8Parser.FINAL || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)))) !== 0) || _la===Java8Parser.AT) {
            this.state = 915;
            this.classModifier();
            this.state = 920;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classModifier;
    return this;
}

ClassModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassModifierContext.prototype.constructor = ClassModifierContext;

ClassModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ClassModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassModifierContext = ClassModifierContext;

Java8Parser.prototype.classModifier = function() {

    var localctx = new ClassModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, Java8Parser.RULE_classModifier);
    try {
        this.state = 929;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 921;
            this.annotation();
            break;
        case Java8Parser.PUBLIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 922;
            this.match(Java8Parser.PUBLIC);
            break;
        case Java8Parser.PROTECTED:
            this.enterOuterAlt(localctx, 3);
            this.state = 923;
            this.match(Java8Parser.PROTECTED);
            break;
        case Java8Parser.PRIVATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 924;
            this.match(Java8Parser.PRIVATE);
            break;
        case Java8Parser.ABSTRACT:
            this.enterOuterAlt(localctx, 5);
            this.state = 925;
            this.match(Java8Parser.ABSTRACT);
            break;
        case Java8Parser.STATIC:
            this.enterOuterAlt(localctx, 6);
            this.state = 926;
            this.match(Java8Parser.STATIC);
            break;
        case Java8Parser.FINAL:
            this.enterOuterAlt(localctx, 7);
            this.state = 927;
            this.match(Java8Parser.FINAL);
            break;
        case Java8Parser.STRICTFP:
            this.enterOuterAlt(localctx, 8);
            this.state = 928;
            this.match(Java8Parser.STRICTFP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeParameters;
    return this;
}

TypeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParametersContext.prototype.constructor = TypeParametersContext;

TypeParametersContext.prototype.typeParameterList = function() {
    return this.getTypedRuleContext(TypeParameterListContext,0);
};

TypeParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeParametersContext = TypeParametersContext;

Java8Parser.prototype.typeParameters = function() {

    var localctx = new TypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, Java8Parser.RULE_typeParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.match(Java8Parser.LT);
        this.state = 932;
        this.typeParameterList();
        this.state = 933;
        this.match(Java8Parser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeParameterList;
    return this;
}

TypeParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterListContext.prototype.constructor = TypeParameterListContext;

TypeParameterListContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeParameterListContext = TypeParameterListContext;

Java8Parser.prototype.typeParameterList = function() {

    var localctx = new TypeParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, Java8Parser.RULE_typeParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 935;
        this.typeParameter();
        this.state = 940;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.COMMA) {
            this.state = 936;
            this.match(Java8Parser.COMMA);
            this.state = 937;
            this.typeParameter();
            this.state = 942;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuperclassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_superclass;
    return this;
}

SuperclassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperclassContext.prototype.constructor = SuperclassContext;

SuperclassContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

SuperclassContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSuperclass(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SuperclassContext = SuperclassContext;

Java8Parser.prototype.superclass = function() {

    var localctx = new SuperclassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, Java8Parser.RULE_superclass);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 943;
        this.match(Java8Parser.EXTENDS);
        this.state = 944;
        this.classType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuperinterfacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_superinterfaces;
    return this;
}

SuperinterfacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperinterfacesContext.prototype.constructor = SuperinterfacesContext;

SuperinterfacesContext.prototype.interfaceTypeList = function() {
    return this.getTypedRuleContext(InterfaceTypeListContext,0);
};

SuperinterfacesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSuperinterfaces(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SuperinterfacesContext = SuperinterfacesContext;

Java8Parser.prototype.superinterfaces = function() {

    var localctx = new SuperinterfacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, Java8Parser.RULE_superinterfaces);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 946;
        this.match(Java8Parser.IMPLEMENTS);
        this.state = 947;
        this.interfaceTypeList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceTypeList;
    return this;
}

InterfaceTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceTypeListContext.prototype.constructor = InterfaceTypeListContext;

InterfaceTypeListContext.prototype.interfaceType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceTypeContext);
    } else {
        return this.getTypedRuleContext(InterfaceTypeContext,i);
    }
};

InterfaceTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceTypeListContext = InterfaceTypeListContext;

Java8Parser.prototype.interfaceTypeList = function() {

    var localctx = new InterfaceTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, Java8Parser.RULE_interfaceTypeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 949;
        this.interfaceType();
        this.state = 954;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.COMMA) {
            this.state = 950;
            this.match(Java8Parser.COMMA);
            this.state = 951;
            this.interfaceType();
            this.state = 956;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

ClassBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassBodyContext = ClassBodyContext;

Java8Parser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, Java8Parser.RULE_classBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 957;
        this.match(Java8Parser.LBRACE);
        this.state = 961;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NATIVE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.TRANSIENT - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.VOLATILE - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la===Java8Parser.LT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 958;
            this.classBodyDeclaration();
            this.state = 963;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 964;
        this.match(Java8Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classBodyDeclaration;
    return this;
}

ClassBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyDeclarationContext.prototype.constructor = ClassBodyDeclarationContext;

ClassBodyDeclarationContext.prototype.classMemberDeclaration = function() {
    return this.getTypedRuleContext(ClassMemberDeclarationContext,0);
};

ClassBodyDeclarationContext.prototype.instanceInitializer = function() {
    return this.getTypedRuleContext(InstanceInitializerContext,0);
};

ClassBodyDeclarationContext.prototype.staticInitializer = function() {
    return this.getTypedRuleContext(StaticInitializerContext,0);
};

ClassBodyDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

ClassBodyDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassBodyDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassBodyDeclarationContext = ClassBodyDeclarationContext;

Java8Parser.prototype.classBodyDeclaration = function() {

    var localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, Java8Parser.RULE_classBodyDeclaration);
    try {
        this.state = 970;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 966;
            this.classMemberDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 967;
            this.instanceInitializer();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 968;
            this.staticInitializer();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 969;
            this.constructorDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassMemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classMemberDeclaration;
    return this;
}

ClassMemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassMemberDeclarationContext.prototype.constructor = ClassMemberDeclarationContext;

ClassMemberDeclarationContext.prototype.fieldDeclaration = function() {
    return this.getTypedRuleContext(FieldDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassMemberDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassMemberDeclarationContext = ClassMemberDeclarationContext;

Java8Parser.prototype.classMemberDeclaration = function() {

    var localctx = new ClassMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, Java8Parser.RULE_classMemberDeclaration);
    try {
        this.state = 977;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 972;
            this.fieldDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 973;
            this.methodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 974;
            this.classDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 975;
            this.interfaceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 976;
            this.match(Java8Parser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_fieldDeclaration;
    return this;
}

FieldDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclarationContext.prototype.constructor = FieldDeclarationContext;

FieldDeclarationContext.prototype.fieldModifiers = function() {
    return this.getTypedRuleContext(FieldModifiersContext,0);
};

FieldDeclarationContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

FieldDeclarationContext.prototype.variableDeclaratorList = function() {
    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
};

FieldDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFieldDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FieldDeclarationContext = FieldDeclarationContext;

Java8Parser.prototype.fieldDeclaration = function() {

    var localctx = new FieldDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, Java8Parser.RULE_fieldDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 979;
        this.fieldModifiers();
        this.state = 980;
        this.unannType();
        this.state = 981;
        this.variableDeclaratorList();
        this.state = 982;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldModifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_fieldModifiers;
    return this;
}

FieldModifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldModifiersContext.prototype.constructor = FieldModifiersContext;

FieldModifiersContext.prototype.fieldModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldModifierContext);
    } else {
        return this.getTypedRuleContext(FieldModifierContext,i);
    }
};

FieldModifiersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFieldModifiers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FieldModifiersContext = FieldModifiersContext;

Java8Parser.prototype.fieldModifiers = function() {

    var localctx = new FieldModifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, Java8Parser.RULE_fieldModifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 987;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (Java8Parser.FINAL - 18)) | (1 << (Java8Parser.PRIVATE - 18)) | (1 << (Java8Parser.PROTECTED - 18)) | (1 << (Java8Parser.PUBLIC - 18)) | (1 << (Java8Parser.STATIC - 18)) | (1 << (Java8Parser.TRANSIENT - 18)) | (1 << (Java8Parser.VOLATILE - 18)))) !== 0) || _la===Java8Parser.AT) {
            this.state = 984;
            this.fieldModifier();
            this.state = 989;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_fieldModifier;
    return this;
}

FieldModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldModifierContext.prototype.constructor = FieldModifierContext;

FieldModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

FieldModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFieldModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FieldModifierContext = FieldModifierContext;

Java8Parser.prototype.fieldModifier = function() {

    var localctx = new FieldModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, Java8Parser.RULE_fieldModifier);
    try {
        this.state = 998;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 990;
            this.annotation();
            break;
        case Java8Parser.PUBLIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 991;
            this.match(Java8Parser.PUBLIC);
            break;
        case Java8Parser.PROTECTED:
            this.enterOuterAlt(localctx, 3);
            this.state = 992;
            this.match(Java8Parser.PROTECTED);
            break;
        case Java8Parser.PRIVATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 993;
            this.match(Java8Parser.PRIVATE);
            break;
        case Java8Parser.STATIC:
            this.enterOuterAlt(localctx, 5);
            this.state = 994;
            this.match(Java8Parser.STATIC);
            break;
        case Java8Parser.FINAL:
            this.enterOuterAlt(localctx, 6);
            this.state = 995;
            this.match(Java8Parser.FINAL);
            break;
        case Java8Parser.TRANSIENT:
            this.enterOuterAlt(localctx, 7);
            this.state = 996;
            this.match(Java8Parser.TRANSIENT);
            break;
        case Java8Parser.VOLATILE:
            this.enterOuterAlt(localctx, 8);
            this.state = 997;
            this.match(Java8Parser.VOLATILE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_variableDeclaratorList;
    return this;
}

VariableDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorListContext.prototype.constructor = VariableDeclaratorListContext;

VariableDeclaratorListContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitVariableDeclaratorList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.VariableDeclaratorListContext = VariableDeclaratorListContext;

Java8Parser.prototype.variableDeclaratorList = function() {

    var localctx = new VariableDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, Java8Parser.RULE_variableDeclaratorList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1000;
        this.variableDeclarator();
        this.state = 1005;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.COMMA) {
            this.state = 1001;
            this.match(Java8Parser.COMMA);
            this.state = 1002;
            this.variableDeclarator();
            this.state = 1007;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

VariableDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

VariableDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitVariableDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.VariableDeclaratorContext = VariableDeclaratorContext;

Java8Parser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, Java8Parser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1008;
        this.variableDeclaratorId();
        this.state = 1011;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.ASSIGN) {
            this.state = 1009;
            this.match(Java8Parser.ASSIGN);
            this.state = 1010;
            this.variableInitializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_variableDeclaratorId;
    return this;
}

VariableDeclaratorIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorIdContext.prototype.constructor = VariableDeclaratorIdContext;

VariableDeclaratorIdContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

VariableDeclaratorIdContext.prototype.dims = function() {
    return this.getTypedRuleContext(DimsContext,0);
};

VariableDeclaratorIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitVariableDeclaratorId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.VariableDeclaratorIdContext = VariableDeclaratorIdContext;

Java8Parser.prototype.variableDeclaratorId = function() {

    var localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, Java8Parser.RULE_variableDeclaratorId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1013;
        this.match(Java8Parser.Identifier);
        this.state = 1015;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LBRACK || _la===Java8Parser.AT) {
            this.state = 1014;
            this.dims();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_variableInitializer;
    return this;
}

VariableInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerContext.prototype.constructor = VariableInitializerContext;

VariableInitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableInitializerContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

VariableInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitVariableInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.VariableInitializerContext = VariableInitializerContext;

Java8Parser.prototype.variableInitializer = function() {

    var localctx = new VariableInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, Java8Parser.RULE_variableInitializer);
    try {
        this.state = 1019;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.BOOLEAN:
        case Java8Parser.BYTE:
        case Java8Parser.CHAR:
        case Java8Parser.DOUBLE:
        case Java8Parser.FLOAT:
        case Java8Parser.INT:
        case Java8Parser.LONG:
        case Java8Parser.NEW:
        case Java8Parser.SHORT:
        case Java8Parser.SUPER:
        case Java8Parser.THIS:
        case Java8Parser.VOID:
        case Java8Parser.IntegerLiteral:
        case Java8Parser.FloatingPointLiteral:
        case Java8Parser.BooleanLiteral:
        case Java8Parser.CharacterLiteral:
        case Java8Parser.StringLiteral:
        case Java8Parser.NullLiteral:
        case Java8Parser.LPAREN:
        case Java8Parser.BANG:
        case Java8Parser.TILDE:
        case Java8Parser.INC:
        case Java8Parser.DEC:
        case Java8Parser.ADD:
        case Java8Parser.SUB:
        case Java8Parser.Identifier:
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1017;
            this.expression();
            break;
        case Java8Parser.LBRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1018;
            this.arrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannType;
    return this;
}

UnannTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannTypeContext.prototype.constructor = UnannTypeContext;

UnannTypeContext.prototype.unannPrimitiveType = function() {
    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
};

UnannTypeContext.prototype.unannReferenceType = function() {
    return this.getTypedRuleContext(UnannReferenceTypeContext,0);
};

UnannTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannTypeContext = UnannTypeContext;

Java8Parser.prototype.unannType = function() {

    var localctx = new UnannTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, Java8Parser.RULE_unannType);
    try {
        this.state = 1023;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1021;
            this.unannPrimitiveType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1022;
            this.unannReferenceType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannPrimitiveTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannPrimitiveType;
    return this;
}

UnannPrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannPrimitiveTypeContext.prototype.constructor = UnannPrimitiveTypeContext;

UnannPrimitiveTypeContext.prototype.numericType = function() {
    return this.getTypedRuleContext(NumericTypeContext,0);
};

UnannPrimitiveTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannPrimitiveType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannPrimitiveTypeContext = UnannPrimitiveTypeContext;

Java8Parser.prototype.unannPrimitiveType = function() {

    var localctx = new UnannPrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, Java8Parser.RULE_unannPrimitiveType);
    try {
        this.state = 1027;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.BYTE:
        case Java8Parser.CHAR:
        case Java8Parser.DOUBLE:
        case Java8Parser.FLOAT:
        case Java8Parser.INT:
        case Java8Parser.LONG:
        case Java8Parser.SHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1025;
            this.numericType();
            break;
        case Java8Parser.BOOLEAN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1026;
            this.match(Java8Parser.BOOLEAN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannReferenceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannReferenceType;
    return this;
}

UnannReferenceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannReferenceTypeContext.prototype.constructor = UnannReferenceTypeContext;

UnannReferenceTypeContext.prototype.unannClassOrInterfaceType = function() {
    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
};

UnannReferenceTypeContext.prototype.unannTypeVariable = function() {
    return this.getTypedRuleContext(UnannTypeVariableContext,0);
};

UnannReferenceTypeContext.prototype.unannArrayType = function() {
    return this.getTypedRuleContext(UnannArrayTypeContext,0);
};

UnannReferenceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannReferenceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannReferenceTypeContext = UnannReferenceTypeContext;

Java8Parser.prototype.unannReferenceType = function() {

    var localctx = new UnannReferenceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, Java8Parser.RULE_unannReferenceType);
    try {
        this.state = 1032;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1029;
            this.unannClassOrInterfaceType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1030;
            this.unannTypeVariable();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1031;
            this.unannArrayType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannClassOrInterfaceType;
    return this;
}

UnannClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannClassOrInterfaceTypeContext.prototype.constructor = UnannClassOrInterfaceTypeContext;

UnannClassOrInterfaceTypeContext.prototype.unannClassType_lfno_unannClassOrInterfaceType = function() {
    return this.getTypedRuleContext(UnannClassType_lfno_unannClassOrInterfaceTypeContext,0);
};

UnannClassOrInterfaceTypeContext.prototype.unannInterfaceType_lfno_unannClassOrInterfaceType = function() {
    return this.getTypedRuleContext(UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext,0);
};

UnannClassOrInterfaceTypeContext.prototype.unannClassType_lf_unannClassOrInterfaceType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnannClassType_lf_unannClassOrInterfaceTypeContext);
    } else {
        return this.getTypedRuleContext(UnannClassType_lf_unannClassOrInterfaceTypeContext,i);
    }
};

UnannClassOrInterfaceTypeContext.prototype.unannInterfaceType_lf_unannClassOrInterfaceType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext);
    } else {
        return this.getTypedRuleContext(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext,i);
    }
};

UnannClassOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannClassOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannClassOrInterfaceTypeContext = UnannClassOrInterfaceTypeContext;

Java8Parser.prototype.unannClassOrInterfaceType = function() {

    var localctx = new UnannClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, Java8Parser.RULE_unannClassOrInterfaceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1036;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1034;
            this.unannClassType_lfno_unannClassOrInterfaceType();
            break;

        case 2:
            this.state = 1035;
            this.unannInterfaceType_lfno_unannClassOrInterfaceType();
            break;

        }
        this.state = 1042;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1040;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1038;
                    this.unannClassType_lf_unannClassOrInterfaceType();
                    break;

                case 2:
                    this.state = 1039;
                    this.unannInterfaceType_lf_unannClassOrInterfaceType();
                    break;

                } 
            }
            this.state = 1044;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannClassTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannClassType;
    return this;
}

UnannClassTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannClassTypeContext.prototype.constructor = UnannClassTypeContext;

UnannClassTypeContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

UnannClassTypeContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

UnannClassTypeContext.prototype.unannClassOrInterfaceType = function() {
    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
};

UnannClassTypeContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

UnannClassTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannClassType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannClassTypeContext = UnannClassTypeContext;

Java8Parser.prototype.unannClassType = function() {

    var localctx = new UnannClassTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, Java8Parser.RULE_unannClassType);
    var _la = 0; // Token type
    try {
        this.state = 1061;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1045;
            this.match(Java8Parser.Identifier);
            this.state = 1047;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 1046;
                this.typeArguments();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1049;
            this.unannClassOrInterfaceType();
            this.state = 1050;
            this.match(Java8Parser.DOT);
            this.state = 1054;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 1051;
                this.annotation();
                this.state = 1056;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1057;
            this.match(Java8Parser.Identifier);
            this.state = 1059;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 1058;
                this.typeArguments();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannClassType_lf_unannClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType;
    return this;
}

UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.constructor = UnannClassType_lf_unannClassOrInterfaceTypeContext;

UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

UnannClassType_lf_unannClassOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannClassType_lf_unannClassOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannClassType_lf_unannClassOrInterfaceTypeContext = UnannClassType_lf_unannClassOrInterfaceTypeContext;

Java8Parser.prototype.unannClassType_lf_unannClassOrInterfaceType = function() {

    var localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1063;
        this.match(Java8Parser.DOT);
        this.state = 1067;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 1064;
            this.annotation();
            this.state = 1069;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1070;
        this.match(Java8Parser.Identifier);
        this.state = 1072;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LT) {
            this.state = 1071;
            this.typeArguments();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannClassType_lfno_unannClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType;
    return this;
}

UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype.constructor = UnannClassType_lfno_unannClassOrInterfaceTypeContext;

UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

UnannClassType_lfno_unannClassOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannClassType_lfno_unannClassOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannClassType_lfno_unannClassOrInterfaceTypeContext = UnannClassType_lfno_unannClassOrInterfaceTypeContext;

Java8Parser.prototype.unannClassType_lfno_unannClassOrInterfaceType = function() {

    var localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1074;
        this.match(Java8Parser.Identifier);
        this.state = 1076;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LT) {
            this.state = 1075;
            this.typeArguments();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannInterfaceType;
    return this;
}

UnannInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannInterfaceTypeContext.prototype.constructor = UnannInterfaceTypeContext;

UnannInterfaceTypeContext.prototype.unannClassType = function() {
    return this.getTypedRuleContext(UnannClassTypeContext,0);
};

UnannInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannInterfaceTypeContext = UnannInterfaceTypeContext;

Java8Parser.prototype.unannInterfaceType = function() {

    var localctx = new UnannInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, Java8Parser.RULE_unannInterfaceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1078;
        this.unannClassType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType;
    return this;
}

UnannInterfaceType_lf_unannClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannInterfaceType_lf_unannClassOrInterfaceTypeContext.prototype.constructor = UnannInterfaceType_lf_unannClassOrInterfaceTypeContext;

UnannInterfaceType_lf_unannClassOrInterfaceTypeContext.prototype.unannClassType_lf_unannClassOrInterfaceType = function() {
    return this.getTypedRuleContext(UnannClassType_lf_unannClassOrInterfaceTypeContext,0);
};

UnannInterfaceType_lf_unannClassOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext = UnannInterfaceType_lf_unannClassOrInterfaceTypeContext;

Java8Parser.prototype.unannInterfaceType_lf_unannClassOrInterfaceType = function() {

    var localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1080;
        this.unannClassType_lf_unannClassOrInterfaceType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType;
    return this;
}

UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext.prototype.constructor = UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext;

UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext.prototype.unannClassType_lfno_unannClassOrInterfaceType = function() {
    return this.getTypedRuleContext(UnannClassType_lfno_unannClassOrInterfaceTypeContext,0);
};

UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext = UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext;

Java8Parser.prototype.unannInterfaceType_lfno_unannClassOrInterfaceType = function() {

    var localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1082;
        this.unannClassType_lfno_unannClassOrInterfaceType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannTypeVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannTypeVariable;
    return this;
}

UnannTypeVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannTypeVariableContext.prototype.constructor = UnannTypeVariableContext;

UnannTypeVariableContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

UnannTypeVariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannTypeVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannTypeVariableContext = UnannTypeVariableContext;

Java8Parser.prototype.unannTypeVariable = function() {

    var localctx = new UnannTypeVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, Java8Parser.RULE_unannTypeVariable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1084;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnannArrayTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unannArrayType;
    return this;
}

UnannArrayTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnannArrayTypeContext.prototype.constructor = UnannArrayTypeContext;

UnannArrayTypeContext.prototype.unannPrimitiveType = function() {
    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
};

UnannArrayTypeContext.prototype.dims = function() {
    return this.getTypedRuleContext(DimsContext,0);
};

UnannArrayTypeContext.prototype.unannClassOrInterfaceType = function() {
    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
};

UnannArrayTypeContext.prototype.unannTypeVariable = function() {
    return this.getTypedRuleContext(UnannTypeVariableContext,0);
};

UnannArrayTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnannArrayType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnannArrayTypeContext = UnannArrayTypeContext;

Java8Parser.prototype.unannArrayType = function() {

    var localctx = new UnannArrayTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, Java8Parser.RULE_unannArrayType);
    try {
        this.state = 1095;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1086;
            this.unannPrimitiveType();
            this.state = 1087;
            this.dims();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1089;
            this.unannClassOrInterfaceType();
            this.state = 1090;
            this.dims();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1092;
            this.unannTypeVariable();
            this.state = 1093;
            this.dims();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.methodHeader = function() {
    return this.getTypedRuleContext(MethodHeaderContext,0);
};

MethodDeclarationContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

MethodDeclarationContext.prototype.methodModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MethodModifierContext);
    } else {
        return this.getTypedRuleContext(MethodModifierContext,i);
    }
};

MethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodDeclarationContext = MethodDeclarationContext;

Java8Parser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, Java8Parser.RULE_methodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1100;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.NATIVE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)))) !== 0) || _la===Java8Parser.AT) {
            this.state = 1097;
            this.methodModifier();
            this.state = 1102;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1103;
        this.methodHeader();
        this.state = 1104;
        this.methodBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodModifier;
    return this;
}

MethodModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodModifierContext.prototype.constructor = MethodModifierContext;

MethodModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

MethodModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodModifierContext = MethodModifierContext;

Java8Parser.prototype.methodModifier = function() {

    var localctx = new MethodModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, Java8Parser.RULE_methodModifier);
    try {
        this.state = 1116;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1106;
            this.annotation();
            break;
        case Java8Parser.PUBLIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1107;
            this.match(Java8Parser.PUBLIC);
            break;
        case Java8Parser.PROTECTED:
            this.enterOuterAlt(localctx, 3);
            this.state = 1108;
            this.match(Java8Parser.PROTECTED);
            break;
        case Java8Parser.PRIVATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 1109;
            this.match(Java8Parser.PRIVATE);
            break;
        case Java8Parser.ABSTRACT:
            this.enterOuterAlt(localctx, 5);
            this.state = 1110;
            this.match(Java8Parser.ABSTRACT);
            break;
        case Java8Parser.STATIC:
            this.enterOuterAlt(localctx, 6);
            this.state = 1111;
            this.match(Java8Parser.STATIC);
            break;
        case Java8Parser.FINAL:
            this.enterOuterAlt(localctx, 7);
            this.state = 1112;
            this.match(Java8Parser.FINAL);
            break;
        case Java8Parser.SYNCHRONIZED:
            this.enterOuterAlt(localctx, 8);
            this.state = 1113;
            this.match(Java8Parser.SYNCHRONIZED);
            break;
        case Java8Parser.NATIVE:
            this.enterOuterAlt(localctx, 9);
            this.state = 1114;
            this.match(Java8Parser.NATIVE);
            break;
        case Java8Parser.STRICTFP:
            this.enterOuterAlt(localctx, 10);
            this.state = 1115;
            this.match(Java8Parser.STRICTFP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodHeaderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodHeader;
    return this;
}

MethodHeaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodHeaderContext.prototype.constructor = MethodHeaderContext;

MethodHeaderContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

MethodHeaderContext.prototype.methodDeclarator = function() {
    return this.getTypedRuleContext(MethodDeclaratorContext,0);
};

MethodHeaderContext.prototype.throws_ = function() {
    return this.getTypedRuleContext(Throws_Context,0);
};

MethodHeaderContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

MethodHeaderContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

MethodHeaderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodHeader(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodHeaderContext = MethodHeaderContext;

Java8Parser.prototype.methodHeader = function() {

    var localctx = new MethodHeaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, Java8Parser.RULE_methodHeader);
    var _la = 0; // Token type
    try {
        this.state = 1135;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.BOOLEAN:
        case Java8Parser.BYTE:
        case Java8Parser.CHAR:
        case Java8Parser.DOUBLE:
        case Java8Parser.FLOAT:
        case Java8Parser.INT:
        case Java8Parser.LONG:
        case Java8Parser.SHORT:
        case Java8Parser.VOID:
        case Java8Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1118;
            this.result();
            this.state = 1119;
            this.methodDeclarator();
            this.state = 1121;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.THROWS) {
                this.state = 1120;
                this.throws_();
            }

            break;
        case Java8Parser.LT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1123;
            this.typeParameters();
            this.state = 1127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 1124;
                this.annotation();
                this.state = 1129;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1130;
            this.result();
            this.state = 1131;
            this.methodDeclarator();
            this.state = 1133;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.THROWS) {
                this.state = 1132;
                this.throws_();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_result;
    return this;
}

ResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResultContext.prototype.constructor = ResultContext;

ResultContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

ResultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitResult(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ResultContext = ResultContext;

Java8Parser.prototype.result = function() {

    var localctx = new ResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, Java8Parser.RULE_result);
    try {
        this.state = 1139;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.BOOLEAN:
        case Java8Parser.BYTE:
        case Java8Parser.CHAR:
        case Java8Parser.DOUBLE:
        case Java8Parser.FLOAT:
        case Java8Parser.INT:
        case Java8Parser.LONG:
        case Java8Parser.SHORT:
        case Java8Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1137;
            this.unannType();
            break;
        case Java8Parser.VOID:
            this.enterOuterAlt(localctx, 2);
            this.state = 1138;
            this.match(Java8Parser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodDeclarator;
    return this;
}

MethodDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclaratorContext.prototype.constructor = MethodDeclaratorContext;

MethodDeclaratorContext.prototype.methodName = function() {
    return this.getTypedRuleContext(MethodNameContext,0);
};

MethodDeclaratorContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

MethodDeclaratorContext.prototype.dims = function() {
    return this.getTypedRuleContext(DimsContext,0);
};

MethodDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodDeclaratorContext = MethodDeclaratorContext;

Java8Parser.prototype.methodDeclarator = function() {

    var localctx = new MethodDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, Java8Parser.RULE_methodDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1141;
        this.methodName();
        this.state = 1142;
        this.match(Java8Parser.LPAREN);
        this.state = 1144;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la===Java8Parser.SHORT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1143;
            this.formalParameterList();
        }

        this.state = 1146;
        this.match(Java8Parser.RPAREN);
        this.state = 1148;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LBRACK || _la===Java8Parser.AT) {
            this.state = 1147;
            this.dims();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodName;
    return this;
}

MethodNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodNameContext.prototype.constructor = MethodNameContext;

MethodNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

MethodNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodNameContext = MethodNameContext;

Java8Parser.prototype.methodName = function() {

    var localctx = new MethodNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, Java8Parser.RULE_methodName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1150;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

FormalParameterListContext.prototype.lastFormalParameter = function() {
    return this.getTypedRuleContext(LastFormalParameterContext,0);
};

FormalParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFormalParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FormalParameterListContext = FormalParameterListContext;

Java8Parser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, Java8Parser.RULE_formalParameterList);
    try {
        this.state = 1157;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1152;
            this.formalParameters();
            this.state = 1153;
            this.match(Java8Parser.COMMA);
            this.state = 1154;
            this.lastFormalParameter();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1156;
            this.lastFormalParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParametersContext.prototype.receiverParameter = function() {
    return this.getTypedRuleContext(ReceiverParameterContext,0);
};

FormalParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFormalParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FormalParametersContext = FormalParametersContext;

Java8Parser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, Java8Parser.RULE_formalParameters);
    try {
        this.state = 1175;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1159;
            this.formalParameter();
            this.state = 1164;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1160;
                    this.match(Java8Parser.COMMA);
                    this.state = 1161;
                    this.formalParameter(); 
                }
                this.state = 1166;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1167;
            this.receiverParameter();
            this.state = 1172;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1168;
                    this.match(Java8Parser.COMMA);
                    this.state = 1169;
                    this.formalParameter(); 
                }
                this.state = 1174;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

FormalParameterContext.prototype.parameterDeclaratorIds = function() {
    return this.getTypedRuleContext(ParameterDeclaratorIdsContext,0);
};

FormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

FormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FormalParameterContext = FormalParameterContext;

Java8Parser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, Java8Parser.RULE_formalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1180;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
            this.state = 1177;
            this.variableModifier();
            this.state = 1182;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1183;
        this.unannType();
        this.state = 1184;
        this.parameterDeclaratorIds();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterDeclaratorIdsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_parameterDeclaratorIds;
    return this;
}

ParameterDeclaratorIdsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclaratorIdsContext.prototype.constructor = ParameterDeclaratorIdsContext;

ParameterDeclaratorIdsContext.prototype.parameterDeclaratorId = function() {
    return this.getTypedRuleContext(ParameterDeclaratorIdContext,0);
};

ParameterDeclaratorIdsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitParameterDeclaratorIds(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ParameterDeclaratorIdsContext = ParameterDeclaratorIdsContext;

Java8Parser.prototype.parameterDeclaratorIds = function() {

    var localctx = new ParameterDeclaratorIdsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, Java8Parser.RULE_parameterDeclaratorIds);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1186;
        this.parameterDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterDeclaratorIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_parameterDeclaratorId;
    return this;
}

ParameterDeclaratorIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclaratorIdContext.prototype.constructor = ParameterDeclaratorIdContext;

ParameterDeclaratorIdContext.prototype.parameterName = function() {
    return this.getTypedRuleContext(ParameterNameContext,0);
};

ParameterDeclaratorIdContext.prototype.dims = function() {
    return this.getTypedRuleContext(DimsContext,0);
};

ParameterDeclaratorIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitParameterDeclaratorId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ParameterDeclaratorIdContext = ParameterDeclaratorIdContext;

Java8Parser.prototype.parameterDeclaratorId = function() {

    var localctx = new ParameterDeclaratorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, Java8Parser.RULE_parameterDeclaratorId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1188;
        this.parameterName();
        this.state = 1190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LBRACK || _la===Java8Parser.AT) {
            this.state = 1189;
            this.dims();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_parameterName;
    return this;
}

ParameterNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterNameContext.prototype.constructor = ParameterNameContext;

ParameterNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

ParameterNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitParameterName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ParameterNameContext = ParameterNameContext;

Java8Parser.prototype.parameterName = function() {

    var localctx = new ParameterNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, Java8Parser.RULE_parameterName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1192;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_variableModifier;
    return this;
}

VariableModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableModifierContext.prototype.constructor = VariableModifierContext;

VariableModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

VariableModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitVariableModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.VariableModifierContext = VariableModifierContext;

Java8Parser.prototype.variableModifier = function() {

    var localctx = new VariableModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, Java8Parser.RULE_variableModifier);
    try {
        this.state = 1196;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1194;
            this.annotation();
            break;
        case Java8Parser.FINAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1195;
            this.match(Java8Parser.FINAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LastFormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_lastFormalParameter;
    return this;
}

LastFormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterContext.prototype.constructor = LastFormalParameterContext;

LastFormalParameterContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

LastFormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

LastFormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LastFormalParameterContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

LastFormalParameterContext.prototype.formalParameter = function() {
    return this.getTypedRuleContext(FormalParameterContext,0);
};

LastFormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLastFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LastFormalParameterContext = LastFormalParameterContext;

Java8Parser.prototype.lastFormalParameter = function() {

    var localctx = new LastFormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, Java8Parser.RULE_lastFormalParameter);
    var _la = 0; // Token type
    try {
        this.state = 1215;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1201;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
                this.state = 1198;
                this.variableModifier();
                this.state = 1203;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1204;
            this.unannType();
            this.state = 1208;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 1205;
                this.annotation();
                this.state = 1210;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1211;
            this.match(Java8Parser.ELLIPSIS);
            this.state = 1212;
            this.variableDeclaratorId();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1214;
            this.formalParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReceiverParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_receiverParameter;
    return this;
}

ReceiverParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReceiverParameterContext.prototype.constructor = ReceiverParameterContext;

ReceiverParameterContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

ReceiverParameterContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

ReceiverParameterContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

ReceiverParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitReceiverParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ReceiverParameterContext = ReceiverParameterContext;

Java8Parser.prototype.receiverParameter = function() {

    var localctx = new ReceiverParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, Java8Parser.RULE_receiverParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1220;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 1217;
            this.annotation();
            this.state = 1222;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1223;
        this.unannType();
        this.state = 1226;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.Identifier) {
            this.state = 1224;
            this.match(Java8Parser.Identifier);
            this.state = 1225;
            this.match(Java8Parser.DOT);
        }

        this.state = 1228;
        this.match(Java8Parser.THIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Throws_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_throws_;
    return this;
}

Throws_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Throws_Context.prototype.constructor = Throws_Context;

Throws_Context.prototype.exceptionTypeList = function() {
    return this.getTypedRuleContext(ExceptionTypeListContext,0);
};

Throws_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitThrows_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.Throws_Context = Throws_Context;

Java8Parser.prototype.throws_ = function() {

    var localctx = new Throws_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 188, Java8Parser.RULE_throws_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1230;
        this.match(Java8Parser.THROWS);
        this.state = 1231;
        this.exceptionTypeList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExceptionTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_exceptionTypeList;
    return this;
}

ExceptionTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionTypeListContext.prototype.constructor = ExceptionTypeListContext;

ExceptionTypeListContext.prototype.exceptionType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExceptionTypeContext);
    } else {
        return this.getTypedRuleContext(ExceptionTypeContext,i);
    }
};

ExceptionTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitExceptionTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ExceptionTypeListContext = ExceptionTypeListContext;

Java8Parser.prototype.exceptionTypeList = function() {

    var localctx = new ExceptionTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, Java8Parser.RULE_exceptionTypeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1233;
        this.exceptionType();
        this.state = 1238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.COMMA) {
            this.state = 1234;
            this.match(Java8Parser.COMMA);
            this.state = 1235;
            this.exceptionType();
            this.state = 1240;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExceptionTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_exceptionType;
    return this;
}

ExceptionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionTypeContext.prototype.constructor = ExceptionTypeContext;

ExceptionTypeContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

ExceptionTypeContext.prototype.typeVariable = function() {
    return this.getTypedRuleContext(TypeVariableContext,0);
};

ExceptionTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitExceptionType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ExceptionTypeContext = ExceptionTypeContext;

Java8Parser.prototype.exceptionType = function() {

    var localctx = new ExceptionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, Java8Parser.RULE_exceptionType);
    try {
        this.state = 1243;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1241;
            this.classType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1242;
            this.typeVariable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodBody;
    return this;
}

MethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodBodyContext.prototype.constructor = MethodBodyContext;

MethodBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

MethodBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodBodyContext = MethodBodyContext;

Java8Parser.prototype.methodBody = function() {

    var localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, Java8Parser.RULE_methodBody);
    try {
        this.state = 1247;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1245;
            this.block();
            break;
        case Java8Parser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 1246;
            this.match(Java8Parser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InstanceInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_instanceInitializer;
    return this;
}

InstanceInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceInitializerContext.prototype.constructor = InstanceInitializerContext;

InstanceInitializerContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

InstanceInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInstanceInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InstanceInitializerContext = InstanceInitializerContext;

Java8Parser.prototype.instanceInitializer = function() {

    var localctx = new InstanceInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, Java8Parser.RULE_instanceInitializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1249;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StaticInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_staticInitializer;
    return this;
}

StaticInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StaticInitializerContext.prototype.constructor = StaticInitializerContext;

StaticInitializerContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StaticInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitStaticInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.StaticInitializerContext = StaticInitializerContext;

Java8Parser.prototype.staticInitializer = function() {

    var localctx = new StaticInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, Java8Parser.RULE_staticInitializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1251;
        this.match(Java8Parser.STATIC);
        this.state = 1252;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_constructorDeclaration;
    return this;
}

ConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDeclarationContext.prototype.constructor = ConstructorDeclarationContext;

ConstructorDeclarationContext.prototype.constructorDeclarator = function() {
    return this.getTypedRuleContext(ConstructorDeclaratorContext,0);
};

ConstructorDeclarationContext.prototype.constructorBody = function() {
    return this.getTypedRuleContext(ConstructorBodyContext,0);
};

ConstructorDeclarationContext.prototype.constructorModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstructorModifierContext);
    } else {
        return this.getTypedRuleContext(ConstructorModifierContext,i);
    }
};

ConstructorDeclarationContext.prototype.throws_ = function() {
    return this.getTypedRuleContext(Throws_Context,0);
};

ConstructorDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConstructorDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ConstructorDeclarationContext = ConstructorDeclarationContext;

Java8Parser.prototype.constructorDeclaration = function() {

    var localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, Java8Parser.RULE_constructorDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1257;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)))) !== 0) || _la===Java8Parser.AT) {
            this.state = 1254;
            this.constructorModifier();
            this.state = 1259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1260;
        this.constructorDeclarator();
        this.state = 1262;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.THROWS) {
            this.state = 1261;
            this.throws_();
        }

        this.state = 1264;
        this.constructorBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_constructorModifier;
    return this;
}

ConstructorModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorModifierContext.prototype.constructor = ConstructorModifierContext;

ConstructorModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ConstructorModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConstructorModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ConstructorModifierContext = ConstructorModifierContext;

Java8Parser.prototype.constructorModifier = function() {

    var localctx = new ConstructorModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, Java8Parser.RULE_constructorModifier);
    try {
        this.state = 1270;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1266;
            this.annotation();
            break;
        case Java8Parser.PUBLIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1267;
            this.match(Java8Parser.PUBLIC);
            break;
        case Java8Parser.PROTECTED:
            this.enterOuterAlt(localctx, 3);
            this.state = 1268;
            this.match(Java8Parser.PROTECTED);
            break;
        case Java8Parser.PRIVATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 1269;
            this.match(Java8Parser.PRIVATE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_constructorDeclarator;
    return this;
}

ConstructorDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDeclaratorContext.prototype.constructor = ConstructorDeclaratorContext;

ConstructorDeclaratorContext.prototype.simpleTypeName = function() {
    return this.getTypedRuleContext(SimpleTypeNameContext,0);
};

ConstructorDeclaratorContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

ConstructorDeclaratorContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

ConstructorDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConstructorDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ConstructorDeclaratorContext = ConstructorDeclaratorContext;

Java8Parser.prototype.constructorDeclarator = function() {

    var localctx = new ConstructorDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, Java8Parser.RULE_constructorDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1273;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LT) {
            this.state = 1272;
            this.typeParameters();
        }

        this.state = 1275;
        this.simpleTypeName();
        this.state = 1276;
        this.match(Java8Parser.LPAREN);
        this.state = 1278;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la===Java8Parser.SHORT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1277;
            this.formalParameterList();
        }

        this.state = 1280;
        this.match(Java8Parser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_simpleTypeName;
    return this;
}

SimpleTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleTypeNameContext.prototype.constructor = SimpleTypeNameContext;

SimpleTypeNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

SimpleTypeNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSimpleTypeName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SimpleTypeNameContext = SimpleTypeNameContext;

Java8Parser.prototype.simpleTypeName = function() {

    var localctx = new SimpleTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, Java8Parser.RULE_simpleTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1282;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_constructorBody;
    return this;
}

ConstructorBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorBodyContext.prototype.constructor = ConstructorBodyContext;

ConstructorBodyContext.prototype.explicitConstructorInvocation = function() {
    return this.getTypedRuleContext(ExplicitConstructorInvocationContext,0);
};

ConstructorBodyContext.prototype.blockStatements = function() {
    return this.getTypedRuleContext(BlockStatementsContext,0);
};

ConstructorBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConstructorBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ConstructorBodyContext = ConstructorBodyContext;

Java8Parser.prototype.constructorBody = function() {

    var localctx = new ConstructorBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, Java8Parser.RULE_constructorBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1284;
        this.match(Java8Parser.LBRACE);
        this.state = 1286;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        if(la_===1) {
            this.state = 1285;
            this.explicitConstructorInvocation();

        }
        this.state = 1289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.ASSERT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BREAK) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.CONTINUE) | (1 << Java8Parser.DO) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.FOR) | (1 << Java8Parser.IF) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.RETURN - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SUPER - 33)) | (1 << (Java8Parser.SWITCH - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.THIS - 33)) | (1 << (Java8Parser.THROW - 33)) | (1 << (Java8Parser.TRY - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.WHILE - 33)) | (1 << (Java8Parser.IntegerLiteral - 33)) | (1 << (Java8Parser.FloatingPointLiteral - 33)) | (1 << (Java8Parser.BooleanLiteral - 33)) | (1 << (Java8Parser.CharacterLiteral - 33)) | (1 << (Java8Parser.StringLiteral - 33)) | (1 << (Java8Parser.NullLiteral - 33)) | (1 << (Java8Parser.LPAREN - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
            this.state = 1288;
            this.blockStatements();
        }

        this.state = 1291;
        this.match(Java8Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitConstructorInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_explicitConstructorInvocation;
    return this;
}

ExplicitConstructorInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitConstructorInvocationContext.prototype.constructor = ExplicitConstructorInvocationContext;

ExplicitConstructorInvocationContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

ExplicitConstructorInvocationContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ExplicitConstructorInvocationContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

ExplicitConstructorInvocationContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

ExplicitConstructorInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitExplicitConstructorInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext;

Java8Parser.prototype.explicitConstructorInvocation = function() {

    var localctx = new ExplicitConstructorInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, Java8Parser.RULE_explicitConstructorInvocation);
    var _la = 0; // Token type
    try {
        this.state = 1339;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1294;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 1293;
                this.typeArguments();
            }

            this.state = 1296;
            this.match(Java8Parser.THIS);
            this.state = 1297;
            this.match(Java8Parser.LPAREN);
            this.state = 1299;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 1298;
                this.argumentList();
            }

            this.state = 1301;
            this.match(Java8Parser.RPAREN);
            this.state = 1302;
            this.match(Java8Parser.SEMI);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1304;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 1303;
                this.typeArguments();
            }

            this.state = 1306;
            this.match(Java8Parser.SUPER);
            this.state = 1307;
            this.match(Java8Parser.LPAREN);
            this.state = 1309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 1308;
                this.argumentList();
            }

            this.state = 1311;
            this.match(Java8Parser.RPAREN);
            this.state = 1312;
            this.match(Java8Parser.SEMI);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1313;
            this.expressionName();
            this.state = 1314;
            this.match(Java8Parser.DOT);
            this.state = 1316;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 1315;
                this.typeArguments();
            }

            this.state = 1318;
            this.match(Java8Parser.SUPER);
            this.state = 1319;
            this.match(Java8Parser.LPAREN);
            this.state = 1321;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 1320;
                this.argumentList();
            }

            this.state = 1323;
            this.match(Java8Parser.RPAREN);
            this.state = 1324;
            this.match(Java8Parser.SEMI);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1326;
            this.primary();
            this.state = 1327;
            this.match(Java8Parser.DOT);
            this.state = 1329;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 1328;
                this.typeArguments();
            }

            this.state = 1331;
            this.match(Java8Parser.SUPER);
            this.state = 1332;
            this.match(Java8Parser.LPAREN);
            this.state = 1334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 1333;
                this.argumentList();
            }

            this.state = 1336;
            this.match(Java8Parser.RPAREN);
            this.state = 1337;
            this.match(Java8Parser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_enumDeclaration;
    return this;
}

EnumDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

EnumDeclarationContext.prototype.enumBody = function() {
    return this.getTypedRuleContext(EnumBodyContext,0);
};

EnumDeclarationContext.prototype.classModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassModifierContext);
    } else {
        return this.getTypedRuleContext(ClassModifierContext,i);
    }
};

EnumDeclarationContext.prototype.superinterfaces = function() {
    return this.getTypedRuleContext(SuperinterfacesContext,0);
};

EnumDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEnumDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EnumDeclarationContext = EnumDeclarationContext;

Java8Parser.prototype.enumDeclaration = function() {

    var localctx = new EnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, Java8Parser.RULE_enumDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1344;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.ABSTRACT || _la===Java8Parser.FINAL || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)))) !== 0) || _la===Java8Parser.AT) {
            this.state = 1341;
            this.classModifier();
            this.state = 1346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1347;
        this.match(Java8Parser.ENUM);
        this.state = 1348;
        this.match(Java8Parser.Identifier);
        this.state = 1350;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.IMPLEMENTS) {
            this.state = 1349;
            this.superinterfaces();
        }

        this.state = 1352;
        this.enumBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_enumBody;
    return this;
}

EnumBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumBodyContext.prototype.constructor = EnumBodyContext;

EnumBodyContext.prototype.enumConstantList = function() {
    return this.getTypedRuleContext(EnumConstantListContext,0);
};

EnumBodyContext.prototype.enumBodyDeclarations = function() {
    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
};

EnumBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEnumBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EnumBodyContext = EnumBodyContext;

Java8Parser.prototype.enumBody = function() {

    var localctx = new EnumBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, Java8Parser.RULE_enumBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1354;
        this.match(Java8Parser.LBRACE);
        this.state = 1356;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1355;
            this.enumConstantList();
        }

        this.state = 1359;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.COMMA) {
            this.state = 1358;
            this.match(Java8Parser.COMMA);
        }

        this.state = 1362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.SEMI) {
            this.state = 1361;
            this.enumBodyDeclarations();
        }

        this.state = 1364;
        this.match(Java8Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_enumConstantList;
    return this;
}

EnumConstantListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantListContext.prototype.constructor = EnumConstantListContext;

EnumConstantListContext.prototype.enumConstant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumConstantContext);
    } else {
        return this.getTypedRuleContext(EnumConstantContext,i);
    }
};

EnumConstantListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEnumConstantList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EnumConstantListContext = EnumConstantListContext;

Java8Parser.prototype.enumConstantList = function() {

    var localctx = new EnumConstantListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, Java8Parser.RULE_enumConstantList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1366;
        this.enumConstant();
        this.state = 1371;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1367;
                this.match(Java8Parser.COMMA);
                this.state = 1368;
                this.enumConstant(); 
            }
            this.state = 1373;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_enumConstant;
    return this;
}

EnumConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantContext.prototype.constructor = EnumConstantContext;

EnumConstantContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

EnumConstantContext.prototype.enumConstantModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumConstantModifierContext);
    } else {
        return this.getTypedRuleContext(EnumConstantModifierContext,i);
    }
};

EnumConstantContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

EnumConstantContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

EnumConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEnumConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EnumConstantContext = EnumConstantContext;

Java8Parser.prototype.enumConstant = function() {

    var localctx = new EnumConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, Java8Parser.RULE_enumConstant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 1374;
            this.enumConstantModifier();
            this.state = 1379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1380;
        this.match(Java8Parser.Identifier);
        this.state = 1386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LPAREN) {
            this.state = 1381;
            this.match(Java8Parser.LPAREN);
            this.state = 1383;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 1382;
                this.argumentList();
            }

            this.state = 1385;
            this.match(Java8Parser.RPAREN);
        }

        this.state = 1389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LBRACE) {
            this.state = 1388;
            this.classBody();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_enumConstantModifier;
    return this;
}

EnumConstantModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantModifierContext.prototype.constructor = EnumConstantModifierContext;

EnumConstantModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

EnumConstantModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEnumConstantModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EnumConstantModifierContext = EnumConstantModifierContext;

Java8Parser.prototype.enumConstantModifier = function() {

    var localctx = new EnumConstantModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, Java8Parser.RULE_enumConstantModifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1391;
        this.annotation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumBodyDeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_enumBodyDeclarations;
    return this;
}

EnumBodyDeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumBodyDeclarationsContext.prototype.constructor = EnumBodyDeclarationsContext;

EnumBodyDeclarationsContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

EnumBodyDeclarationsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEnumBodyDeclarations(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext;

Java8Parser.prototype.enumBodyDeclarations = function() {

    var localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, Java8Parser.RULE_enumBodyDeclarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1393;
        this.match(Java8Parser.SEMI);
        this.state = 1397;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NATIVE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.TRANSIENT - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.VOLATILE - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la===Java8Parser.LT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1394;
            this.classBodyDeclaration();
            this.state = 1399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceDeclaration;
    return this;
}

InterfaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDeclarationContext.prototype.constructor = InterfaceDeclarationContext;

InterfaceDeclarationContext.prototype.normalInterfaceDeclaration = function() {
    return this.getTypedRuleContext(NormalInterfaceDeclarationContext,0);
};

InterfaceDeclarationContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

InterfaceDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceDeclarationContext = InterfaceDeclarationContext;

Java8Parser.prototype.interfaceDeclaration = function() {

    var localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, Java8Parser.RULE_interfaceDeclaration);
    try {
        this.state = 1402;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1400;
            this.normalInterfaceDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1401;
            this.annotationTypeDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NormalInterfaceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_normalInterfaceDeclaration;
    return this;
}

NormalInterfaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NormalInterfaceDeclarationContext.prototype.constructor = NormalInterfaceDeclarationContext;

NormalInterfaceDeclarationContext.prototype.interfaceModifiers = function() {
    return this.getTypedRuleContext(InterfaceModifiersContext,0);
};

NormalInterfaceDeclarationContext.prototype.interfaceName = function() {
    return this.getTypedRuleContext(InterfaceNameContext,0);
};

NormalInterfaceDeclarationContext.prototype.interfaceBody = function() {
    return this.getTypedRuleContext(InterfaceBodyContext,0);
};

NormalInterfaceDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

NormalInterfaceDeclarationContext.prototype.extendsInterfaces = function() {
    return this.getTypedRuleContext(ExtendsInterfacesContext,0);
};

NormalInterfaceDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitNormalInterfaceDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.NormalInterfaceDeclarationContext = NormalInterfaceDeclarationContext;

Java8Parser.prototype.normalInterfaceDeclaration = function() {

    var localctx = new NormalInterfaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, Java8Parser.RULE_normalInterfaceDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1404;
        this.interfaceModifiers();
        this.state = 1405;
        this.match(Java8Parser.INTERFACE);
        this.state = 1406;
        this.interfaceName();
        this.state = 1408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LT) {
            this.state = 1407;
            this.typeParameters();
        }

        this.state = 1411;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.EXTENDS) {
            this.state = 1410;
            this.extendsInterfaces();
        }

        this.state = 1413;
        this.interfaceBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceModifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceModifiers;
    return this;
}

InterfaceModifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceModifiersContext.prototype.constructor = InterfaceModifiersContext;

InterfaceModifiersContext.prototype.interfaceModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceModifierContext);
    } else {
        return this.getTypedRuleContext(InterfaceModifierContext,i);
    }
};

InterfaceModifiersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceModifiers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceModifiersContext = InterfaceModifiersContext;

Java8Parser.prototype.interfaceModifiers = function() {

    var localctx = new InterfaceModifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, Java8Parser.RULE_interfaceModifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1418;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.ABSTRACT || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)))) !== 0) || _la===Java8Parser.AT) {
            this.state = 1415;
            this.interfaceModifier();
            this.state = 1420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceName;
    return this;
}

InterfaceNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceNameContext.prototype.constructor = InterfaceNameContext;

InterfaceNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

InterfaceNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceNameContext = InterfaceNameContext;

Java8Parser.prototype.interfaceName = function() {

    var localctx = new InterfaceNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, Java8Parser.RULE_interfaceName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1421;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceModifier;
    return this;
}

InterfaceModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceModifierContext.prototype.constructor = InterfaceModifierContext;

InterfaceModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

InterfaceModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceModifierContext = InterfaceModifierContext;

Java8Parser.prototype.interfaceModifier = function() {

    var localctx = new InterfaceModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, Java8Parser.RULE_interfaceModifier);
    try {
        this.state = 1430;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1423;
            this.annotation();
            break;
        case Java8Parser.PUBLIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1424;
            this.match(Java8Parser.PUBLIC);
            break;
        case Java8Parser.PROTECTED:
            this.enterOuterAlt(localctx, 3);
            this.state = 1425;
            this.match(Java8Parser.PROTECTED);
            break;
        case Java8Parser.PRIVATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 1426;
            this.match(Java8Parser.PRIVATE);
            break;
        case Java8Parser.ABSTRACT:
            this.enterOuterAlt(localctx, 5);
            this.state = 1427;
            this.match(Java8Parser.ABSTRACT);
            break;
        case Java8Parser.STATIC:
            this.enterOuterAlt(localctx, 6);
            this.state = 1428;
            this.match(Java8Parser.STATIC);
            break;
        case Java8Parser.STRICTFP:
            this.enterOuterAlt(localctx, 7);
            this.state = 1429;
            this.match(Java8Parser.STRICTFP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendsInterfacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_extendsInterfaces;
    return this;
}

ExtendsInterfacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendsInterfacesContext.prototype.constructor = ExtendsInterfacesContext;

ExtendsInterfacesContext.prototype.interfaceTypeList = function() {
    return this.getTypedRuleContext(InterfaceTypeListContext,0);
};

ExtendsInterfacesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitExtendsInterfaces(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ExtendsInterfacesContext = ExtendsInterfacesContext;

Java8Parser.prototype.extendsInterfaces = function() {

    var localctx = new ExtendsInterfacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, Java8Parser.RULE_extendsInterfaces);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1432;
        this.match(Java8Parser.EXTENDS);
        this.state = 1433;
        this.interfaceTypeList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceBody;
    return this;
}

InterfaceBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyContext.prototype.constructor = InterfaceBodyContext;

InterfaceBodyContext.prototype.interfaceMemberDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceMemberDeclarationContext);
    } else {
        return this.getTypedRuleContext(InterfaceMemberDeclarationContext,i);
    }
};

InterfaceBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceBodyContext = InterfaceBodyContext;

Java8Parser.prototype.interfaceBody = function() {

    var localctx = new InterfaceBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, Java8Parser.RULE_interfaceBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1435;
        this.match(Java8Parser.LBRACE);
        this.state = 1439;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DEFAULT) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la===Java8Parser.LT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1436;
            this.interfaceMemberDeclaration();
            this.state = 1441;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1442;
        this.match(Java8Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceMemberDeclaration;
    return this;
}

InterfaceMemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMemberDeclarationContext.prototype.constructor = InterfaceMemberDeclarationContext;

InterfaceMemberDeclarationContext.prototype.constantDeclaration = function() {
    return this.getTypedRuleContext(ConstantDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceMemberDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext;

Java8Parser.prototype.interfaceMemberDeclaration = function() {

    var localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, Java8Parser.RULE_interfaceMemberDeclaration);
    try {
        this.state = 1449;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1444;
            this.constantDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1445;
            this.interfaceMethodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1446;
            this.classDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1447;
            this.interfaceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1448;
            this.match(Java8Parser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_constantDeclaration;
    return this;
}

ConstantDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDeclarationContext.prototype.constructor = ConstantDeclarationContext;

ConstantDeclarationContext.prototype.constantModifiers = function() {
    return this.getTypedRuleContext(ConstantModifiersContext,0);
};

ConstantDeclarationContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

ConstantDeclarationContext.prototype.variableDeclaratorList = function() {
    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
};

ConstantDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConstantDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ConstantDeclarationContext = ConstantDeclarationContext;

Java8Parser.prototype.constantDeclaration = function() {

    var localctx = new ConstantDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, Java8Parser.RULE_constantDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1451;
        this.constantModifiers();
        this.state = 1452;
        this.unannType();
        this.state = 1453;
        this.variableDeclaratorList();
        this.state = 1454;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantModifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_constantModifiers;
    return this;
}

ConstantModifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantModifiersContext.prototype.constructor = ConstantModifiersContext;

ConstantModifiersContext.prototype.constantModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantModifierContext);
    } else {
        return this.getTypedRuleContext(ConstantModifierContext,i);
    }
};

ConstantModifiersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConstantModifiers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ConstantModifiersContext = ConstantModifiersContext;

Java8Parser.prototype.constantModifiers = function() {

    var localctx = new ConstantModifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, Java8Parser.RULE_constantModifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1459;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (Java8Parser.FINAL - 18)) | (1 << (Java8Parser.PUBLIC - 18)) | (1 << (Java8Parser.STATIC - 18)))) !== 0) || _la===Java8Parser.AT) {
            this.state = 1456;
            this.constantModifier();
            this.state = 1461;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_constantModifier;
    return this;
}

ConstantModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantModifierContext.prototype.constructor = ConstantModifierContext;

ConstantModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ConstantModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConstantModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ConstantModifierContext = ConstantModifierContext;

Java8Parser.prototype.constantModifier = function() {

    var localctx = new ConstantModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, Java8Parser.RULE_constantModifier);
    try {
        this.state = 1466;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1462;
            this.annotation();
            break;
        case Java8Parser.PUBLIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1463;
            this.match(Java8Parser.PUBLIC);
            break;
        case Java8Parser.STATIC:
            this.enterOuterAlt(localctx, 3);
            this.state = 1464;
            this.match(Java8Parser.STATIC);
            break;
        case Java8Parser.FINAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 1465;
            this.match(Java8Parser.FINAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceMethodDeclaration;
    return this;
}

InterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodDeclarationContext.prototype.constructor = InterfaceMethodDeclarationContext;

InterfaceMethodDeclarationContext.prototype.interfaceMethodModifiers = function() {
    return this.getTypedRuleContext(InterfaceMethodModifiersContext,0);
};

InterfaceMethodDeclarationContext.prototype.methodHeader = function() {
    return this.getTypedRuleContext(MethodHeaderContext,0);
};

InterfaceMethodDeclarationContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

InterfaceMethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;

Java8Parser.prototype.interfaceMethodDeclaration = function() {

    var localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, Java8Parser.RULE_interfaceMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1468;
        this.interfaceMethodModifiers();
        this.state = 1469;
        this.methodHeader();
        this.state = 1470;
        this.methodBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMethodModifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceMethodModifiers;
    return this;
}

InterfaceMethodModifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodModifiersContext.prototype.constructor = InterfaceMethodModifiersContext;

InterfaceMethodModifiersContext.prototype.interfaceMethodModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceMethodModifierContext);
    } else {
        return this.getTypedRuleContext(InterfaceMethodModifierContext,i);
    }
};

InterfaceMethodModifiersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceMethodModifiers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceMethodModifiersContext = InterfaceMethodModifiersContext;

Java8Parser.prototype.interfaceMethodModifiers = function() {

    var localctx = new InterfaceMethodModifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, Java8Parser.RULE_interfaceMethodModifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1475;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.ABSTRACT || _la===Java8Parser.DEFAULT || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (Java8Parser.PUBLIC - 35)) | (1 << (Java8Parser.STATIC - 35)) | (1 << (Java8Parser.STRICTFP - 35)))) !== 0) || _la===Java8Parser.AT) {
            this.state = 1472;
            this.interfaceMethodModifier();
            this.state = 1477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMethodModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_interfaceMethodModifier;
    return this;
}

InterfaceMethodModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodModifierContext.prototype.constructor = InterfaceMethodModifierContext;

InterfaceMethodModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

InterfaceMethodModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInterfaceMethodModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InterfaceMethodModifierContext = InterfaceMethodModifierContext;

Java8Parser.prototype.interfaceMethodModifier = function() {

    var localctx = new InterfaceMethodModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, Java8Parser.RULE_interfaceMethodModifier);
    try {
        this.state = 1484;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1478;
            this.annotation();
            break;
        case Java8Parser.PUBLIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1479;
            this.match(Java8Parser.PUBLIC);
            break;
        case Java8Parser.ABSTRACT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1480;
            this.match(Java8Parser.ABSTRACT);
            break;
        case Java8Parser.DEFAULT:
            this.enterOuterAlt(localctx, 4);
            this.state = 1481;
            this.match(Java8Parser.DEFAULT);
            break;
        case Java8Parser.STATIC:
            this.enterOuterAlt(localctx, 5);
            this.state = 1482;
            this.match(Java8Parser.STATIC);
            break;
        case Java8Parser.STRICTFP:
            this.enterOuterAlt(localctx, 6);
            this.state = 1483;
            this.match(Java8Parser.STRICTFP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_annotationTypeDeclaration;
    return this;
}

AnnotationTypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeDeclarationContext.prototype.constructor = AnnotationTypeDeclarationContext;

AnnotationTypeDeclarationContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

AnnotationTypeDeclarationContext.prototype.annotationTypeBody = function() {
    return this.getTypedRuleContext(AnnotationTypeBodyContext,0);
};

AnnotationTypeDeclarationContext.prototype.interfaceModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceModifierContext);
    } else {
        return this.getTypedRuleContext(InterfaceModifierContext,i);
    }
};

AnnotationTypeDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAnnotationTypeDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext;

Java8Parser.prototype.annotationTypeDeclaration = function() {

    var localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, Java8Parser.RULE_annotationTypeDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1489;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1486;
                this.interfaceModifier(); 
            }
            this.state = 1491;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
        }

        this.state = 1492;
        this.match(Java8Parser.AT);
        this.state = 1493;
        this.match(Java8Parser.INTERFACE);
        this.state = 1494;
        this.match(Java8Parser.Identifier);
        this.state = 1495;
        this.annotationTypeBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_annotationTypeBody;
    return this;
}

AnnotationTypeBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeBodyContext.prototype.constructor = AnnotationTypeBodyContext;

AnnotationTypeBodyContext.prototype.annotationTypeMemberDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationTypeMemberDeclarationContext);
    } else {
        return this.getTypedRuleContext(AnnotationTypeMemberDeclarationContext,i);
    }
};

AnnotationTypeBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAnnotationTypeBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AnnotationTypeBodyContext = AnnotationTypeBodyContext;

Java8Parser.prototype.annotationTypeBody = function() {

    var localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, Java8Parser.RULE_annotationTypeBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1497;
        this.match(Java8Parser.LBRACE);
        this.state = 1501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1498;
            this.annotationTypeMemberDeclaration();
            this.state = 1503;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1504;
        this.match(Java8Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeMemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_annotationTypeMemberDeclaration;
    return this;
}

AnnotationTypeMemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeMemberDeclarationContext.prototype.constructor = AnnotationTypeMemberDeclarationContext;

AnnotationTypeMemberDeclarationContext.prototype.annotationTypeElementDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,0);
};

AnnotationTypeMemberDeclarationContext.prototype.constantDeclaration = function() {
    return this.getTypedRuleContext(ConstantDeclarationContext,0);
};

AnnotationTypeMemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

AnnotationTypeMemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

AnnotationTypeMemberDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAnnotationTypeMemberDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AnnotationTypeMemberDeclarationContext = AnnotationTypeMemberDeclarationContext;

Java8Parser.prototype.annotationTypeMemberDeclaration = function() {

    var localctx = new AnnotationTypeMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, Java8Parser.RULE_annotationTypeMemberDeclaration);
    try {
        this.state = 1511;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1506;
            this.annotationTypeElementDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1507;
            this.constantDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1508;
            this.classDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1509;
            this.interfaceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1510;
            this.match(Java8Parser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeElementDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_annotationTypeElementDeclaration;
    return this;
}

AnnotationTypeElementDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeElementDeclarationContext.prototype.constructor = AnnotationTypeElementDeclarationContext;

AnnotationTypeElementDeclarationContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

AnnotationTypeElementDeclarationContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

AnnotationTypeElementDeclarationContext.prototype.annotationTypeElementModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationTypeElementModifierContext);
    } else {
        return this.getTypedRuleContext(AnnotationTypeElementModifierContext,i);
    }
};

AnnotationTypeElementDeclarationContext.prototype.dims = function() {
    return this.getTypedRuleContext(DimsContext,0);
};

AnnotationTypeElementDeclarationContext.prototype.defaultValue = function() {
    return this.getTypedRuleContext(DefaultValueContext,0);
};

AnnotationTypeElementDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAnnotationTypeElementDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext;

Java8Parser.prototype.annotationTypeElementDeclaration = function() {

    var localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, Java8Parser.RULE_annotationTypeElementDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.ABSTRACT || _la===Java8Parser.PUBLIC || _la===Java8Parser.AT) {
            this.state = 1513;
            this.annotationTypeElementModifier();
            this.state = 1518;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1519;
        this.unannType();
        this.state = 1520;
        this.match(Java8Parser.Identifier);
        this.state = 1521;
        this.match(Java8Parser.LPAREN);
        this.state = 1522;
        this.match(Java8Parser.RPAREN);
        this.state = 1524;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LBRACK || _la===Java8Parser.AT) {
            this.state = 1523;
            this.dims();
        }

        this.state = 1527;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.DEFAULT) {
            this.state = 1526;
            this.defaultValue();
        }

        this.state = 1529;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeElementModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_annotationTypeElementModifier;
    return this;
}

AnnotationTypeElementModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeElementModifierContext.prototype.constructor = AnnotationTypeElementModifierContext;

AnnotationTypeElementModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

AnnotationTypeElementModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAnnotationTypeElementModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AnnotationTypeElementModifierContext = AnnotationTypeElementModifierContext;

Java8Parser.prototype.annotationTypeElementModifier = function() {

    var localctx = new AnnotationTypeElementModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, Java8Parser.RULE_annotationTypeElementModifier);
    try {
        this.state = 1534;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1531;
            this.annotation();
            break;
        case Java8Parser.PUBLIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1532;
            this.match(Java8Parser.PUBLIC);
            break;
        case Java8Parser.ABSTRACT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1533;
            this.match(Java8Parser.ABSTRACT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_defaultValue;
    return this;
}

DefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultValueContext.prototype.constructor = DefaultValueContext;

DefaultValueContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

DefaultValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitDefaultValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.DefaultValueContext = DefaultValueContext;

Java8Parser.prototype.defaultValue = function() {

    var localctx = new DefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, Java8Parser.RULE_defaultValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1536;
        this.match(Java8Parser.DEFAULT);
        this.state = 1537;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.normalAnnotation = function() {
    return this.getTypedRuleContext(NormalAnnotationContext,0);
};

AnnotationContext.prototype.markerAnnotation = function() {
    return this.getTypedRuleContext(MarkerAnnotationContext,0);
};

AnnotationContext.prototype.singleElementAnnotation = function() {
    return this.getTypedRuleContext(SingleElementAnnotationContext,0);
};

AnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AnnotationContext = AnnotationContext;

Java8Parser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, Java8Parser.RULE_annotation);
    try {
        this.state = 1542;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1539;
            this.normalAnnotation();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1540;
            this.markerAnnotation();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1541;
            this.singleElementAnnotation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NormalAnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_normalAnnotation;
    return this;
}

NormalAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NormalAnnotationContext.prototype.constructor = NormalAnnotationContext;

NormalAnnotationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

NormalAnnotationContext.prototype.elementValuePairList = function() {
    return this.getTypedRuleContext(ElementValuePairListContext,0);
};

NormalAnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitNormalAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.NormalAnnotationContext = NormalAnnotationContext;

Java8Parser.prototype.normalAnnotation = function() {

    var localctx = new NormalAnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, Java8Parser.RULE_normalAnnotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1544;
        this.match(Java8Parser.AT);
        this.state = 1545;
        this.typeName();
        this.state = 1546;
        this.match(Java8Parser.LPAREN);
        this.state = 1548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.Identifier) {
            this.state = 1547;
            this.elementValuePairList();
        }

        this.state = 1550;
        this.match(Java8Parser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_elementValuePairList;
    return this;
}

ElementValuePairListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairListContext.prototype.constructor = ElementValuePairListContext;

ElementValuePairListContext.prototype.elementValuePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValuePairContext);
    } else {
        return this.getTypedRuleContext(ElementValuePairContext,i);
    }
};

ElementValuePairListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitElementValuePairList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ElementValuePairListContext = ElementValuePairListContext;

Java8Parser.prototype.elementValuePairList = function() {

    var localctx = new ElementValuePairListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, Java8Parser.RULE_elementValuePairList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1552;
        this.elementValuePair();
        this.state = 1557;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.COMMA) {
            this.state = 1553;
            this.match(Java8Parser.COMMA);
            this.state = 1554;
            this.elementValuePair();
            this.state = 1559;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_elementValuePair;
    return this;
}

ElementValuePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairContext.prototype.constructor = ElementValuePairContext;

ElementValuePairContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

ElementValuePairContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

ElementValuePairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitElementValuePair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ElementValuePairContext = ElementValuePairContext;

Java8Parser.prototype.elementValuePair = function() {

    var localctx = new ElementValuePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, Java8Parser.RULE_elementValuePair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1560;
        this.match(Java8Parser.Identifier);
        this.state = 1561;
        this.match(Java8Parser.ASSIGN);
        this.state = 1562;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_elementValue;
    return this;
}

ElementValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueContext.prototype.constructor = ElementValueContext;

ElementValueContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

ElementValueContext.prototype.elementValueArrayInitializer = function() {
    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
};

ElementValueContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ElementValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitElementValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ElementValueContext = ElementValueContext;

Java8Parser.prototype.elementValue = function() {

    var localctx = new ElementValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, Java8Parser.RULE_elementValue);
    try {
        this.state = 1567;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1564;
            this.conditionalExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1565;
            this.elementValueArrayInitializer();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1566;
            this.annotation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_elementValueArrayInitializer;
    return this;
}

ElementValueArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueArrayInitializerContext.prototype.constructor = ElementValueArrayInitializerContext;

ElementValueArrayInitializerContext.prototype.elementValueList = function() {
    return this.getTypedRuleContext(ElementValueListContext,0);
};

ElementValueArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitElementValueArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;

Java8Parser.prototype.elementValueArrayInitializer = function() {

    var localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, Java8Parser.RULE_elementValueArrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1569;
        this.match(Java8Parser.LBRACE);
        this.state = 1571;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)) | (1 << (Java8Parser.LBRACE - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1570;
            this.elementValueList();
        }

        this.state = 1574;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.COMMA) {
            this.state = 1573;
            this.match(Java8Parser.COMMA);
        }

        this.state = 1576;
        this.match(Java8Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_elementValueList;
    return this;
}

ElementValueListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueListContext.prototype.constructor = ElementValueListContext;

ElementValueListContext.prototype.elementValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValueContext);
    } else {
        return this.getTypedRuleContext(ElementValueContext,i);
    }
};

ElementValueListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitElementValueList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ElementValueListContext = ElementValueListContext;

Java8Parser.prototype.elementValueList = function() {

    var localctx = new ElementValueListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, Java8Parser.RULE_elementValueList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1578;
        this.elementValue();
        this.state = 1583;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1579;
                this.match(Java8Parser.COMMA);
                this.state = 1580;
                this.elementValue(); 
            }
            this.state = 1585;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MarkerAnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_markerAnnotation;
    return this;
}

MarkerAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MarkerAnnotationContext.prototype.constructor = MarkerAnnotationContext;

MarkerAnnotationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MarkerAnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMarkerAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MarkerAnnotationContext = MarkerAnnotationContext;

Java8Parser.prototype.markerAnnotation = function() {

    var localctx = new MarkerAnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, Java8Parser.RULE_markerAnnotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1586;
        this.match(Java8Parser.AT);
        this.state = 1587;
        this.typeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleElementAnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_singleElementAnnotation;
    return this;
}

SingleElementAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleElementAnnotationContext.prototype.constructor = SingleElementAnnotationContext;

SingleElementAnnotationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

SingleElementAnnotationContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

SingleElementAnnotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSingleElementAnnotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SingleElementAnnotationContext = SingleElementAnnotationContext;

Java8Parser.prototype.singleElementAnnotation = function() {

    var localctx = new SingleElementAnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, Java8Parser.RULE_singleElementAnnotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1589;
        this.match(Java8Parser.AT);
        this.state = 1590;
        this.typeName();
        this.state = 1591;
        this.match(Java8Parser.LPAREN);
        this.state = 1592;
        this.elementValue();
        this.state = 1593;
        this.match(Java8Parser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.variableInitializerList = function() {
    return this.getTypedRuleContext(VariableInitializerListContext,0);
};

ArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ArrayInitializerContext = ArrayInitializerContext;

Java8Parser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, Java8Parser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1595;
        this.match(Java8Parser.LBRACE);
        this.state = 1597;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)) | (1 << (Java8Parser.LBRACE - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1596;
            this.variableInitializerList();
        }

        this.state = 1600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.COMMA) {
            this.state = 1599;
            this.match(Java8Parser.COMMA);
        }

        this.state = 1602;
        this.match(Java8Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableInitializerListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_variableInitializerList;
    return this;
}

VariableInitializerListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerListContext.prototype.constructor = VariableInitializerListContext;

VariableInitializerListContext.prototype.variableInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
        return this.getTypedRuleContext(VariableInitializerContext,i);
    }
};

VariableInitializerListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitVariableInitializerList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.VariableInitializerListContext = VariableInitializerListContext;

Java8Parser.prototype.variableInitializerList = function() {

    var localctx = new VariableInitializerListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, Java8Parser.RULE_variableInitializerList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1604;
        this.variableInitializer();
        this.state = 1609;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,155,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1605;
                this.match(Java8Parser.COMMA);
                this.state = 1606;
                this.variableInitializer(); 
            }
            this.state = 1611;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,155,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.blockStatements = function() {
    return this.getTypedRuleContext(BlockStatementsContext,0);
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.BlockContext = BlockContext;

Java8Parser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, Java8Parser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1612;
        this.match(Java8Parser.LBRACE);
        this.state = 1614;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.ASSERT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BREAK) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.CONTINUE) | (1 << Java8Parser.DO) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.FOR) | (1 << Java8Parser.IF) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.RETURN - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SUPER - 33)) | (1 << (Java8Parser.SWITCH - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.THIS - 33)) | (1 << (Java8Parser.THROW - 33)) | (1 << (Java8Parser.TRY - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.WHILE - 33)) | (1 << (Java8Parser.IntegerLiteral - 33)) | (1 << (Java8Parser.FloatingPointLiteral - 33)) | (1 << (Java8Parser.BooleanLiteral - 33)) | (1 << (Java8Parser.CharacterLiteral - 33)) | (1 << (Java8Parser.StringLiteral - 33)) | (1 << (Java8Parser.NullLiteral - 33)) | (1 << (Java8Parser.LPAREN - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
            this.state = 1613;
            this.blockStatements();
        }

        this.state = 1616;
        this.match(Java8Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_blockStatements;
    return this;
}

BlockStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementsContext.prototype.constructor = BlockStatementsContext;

BlockStatementsContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

BlockStatementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitBlockStatements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.BlockStatementsContext = BlockStatementsContext;

Java8Parser.prototype.blockStatements = function() {

    var localctx = new BlockStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, Java8Parser.RULE_blockStatements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1618;
        this.blockStatement();
        this.state = 1622;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.ASSERT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BREAK) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.CONTINUE) | (1 << Java8Parser.DO) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.FOR) | (1 << Java8Parser.IF) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.RETURN - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SUPER - 33)) | (1 << (Java8Parser.SWITCH - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.THIS - 33)) | (1 << (Java8Parser.THROW - 33)) | (1 << (Java8Parser.TRY - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.WHILE - 33)) | (1 << (Java8Parser.IntegerLiteral - 33)) | (1 << (Java8Parser.FloatingPointLiteral - 33)) | (1 << (Java8Parser.BooleanLiteral - 33)) | (1 << (Java8Parser.CharacterLiteral - 33)) | (1 << (Java8Parser.StringLiteral - 33)) | (1 << (Java8Parser.NullLiteral - 33)) | (1 << (Java8Parser.LPAREN - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
            this.state = 1619;
            this.blockStatement();
            this.state = 1624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.localVariableDeclarationStatement = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
};

BlockStatementContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

BlockStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.BlockStatementContext = BlockStatementContext;

Java8Parser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, Java8Parser.RULE_blockStatement);
    try {
        this.state = 1628;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1625;
            this.localVariableDeclarationStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1626;
            this.classDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1627;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_localVariableDeclarationStatement;
    return this;
}

LocalVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationStatementContext.prototype.constructor = LocalVariableDeclarationStatementContext;

LocalVariableDeclarationStatementContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

LocalVariableDeclarationStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLocalVariableDeclarationStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;

Java8Parser.prototype.localVariableDeclarationStatement = function() {

    var localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, Java8Parser.RULE_localVariableDeclarationStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1630;
        this.localVariableDeclaration();
        this.state = 1631;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_localVariableDeclaration;
    return this;
}

LocalVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationContext.prototype.constructor = LocalVariableDeclarationContext;

LocalVariableDeclarationContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

LocalVariableDeclarationContext.prototype.variableDeclaratorList = function() {
    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
};

LocalVariableDeclarationContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LocalVariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLocalVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;

Java8Parser.prototype.localVariableDeclaration = function() {

    var localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, Java8Parser.RULE_localVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1636;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
            this.state = 1633;
            this.variableModifier();
            this.state = 1638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1639;
        this.unannType();
        this.state = 1640;
        this.variableDeclaratorList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.statementWithoutTrailingSubstatement = function() {
    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
};

StatementContext.prototype.labeledStatement = function() {
    return this.getTypedRuleContext(LabeledStatementContext,0);
};

StatementContext.prototype.ifThenStatement = function() {
    return this.getTypedRuleContext(IfThenStatementContext,0);
};

StatementContext.prototype.ifThenElseStatement = function() {
    return this.getTypedRuleContext(IfThenElseStatementContext,0);
};

StatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

StatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.StatementContext = StatementContext;

Java8Parser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, Java8Parser.RULE_statement);
    try {
        this.state = 1648;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1642;
            this.statementWithoutTrailingSubstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1643;
            this.labeledStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1644;
            this.ifThenStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1645;
            this.ifThenElseStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1646;
            this.whileStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1647;
            this.forStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementNoShortIfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_statementNoShortIf;
    return this;
}

StatementNoShortIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementNoShortIfContext.prototype.constructor = StatementNoShortIfContext;

StatementNoShortIfContext.prototype.statementWithoutTrailingSubstatement = function() {
    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
};

StatementNoShortIfContext.prototype.labeledStatementNoShortIf = function() {
    return this.getTypedRuleContext(LabeledStatementNoShortIfContext,0);
};

StatementNoShortIfContext.prototype.ifThenElseStatementNoShortIf = function() {
    return this.getTypedRuleContext(IfThenElseStatementNoShortIfContext,0);
};

StatementNoShortIfContext.prototype.whileStatementNoShortIf = function() {
    return this.getTypedRuleContext(WhileStatementNoShortIfContext,0);
};

StatementNoShortIfContext.prototype.forStatementNoShortIf = function() {
    return this.getTypedRuleContext(ForStatementNoShortIfContext,0);
};

StatementNoShortIfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitStatementNoShortIf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.StatementNoShortIfContext = StatementNoShortIfContext;

Java8Parser.prototype.statementNoShortIf = function() {

    var localctx = new StatementNoShortIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, Java8Parser.RULE_statementNoShortIf);
    try {
        this.state = 1655;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1650;
            this.statementWithoutTrailingSubstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1651;
            this.labeledStatementNoShortIf();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1652;
            this.ifThenElseStatementNoShortIf();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1653;
            this.whileStatementNoShortIf();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1654;
            this.forStatementNoShortIf();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementWithoutTrailingSubstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_statementWithoutTrailingSubstatement;
    return this;
}

StatementWithoutTrailingSubstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementWithoutTrailingSubstatementContext.prototype.constructor = StatementWithoutTrailingSubstatementContext;

StatementWithoutTrailingSubstatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.assertStatement = function() {
    return this.getTypedRuleContext(AssertStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.doStatement = function() {
    return this.getTypedRuleContext(DoStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.synchronizedStatement = function() {
    return this.getTypedRuleContext(SynchronizedStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.tryStatement = function() {
    return this.getTypedRuleContext(TryStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitStatementWithoutTrailingSubstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.StatementWithoutTrailingSubstatementContext = StatementWithoutTrailingSubstatementContext;

Java8Parser.prototype.statementWithoutTrailingSubstatement = function() {

    var localctx = new StatementWithoutTrailingSubstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, Java8Parser.RULE_statementWithoutTrailingSubstatement);
    try {
        this.state = 1669;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1657;
            this.block();
            break;
        case Java8Parser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 1658;
            this.emptyStatement();
            break;
        case Java8Parser.BOOLEAN:
        case Java8Parser.BYTE:
        case Java8Parser.CHAR:
        case Java8Parser.DOUBLE:
        case Java8Parser.FLOAT:
        case Java8Parser.INT:
        case Java8Parser.LONG:
        case Java8Parser.NEW:
        case Java8Parser.SHORT:
        case Java8Parser.SUPER:
        case Java8Parser.THIS:
        case Java8Parser.VOID:
        case Java8Parser.IntegerLiteral:
        case Java8Parser.FloatingPointLiteral:
        case Java8Parser.BooleanLiteral:
        case Java8Parser.CharacterLiteral:
        case Java8Parser.StringLiteral:
        case Java8Parser.NullLiteral:
        case Java8Parser.LPAREN:
        case Java8Parser.INC:
        case Java8Parser.DEC:
        case Java8Parser.Identifier:
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1659;
            this.expressionStatement();
            break;
        case Java8Parser.ASSERT:
            this.enterOuterAlt(localctx, 4);
            this.state = 1660;
            this.assertStatement();
            break;
        case Java8Parser.SWITCH:
            this.enterOuterAlt(localctx, 5);
            this.state = 1661;
            this.switchStatement();
            break;
        case Java8Parser.DO:
            this.enterOuterAlt(localctx, 6);
            this.state = 1662;
            this.doStatement();
            break;
        case Java8Parser.BREAK:
            this.enterOuterAlt(localctx, 7);
            this.state = 1663;
            this.breakStatement();
            break;
        case Java8Parser.CONTINUE:
            this.enterOuterAlt(localctx, 8);
            this.state = 1664;
            this.continueStatement();
            break;
        case Java8Parser.RETURN:
            this.enterOuterAlt(localctx, 9);
            this.state = 1665;
            this.returnStatement();
            break;
        case Java8Parser.SYNCHRONIZED:
            this.enterOuterAlt(localctx, 10);
            this.state = 1666;
            this.synchronizedStatement();
            break;
        case Java8Parser.THROW:
            this.enterOuterAlt(localctx, 11);
            this.state = 1667;
            this.throwStatement();
            break;
        case Java8Parser.TRY:
            this.enterOuterAlt(localctx, 12);
            this.state = 1668;
            this.tryStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;


EmptyStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEmptyStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EmptyStatementContext = EmptyStatementContext;

Java8Parser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, Java8Parser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1671;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabeledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_labeledStatement;
    return this;
}

LabeledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledStatementContext.prototype.constructor = LabeledStatementContext;

LabeledStatementContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

LabeledStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabeledStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLabeledStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LabeledStatementContext = LabeledStatementContext;

Java8Parser.prototype.labeledStatement = function() {

    var localctx = new LabeledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, Java8Parser.RULE_labeledStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1673;
        this.match(Java8Parser.Identifier);
        this.state = 1674;
        this.match(Java8Parser.COLON);
        this.state = 1675;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabeledStatementNoShortIfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_labeledStatementNoShortIf;
    return this;
}

LabeledStatementNoShortIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledStatementNoShortIfContext.prototype.constructor = LabeledStatementNoShortIfContext;

LabeledStatementNoShortIfContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

LabeledStatementNoShortIfContext.prototype.statementNoShortIf = function() {
    return this.getTypedRuleContext(StatementNoShortIfContext,0);
};

LabeledStatementNoShortIfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLabeledStatementNoShortIf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LabeledStatementNoShortIfContext = LabeledStatementNoShortIfContext;

Java8Parser.prototype.labeledStatementNoShortIf = function() {

    var localctx = new LabeledStatementNoShortIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, Java8Parser.RULE_labeledStatementNoShortIf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1677;
        this.match(Java8Parser.Identifier);
        this.state = 1678;
        this.match(Java8Parser.COLON);
        this.state = 1679;
        this.statementNoShortIf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.statementExpression = function() {
    return this.getTypedRuleContext(StatementExpressionContext,0);
};

ExpressionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitExpressionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ExpressionStatementContext = ExpressionStatementContext;

Java8Parser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, Java8Parser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1681;
        this.statementExpression();
        this.state = 1682;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_statementExpression;
    return this;
}

StatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementExpressionContext.prototype.constructor = StatementExpressionContext;

StatementExpressionContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

StatementExpressionContext.prototype.preIncrementExpression = function() {
    return this.getTypedRuleContext(PreIncrementExpressionContext,0);
};

StatementExpressionContext.prototype.preDecrementExpression = function() {
    return this.getTypedRuleContext(PreDecrementExpressionContext,0);
};

StatementExpressionContext.prototype.postIncrementExpression = function() {
    return this.getTypedRuleContext(PostIncrementExpressionContext,0);
};

StatementExpressionContext.prototype.postDecrementExpression = function() {
    return this.getTypedRuleContext(PostDecrementExpressionContext,0);
};

StatementExpressionContext.prototype.methodInvocation = function() {
    return this.getTypedRuleContext(MethodInvocationContext,0);
};

StatementExpressionContext.prototype.classInstanceCreationExpression = function() {
    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
};

StatementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitStatementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.StatementExpressionContext = StatementExpressionContext;

Java8Parser.prototype.statementExpression = function() {

    var localctx = new StatementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, Java8Parser.RULE_statementExpression);
    try {
        this.state = 1691;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1684;
            this.assignment();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1685;
            this.preIncrementExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1686;
            this.preDecrementExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1687;
            this.postIncrementExpression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1688;
            this.postDecrementExpression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1689;
            this.methodInvocation();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1690;
            this.classInstanceCreationExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfThenStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_ifThenStatement;
    return this;
}

IfThenStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfThenStatementContext.prototype.constructor = IfThenStatementContext;

IfThenStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfThenStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IfThenStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitIfThenStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.IfThenStatementContext = IfThenStatementContext;

Java8Parser.prototype.ifThenStatement = function() {

    var localctx = new IfThenStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, Java8Parser.RULE_ifThenStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1693;
        this.match(Java8Parser.IF);
        this.state = 1694;
        this.match(Java8Parser.LPAREN);
        this.state = 1695;
        this.expression();
        this.state = 1696;
        this.match(Java8Parser.RPAREN);
        this.state = 1697;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfThenElseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_ifThenElseStatement;
    return this;
}

IfThenElseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfThenElseStatementContext.prototype.constructor = IfThenElseStatementContext;

IfThenElseStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfThenElseStatementContext.prototype.statementNoShortIf = function() {
    return this.getTypedRuleContext(StatementNoShortIfContext,0);
};

IfThenElseStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IfThenElseStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitIfThenElseStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.IfThenElseStatementContext = IfThenElseStatementContext;

Java8Parser.prototype.ifThenElseStatement = function() {

    var localctx = new IfThenElseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, Java8Parser.RULE_ifThenElseStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1699;
        this.match(Java8Parser.IF);
        this.state = 1700;
        this.match(Java8Parser.LPAREN);
        this.state = 1701;
        this.expression();
        this.state = 1702;
        this.match(Java8Parser.RPAREN);
        this.state = 1703;
        this.statementNoShortIf();
        this.state = 1704;
        this.match(Java8Parser.ELSE);
        this.state = 1705;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfThenElseStatementNoShortIfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_ifThenElseStatementNoShortIf;
    return this;
}

IfThenElseStatementNoShortIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfThenElseStatementNoShortIfContext.prototype.constructor = IfThenElseStatementNoShortIfContext;

IfThenElseStatementNoShortIfContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfThenElseStatementNoShortIfContext.prototype.statementNoShortIf = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementNoShortIfContext);
    } else {
        return this.getTypedRuleContext(StatementNoShortIfContext,i);
    }
};

IfThenElseStatementNoShortIfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitIfThenElseStatementNoShortIf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.IfThenElseStatementNoShortIfContext = IfThenElseStatementNoShortIfContext;

Java8Parser.prototype.ifThenElseStatementNoShortIf = function() {

    var localctx = new IfThenElseStatementNoShortIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, Java8Parser.RULE_ifThenElseStatementNoShortIf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1707;
        this.match(Java8Parser.IF);
        this.state = 1708;
        this.match(Java8Parser.LPAREN);
        this.state = 1709;
        this.expression();
        this.state = 1710;
        this.match(Java8Parser.RPAREN);
        this.state = 1711;
        this.statementNoShortIf();
        this.state = 1712;
        this.match(Java8Parser.ELSE);
        this.state = 1713;
        this.statementNoShortIf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssertStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_assertStatement;
    return this;
}

AssertStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssertStatementContext.prototype.constructor = AssertStatementContext;

AssertStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AssertStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAssertStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AssertStatementContext = AssertStatementContext;

Java8Parser.prototype.assertStatement = function() {

    var localctx = new AssertStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, Java8Parser.RULE_assertStatement);
    try {
        this.state = 1725;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1715;
            this.match(Java8Parser.ASSERT);
            this.state = 1716;
            this.expression();
            this.state = 1717;
            this.match(Java8Parser.SEMI);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1719;
            this.match(Java8Parser.ASSERT);
            this.state = 1720;
            this.expression();
            this.state = 1721;
            this.match(Java8Parser.COLON);
            this.state = 1722;
            this.expression();
            this.state = 1723;
            this.match(Java8Parser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SwitchStatementContext.prototype.switchBlock = function() {
    return this.getTypedRuleContext(SwitchBlockContext,0);
};

SwitchStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSwitchStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SwitchStatementContext = SwitchStatementContext;

Java8Parser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, Java8Parser.RULE_switchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1727;
        this.match(Java8Parser.SWITCH);
        this.state = 1728;
        this.match(Java8Parser.LPAREN);
        this.state = 1729;
        this.expression();
        this.state = 1730;
        this.match(Java8Parser.RPAREN);
        this.state = 1731;
        this.switchBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_switchBlock;
    return this;
}

SwitchBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchBlockContext.prototype.constructor = SwitchBlockContext;

SwitchBlockContext.prototype.switchBlockStatementGroup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);
    } else {
        return this.getTypedRuleContext(SwitchBlockStatementGroupContext,i);
    }
};

SwitchBlockContext.prototype.switchLabel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SwitchLabelContext);
    } else {
        return this.getTypedRuleContext(SwitchLabelContext,i);
    }
};

SwitchBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSwitchBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SwitchBlockContext = SwitchBlockContext;

Java8Parser.prototype.switchBlock = function() {

    var localctx = new SwitchBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, Java8Parser.RULE_switchBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1733;
        this.match(Java8Parser.LBRACE);
        this.state = 1737;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,165,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1734;
                this.switchBlockStatementGroup(); 
            }
            this.state = 1739;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,165,this._ctx);
        }

        this.state = 1743;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.CASE || _la===Java8Parser.DEFAULT) {
            this.state = 1740;
            this.switchLabel();
            this.state = 1745;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1746;
        this.match(Java8Parser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchBlockStatementGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_switchBlockStatementGroup;
    return this;
}

SwitchBlockStatementGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchBlockStatementGroupContext.prototype.constructor = SwitchBlockStatementGroupContext;

SwitchBlockStatementGroupContext.prototype.switchLabels = function() {
    return this.getTypedRuleContext(SwitchLabelsContext,0);
};

SwitchBlockStatementGroupContext.prototype.blockStatements = function() {
    return this.getTypedRuleContext(BlockStatementsContext,0);
};

SwitchBlockStatementGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSwitchBlockStatementGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext;

Java8Parser.prototype.switchBlockStatementGroup = function() {

    var localctx = new SwitchBlockStatementGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, Java8Parser.RULE_switchBlockStatementGroup);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1748;
        this.switchLabels();
        this.state = 1749;
        this.blockStatements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchLabelsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_switchLabels;
    return this;
}

SwitchLabelsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchLabelsContext.prototype.constructor = SwitchLabelsContext;

SwitchLabelsContext.prototype.switchLabel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SwitchLabelContext);
    } else {
        return this.getTypedRuleContext(SwitchLabelContext,i);
    }
};

SwitchLabelsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSwitchLabels(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SwitchLabelsContext = SwitchLabelsContext;

Java8Parser.prototype.switchLabels = function() {

    var localctx = new SwitchLabelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, Java8Parser.RULE_switchLabels);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1751;
        this.switchLabel();
        this.state = 1755;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.CASE || _la===Java8Parser.DEFAULT) {
            this.state = 1752;
            this.switchLabel();
            this.state = 1757;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_switchLabel;
    return this;
}

SwitchLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchLabelContext.prototype.constructor = SwitchLabelContext;

SwitchLabelContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

SwitchLabelContext.prototype.enumConstantName = function() {
    return this.getTypedRuleContext(EnumConstantNameContext,0);
};

SwitchLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSwitchLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SwitchLabelContext = SwitchLabelContext;

Java8Parser.prototype.switchLabel = function() {

    var localctx = new SwitchLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, Java8Parser.RULE_switchLabel);
    try {
        this.state = 1768;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1758;
            this.match(Java8Parser.CASE);
            this.state = 1759;
            this.constantExpression();
            this.state = 1760;
            this.match(Java8Parser.COLON);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1762;
            this.match(Java8Parser.CASE);
            this.state = 1763;
            this.enumConstantName();
            this.state = 1764;
            this.match(Java8Parser.COLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1766;
            this.match(Java8Parser.DEFAULT);
            this.state = 1767;
            this.match(Java8Parser.COLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_enumConstantName;
    return this;
}

EnumConstantNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantNameContext.prototype.constructor = EnumConstantNameContext;

EnumConstantNameContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

EnumConstantNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEnumConstantName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EnumConstantNameContext = EnumConstantNameContext;

Java8Parser.prototype.enumConstantName = function() {

    var localctx = new EnumConstantNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, Java8Parser.RULE_enumConstantName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1770;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitWhileStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.WhileStatementContext = WhileStatementContext;

Java8Parser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, Java8Parser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1772;
        this.match(Java8Parser.WHILE);
        this.state = 1773;
        this.match(Java8Parser.LPAREN);
        this.state = 1774;
        this.expression();
        this.state = 1775;
        this.match(Java8Parser.RPAREN);
        this.state = 1776;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementNoShortIfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_whileStatementNoShortIf;
    return this;
}

WhileStatementNoShortIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementNoShortIfContext.prototype.constructor = WhileStatementNoShortIfContext;

WhileStatementNoShortIfContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementNoShortIfContext.prototype.statementNoShortIf = function() {
    return this.getTypedRuleContext(StatementNoShortIfContext,0);
};

WhileStatementNoShortIfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitWhileStatementNoShortIf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.WhileStatementNoShortIfContext = WhileStatementNoShortIfContext;

Java8Parser.prototype.whileStatementNoShortIf = function() {

    var localctx = new WhileStatementNoShortIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, Java8Parser.RULE_whileStatementNoShortIf);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1778;
        this.match(Java8Parser.WHILE);
        this.state = 1779;
        this.match(Java8Parser.LPAREN);
        this.state = 1780;
        this.expression();
        this.state = 1781;
        this.match(Java8Parser.RPAREN);
        this.state = 1782;
        this.statementNoShortIf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_doStatement;
    return this;
}

DoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

DoStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitDoStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.DoStatementContext = DoStatementContext;

Java8Parser.prototype.doStatement = function() {

    var localctx = new DoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, Java8Parser.RULE_doStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1784;
        this.match(Java8Parser.DO);
        this.state = 1785;
        this.statement();
        this.state = 1786;
        this.match(Java8Parser.WHILE);
        this.state = 1787;
        this.match(Java8Parser.LPAREN);
        this.state = 1788;
        this.expression();
        this.state = 1789;
        this.match(Java8Parser.RPAREN);
        this.state = 1790;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.basicForStatement = function() {
    return this.getTypedRuleContext(BasicForStatementContext,0);
};

ForStatementContext.prototype.enhancedForStatement = function() {
    return this.getTypedRuleContext(EnhancedForStatementContext,0);
};

ForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ForStatementContext = ForStatementContext;

Java8Parser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, Java8Parser.RULE_forStatement);
    try {
        this.state = 1794;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1792;
            this.basicForStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1793;
            this.enhancedForStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementNoShortIfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_forStatementNoShortIf;
    return this;
}

ForStatementNoShortIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementNoShortIfContext.prototype.constructor = ForStatementNoShortIfContext;

ForStatementNoShortIfContext.prototype.basicForStatementNoShortIf = function() {
    return this.getTypedRuleContext(BasicForStatementNoShortIfContext,0);
};

ForStatementNoShortIfContext.prototype.enhancedForStatementNoShortIf = function() {
    return this.getTypedRuleContext(EnhancedForStatementNoShortIfContext,0);
};

ForStatementNoShortIfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitForStatementNoShortIf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ForStatementNoShortIfContext = ForStatementNoShortIfContext;

Java8Parser.prototype.forStatementNoShortIf = function() {

    var localctx = new ForStatementNoShortIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, Java8Parser.RULE_forStatementNoShortIf);
    try {
        this.state = 1798;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1796;
            this.basicForStatementNoShortIf();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1797;
            this.enhancedForStatementNoShortIf();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BasicForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_basicForStatement;
    return this;
}

BasicForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasicForStatementContext.prototype.constructor = BasicForStatementContext;

BasicForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BasicForStatementContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

BasicForStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BasicForStatementContext.prototype.forUpdate = function() {
    return this.getTypedRuleContext(ForUpdateContext,0);
};

BasicForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitBasicForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.BasicForStatementContext = BasicForStatementContext;

Java8Parser.prototype.basicForStatement = function() {

    var localctx = new BasicForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, Java8Parser.RULE_basicForStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1800;
        this.match(Java8Parser.FOR);
        this.state = 1801;
        this.match(Java8Parser.LPAREN);
        this.state = 1803;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
            this.state = 1802;
            this.forInit();
        }

        this.state = 1805;
        this.match(Java8Parser.SEMI);
        this.state = 1807;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1806;
            this.expression();
        }

        this.state = 1809;
        this.match(Java8Parser.SEMI);
        this.state = 1811;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
            this.state = 1810;
            this.forUpdate();
        }

        this.state = 1813;
        this.match(Java8Parser.RPAREN);
        this.state = 1814;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BasicForStatementNoShortIfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_basicForStatementNoShortIf;
    return this;
}

BasicForStatementNoShortIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasicForStatementNoShortIfContext.prototype.constructor = BasicForStatementNoShortIfContext;

BasicForStatementNoShortIfContext.prototype.statementNoShortIf = function() {
    return this.getTypedRuleContext(StatementNoShortIfContext,0);
};

BasicForStatementNoShortIfContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

BasicForStatementNoShortIfContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BasicForStatementNoShortIfContext.prototype.forUpdate = function() {
    return this.getTypedRuleContext(ForUpdateContext,0);
};

BasicForStatementNoShortIfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitBasicForStatementNoShortIf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.BasicForStatementNoShortIfContext = BasicForStatementNoShortIfContext;

Java8Parser.prototype.basicForStatementNoShortIf = function() {

    var localctx = new BasicForStatementNoShortIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, Java8Parser.RULE_basicForStatementNoShortIf);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1816;
        this.match(Java8Parser.FOR);
        this.state = 1817;
        this.match(Java8Parser.LPAREN);
        this.state = 1819;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
            this.state = 1818;
            this.forInit();
        }

        this.state = 1821;
        this.match(Java8Parser.SEMI);
        this.state = 1823;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1822;
            this.expression();
        }

        this.state = 1825;
        this.match(Java8Parser.SEMI);
        this.state = 1827;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
            this.state = 1826;
            this.forUpdate();
        }

        this.state = 1829;
        this.match(Java8Parser.RPAREN);
        this.state = 1830;
        this.statementNoShortIf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_forInit;
    return this;
}

ForInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitContext.prototype.constructor = ForInitContext;

ForInitContext.prototype.statementExpressionList = function() {
    return this.getTypedRuleContext(StatementExpressionListContext,0);
};

ForInitContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

ForInitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitForInit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ForInitContext = ForInitContext;

Java8Parser.prototype.forInit = function() {

    var localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, Java8Parser.RULE_forInit);
    try {
        this.state = 1834;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1832;
            this.statementExpressionList();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1833;
            this.localVariableDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_forUpdate;
    return this;
}

ForUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForUpdateContext.prototype.constructor = ForUpdateContext;

ForUpdateContext.prototype.statementExpressionList = function() {
    return this.getTypedRuleContext(StatementExpressionListContext,0);
};

ForUpdateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitForUpdate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ForUpdateContext = ForUpdateContext;

Java8Parser.prototype.forUpdate = function() {

    var localctx = new ForUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, Java8Parser.RULE_forUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1836;
        this.statementExpressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_statementExpressionList;
    return this;
}

StatementExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementExpressionListContext.prototype.constructor = StatementExpressionListContext;

StatementExpressionListContext.prototype.statementExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementExpressionContext);
    } else {
        return this.getTypedRuleContext(StatementExpressionContext,i);
    }
};

StatementExpressionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitStatementExpressionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.StatementExpressionListContext = StatementExpressionListContext;

Java8Parser.prototype.statementExpressionList = function() {

    var localctx = new StatementExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, Java8Parser.RULE_statementExpressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1838;
        this.statementExpression();
        this.state = 1843;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.COMMA) {
            this.state = 1839;
            this.match(Java8Parser.COMMA);
            this.state = 1840;
            this.statementExpression();
            this.state = 1845;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnhancedForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_enhancedForStatement;
    return this;
}

EnhancedForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForStatementContext.prototype.constructor = EnhancedForStatementContext;

EnhancedForStatementContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

EnhancedForStatementContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

EnhancedForStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnhancedForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

EnhancedForStatementContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

EnhancedForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEnhancedForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EnhancedForStatementContext = EnhancedForStatementContext;

Java8Parser.prototype.enhancedForStatement = function() {

    var localctx = new EnhancedForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, Java8Parser.RULE_enhancedForStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1846;
        this.match(Java8Parser.FOR);
        this.state = 1847;
        this.match(Java8Parser.LPAREN);
        this.state = 1851;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
            this.state = 1848;
            this.variableModifier();
            this.state = 1853;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1854;
        this.unannType();
        this.state = 1855;
        this.variableDeclaratorId();
        this.state = 1856;
        this.match(Java8Parser.COLON);
        this.state = 1857;
        this.expression();
        this.state = 1858;
        this.match(Java8Parser.RPAREN);
        this.state = 1859;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnhancedForStatementNoShortIfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_enhancedForStatementNoShortIf;
    return this;
}

EnhancedForStatementNoShortIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForStatementNoShortIfContext.prototype.constructor = EnhancedForStatementNoShortIfContext;

EnhancedForStatementNoShortIfContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

EnhancedForStatementNoShortIfContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

EnhancedForStatementNoShortIfContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnhancedForStatementNoShortIfContext.prototype.statementNoShortIf = function() {
    return this.getTypedRuleContext(StatementNoShortIfContext,0);
};

EnhancedForStatementNoShortIfContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

EnhancedForStatementNoShortIfContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEnhancedForStatementNoShortIf(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EnhancedForStatementNoShortIfContext = EnhancedForStatementNoShortIfContext;

Java8Parser.prototype.enhancedForStatementNoShortIf = function() {

    var localctx = new EnhancedForStatementNoShortIfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, Java8Parser.RULE_enhancedForStatementNoShortIf);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1861;
        this.match(Java8Parser.FOR);
        this.state = 1862;
        this.match(Java8Parser.LPAREN);
        this.state = 1866;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
            this.state = 1863;
            this.variableModifier();
            this.state = 1868;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1869;
        this.unannType();
        this.state = 1870;
        this.variableDeclaratorId();
        this.state = 1871;
        this.match(Java8Parser.COLON);
        this.state = 1872;
        this.expression();
        this.state = 1873;
        this.match(Java8Parser.RPAREN);
        this.state = 1874;
        this.statementNoShortIf();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

BreakStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitBreakStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.BreakStatementContext = BreakStatementContext;

Java8Parser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, Java8Parser.RULE_breakStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1876;
        this.match(Java8Parser.BREAK);
        this.state = 1878;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.Identifier) {
            this.state = 1877;
            this.match(Java8Parser.Identifier);
        }

        this.state = 1880;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

ContinueStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitContinueStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ContinueStatementContext = ContinueStatementContext;

Java8Parser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, Java8Parser.RULE_continueStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1882;
        this.match(Java8Parser.CONTINUE);
        this.state = 1884;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.Identifier) {
            this.state = 1883;
            this.match(Java8Parser.Identifier);
        }

        this.state = 1886;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ReturnStatementContext = ReturnStatementContext;

Java8Parser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, Java8Parser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1888;
        this.match(Java8Parser.RETURN);
        this.state = 1890;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 1889;
            this.expression();
        }

        this.state = 1892;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ThrowStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitThrowStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ThrowStatementContext = ThrowStatementContext;

Java8Parser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, Java8Parser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1894;
        this.match(Java8Parser.THROW);
        this.state = 1895;
        this.expression();
        this.state = 1896;
        this.match(Java8Parser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SynchronizedStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_synchronizedStatement;
    return this;
}

SynchronizedStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SynchronizedStatementContext.prototype.constructor = SynchronizedStatementContext;

SynchronizedStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SynchronizedStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

SynchronizedStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSynchronizedStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SynchronizedStatementContext = SynchronizedStatementContext;

Java8Parser.prototype.synchronizedStatement = function() {

    var localctx = new SynchronizedStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, Java8Parser.RULE_synchronizedStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1898;
        this.match(Java8Parser.SYNCHRONIZED);
        this.state = 1899;
        this.match(Java8Parser.LPAREN);
        this.state = 1900;
        this.expression();
        this.state = 1901;
        this.match(Java8Parser.RPAREN);
        this.state = 1902;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_tryStatement;
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatementContext.prototype.catches = function() {
    return this.getTypedRuleContext(CatchesContext,0);
};

TryStatementContext.prototype.finally_ = function() {
    return this.getTypedRuleContext(Finally_Context,0);
};

TryStatementContext.prototype.tryWithResourcesStatement = function() {
    return this.getTypedRuleContext(TryWithResourcesStatementContext,0);
};

TryStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTryStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TryStatementContext = TryStatementContext;

Java8Parser.prototype.tryStatement = function() {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, Java8Parser.RULE_tryStatement);
    var _la = 0; // Token type
    try {
        this.state = 1916;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1904;
            this.match(Java8Parser.TRY);
            this.state = 1905;
            this.block();
            this.state = 1906;
            this.catches();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1908;
            this.match(Java8Parser.TRY);
            this.state = 1909;
            this.block();
            this.state = 1911;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.CATCH) {
                this.state = 1910;
                this.catches();
            }

            this.state = 1913;
            this.finally_();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1915;
            this.tryWithResourcesStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_catches;
    return this;
}

CatchesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchesContext.prototype.constructor = CatchesContext;

CatchesContext.prototype.catchClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext,i);
    }
};

CatchesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitCatches(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.CatchesContext = CatchesContext;

Java8Parser.prototype.catches = function() {

    var localctx = new CatchesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, Java8Parser.RULE_catches);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1918;
        this.catchClause();
        this.state = 1922;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.CATCH) {
            this.state = 1919;
            this.catchClause();
            this.state = 1924;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_catchClause;
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.catchFormalParameter = function() {
    return this.getTypedRuleContext(CatchFormalParameterContext,0);
};

CatchClauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitCatchClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.CatchClauseContext = CatchClauseContext;

Java8Parser.prototype.catchClause = function() {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, Java8Parser.RULE_catchClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1925;
        this.match(Java8Parser.CATCH);
        this.state = 1926;
        this.match(Java8Parser.LPAREN);
        this.state = 1927;
        this.catchFormalParameter();
        this.state = 1928;
        this.match(Java8Parser.RPAREN);
        this.state = 1929;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchFormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_catchFormalParameter;
    return this;
}

CatchFormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchFormalParameterContext.prototype.constructor = CatchFormalParameterContext;

CatchFormalParameterContext.prototype.catchType = function() {
    return this.getTypedRuleContext(CatchTypeContext,0);
};

CatchFormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

CatchFormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

CatchFormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitCatchFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.CatchFormalParameterContext = CatchFormalParameterContext;

Java8Parser.prototype.catchFormalParameter = function() {

    var localctx = new CatchFormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, Java8Parser.RULE_catchFormalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1934;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
            this.state = 1931;
            this.variableModifier();
            this.state = 1936;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1937;
        this.catchType();
        this.state = 1938;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_catchType;
    return this;
}

CatchTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchTypeContext.prototype.constructor = CatchTypeContext;

CatchTypeContext.prototype.unannClassType = function() {
    return this.getTypedRuleContext(UnannClassTypeContext,0);
};

CatchTypeContext.prototype.classType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassTypeContext);
    } else {
        return this.getTypedRuleContext(ClassTypeContext,i);
    }
};

CatchTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitCatchType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.CatchTypeContext = CatchTypeContext;

Java8Parser.prototype.catchType = function() {

    var localctx = new CatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, Java8Parser.RULE_catchType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1940;
        this.unannClassType();
        this.state = 1945;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.BITOR) {
            this.state = 1941;
            this.match(Java8Parser.BITOR);
            this.state = 1942;
            this.classType();
            this.state = 1947;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Finally_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_finally_;
    return this;
}

Finally_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Finally_Context.prototype.constructor = Finally_Context;

Finally_Context.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Finally_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFinally_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.Finally_Context = Finally_Context;

Java8Parser.prototype.finally_ = function() {

    var localctx = new Finally_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 376, Java8Parser.RULE_finally_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1948;
        this.match(Java8Parser.FINALLY);
        this.state = 1949;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryWithResourcesStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_tryWithResourcesStatement;
    return this;
}

TryWithResourcesStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryWithResourcesStatementContext.prototype.constructor = TryWithResourcesStatementContext;

TryWithResourcesStatementContext.prototype.resourceSpecification = function() {
    return this.getTypedRuleContext(ResourceSpecificationContext,0);
};

TryWithResourcesStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryWithResourcesStatementContext.prototype.catches = function() {
    return this.getTypedRuleContext(CatchesContext,0);
};

TryWithResourcesStatementContext.prototype.finally_ = function() {
    return this.getTypedRuleContext(Finally_Context,0);
};

TryWithResourcesStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTryWithResourcesStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TryWithResourcesStatementContext = TryWithResourcesStatementContext;

Java8Parser.prototype.tryWithResourcesStatement = function() {

    var localctx = new TryWithResourcesStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, Java8Parser.RULE_tryWithResourcesStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1951;
        this.match(Java8Parser.TRY);
        this.state = 1952;
        this.resourceSpecification();
        this.state = 1953;
        this.block();
        this.state = 1955;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.CATCH) {
            this.state = 1954;
            this.catches();
        }

        this.state = 1958;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.FINALLY) {
            this.state = 1957;
            this.finally_();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_resourceSpecification;
    return this;
}

ResourceSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceSpecificationContext.prototype.constructor = ResourceSpecificationContext;

ResourceSpecificationContext.prototype.resourceList = function() {
    return this.getTypedRuleContext(ResourceListContext,0);
};

ResourceSpecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitResourceSpecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ResourceSpecificationContext = ResourceSpecificationContext;

Java8Parser.prototype.resourceSpecification = function() {

    var localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, Java8Parser.RULE_resourceSpecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1960;
        this.match(Java8Parser.LPAREN);
        this.state = 1961;
        this.resourceList();
        this.state = 1963;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.SEMI) {
            this.state = 1962;
            this.match(Java8Parser.SEMI);
        }

        this.state = 1965;
        this.match(Java8Parser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_resourceList;
    return this;
}

ResourceListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceListContext.prototype.constructor = ResourceListContext;

ResourceListContext.prototype.resource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceContext);
    } else {
        return this.getTypedRuleContext(ResourceContext,i);
    }
};

ResourceListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitResourceList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ResourceListContext = ResourceListContext;

Java8Parser.prototype.resourceList = function() {

    var localctx = new ResourceListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, Java8Parser.RULE_resourceList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1967;
        this.resource();
        this.state = 1972;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,192,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1968;
                this.match(Java8Parser.SEMI);
                this.state = 1969;
                this.resource(); 
            }
            this.state = 1974;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,192,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.unannType = function() {
    return this.getTypedRuleContext(UnannTypeContext,0);
};

ResourceContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

ResourceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ResourceContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

ResourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitResource(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ResourceContext = ResourceContext;

Java8Parser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, Java8Parser.RULE_resource);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1978;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
            this.state = 1975;
            this.variableModifier();
            this.state = 1980;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1981;
        this.unannType();
        this.state = 1982;
        this.variableDeclaratorId();
        this.state = 1983;
        this.match(Java8Parser.ASSIGN);
        this.state = 1984;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.primaryNoNewArray_lfno_primary = function() {
    return this.getTypedRuleContext(PrimaryNoNewArray_lfno_primaryContext,0);
};

PrimaryContext.prototype.arrayCreationExpression = function() {
    return this.getTypedRuleContext(ArrayCreationExpressionContext,0);
};

PrimaryContext.prototype.primaryNoNewArray_lf_primary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryNoNewArray_lf_primaryContext);
    } else {
        return this.getTypedRuleContext(PrimaryNoNewArray_lf_primaryContext,i);
    }
};

PrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimaryContext = PrimaryContext;

Java8Parser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, Java8Parser.RULE_primary);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1988;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1986;
            this.primaryNoNewArray_lfno_primary();
            break;

        case 2:
            this.state = 1987;
            this.arrayCreationExpression();
            break;

        }
        this.state = 1993;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,195,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1990;
                this.primaryNoNewArray_lf_primary(); 
            }
            this.state = 1995;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,195,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryNoNewArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primaryNoNewArray;
    return this;
}

PrimaryNoNewArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryNoNewArrayContext.prototype.constructor = PrimaryNoNewArrayContext;

PrimaryNoNewArrayContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryNoNewArrayContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

PrimaryNoNewArrayContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryNoNewArrayContext.prototype.classInstanceCreationExpression = function() {
    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
};

PrimaryNoNewArrayContext.prototype.fieldAccess = function() {
    return this.getTypedRuleContext(FieldAccessContext,0);
};

PrimaryNoNewArrayContext.prototype.arrayAccess = function() {
    return this.getTypedRuleContext(ArrayAccessContext,0);
};

PrimaryNoNewArrayContext.prototype.methodInvocation = function() {
    return this.getTypedRuleContext(MethodInvocationContext,0);
};

PrimaryNoNewArrayContext.prototype.methodReference = function() {
    return this.getTypedRuleContext(MethodReferenceContext,0);
};

PrimaryNoNewArrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimaryNoNewArray(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimaryNoNewArrayContext = PrimaryNoNewArrayContext;

Java8Parser.prototype.primaryNoNewArray = function() {

    var localctx = new PrimaryNoNewArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, Java8Parser.RULE_primaryNoNewArray);
    var _la = 0; // Token type
    try {
        this.state = 2025;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1996;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1997;
            this.typeName();
            this.state = 2002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.LBRACK) {
                this.state = 1998;
                this.match(Java8Parser.LBRACK);
                this.state = 1999;
                this.match(Java8Parser.RBRACK);
                this.state = 2004;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2005;
            this.match(Java8Parser.DOT);
            this.state = 2006;
            this.match(Java8Parser.CLASS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2008;
            this.match(Java8Parser.VOID);
            this.state = 2009;
            this.match(Java8Parser.DOT);
            this.state = 2010;
            this.match(Java8Parser.CLASS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2011;
            this.match(Java8Parser.THIS);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2012;
            this.typeName();
            this.state = 2013;
            this.match(Java8Parser.DOT);
            this.state = 2014;
            this.match(Java8Parser.THIS);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2016;
            this.match(Java8Parser.LPAREN);
            this.state = 2017;
            this.expression();
            this.state = 2018;
            this.match(Java8Parser.RPAREN);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2020;
            this.classInstanceCreationExpression();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2021;
            this.fieldAccess();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2022;
            this.arrayAccess();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2023;
            this.methodInvocation();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2024;
            this.methodReference();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryNoNewArray_lf_arrayAccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess;
    return this;
}

PrimaryNoNewArray_lf_arrayAccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryNoNewArray_lf_arrayAccessContext.prototype.constructor = PrimaryNoNewArray_lf_arrayAccessContext;


PrimaryNoNewArray_lf_arrayAccessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimaryNoNewArray_lf_arrayAccess(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimaryNoNewArray_lf_arrayAccessContext = PrimaryNoNewArray_lf_arrayAccessContext;

Java8Parser.prototype.primaryNoNewArray_lf_arrayAccess = function() {

    var localctx = new PrimaryNoNewArray_lf_arrayAccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryNoNewArray_lfno_arrayAccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess;
    return this;
}

PrimaryNoNewArray_lfno_arrayAccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryNoNewArray_lfno_arrayAccessContext.prototype.constructor = PrimaryNoNewArray_lfno_arrayAccessContext;

PrimaryNoNewArray_lfno_arrayAccessContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryNoNewArray_lfno_arrayAccessContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

PrimaryNoNewArray_lfno_arrayAccessContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryNoNewArray_lfno_arrayAccessContext.prototype.classInstanceCreationExpression = function() {
    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
};

PrimaryNoNewArray_lfno_arrayAccessContext.prototype.fieldAccess = function() {
    return this.getTypedRuleContext(FieldAccessContext,0);
};

PrimaryNoNewArray_lfno_arrayAccessContext.prototype.methodInvocation = function() {
    return this.getTypedRuleContext(MethodInvocationContext,0);
};

PrimaryNoNewArray_lfno_arrayAccessContext.prototype.methodReference = function() {
    return this.getTypedRuleContext(MethodReferenceContext,0);
};

PrimaryNoNewArray_lfno_arrayAccessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimaryNoNewArray_lfno_arrayAccess(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimaryNoNewArray_lfno_arrayAccessContext = PrimaryNoNewArray_lfno_arrayAccessContext;

Java8Parser.prototype.primaryNoNewArray_lfno_arrayAccess = function() {

    var localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess);
    var _la = 0; // Token type
    try {
        this.state = 2057;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2029;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2030;
            this.typeName();
            this.state = 2035;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.LBRACK) {
                this.state = 2031;
                this.match(Java8Parser.LBRACK);
                this.state = 2032;
                this.match(Java8Parser.RBRACK);
                this.state = 2037;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2038;
            this.match(Java8Parser.DOT);
            this.state = 2039;
            this.match(Java8Parser.CLASS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2041;
            this.match(Java8Parser.VOID);
            this.state = 2042;
            this.match(Java8Parser.DOT);
            this.state = 2043;
            this.match(Java8Parser.CLASS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2044;
            this.match(Java8Parser.THIS);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2045;
            this.typeName();
            this.state = 2046;
            this.match(Java8Parser.DOT);
            this.state = 2047;
            this.match(Java8Parser.THIS);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2049;
            this.match(Java8Parser.LPAREN);
            this.state = 2050;
            this.expression();
            this.state = 2051;
            this.match(Java8Parser.RPAREN);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2053;
            this.classInstanceCreationExpression();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2054;
            this.fieldAccess();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2055;
            this.methodInvocation();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2056;
            this.methodReference();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryNoNewArray_lf_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_primary;
    return this;
}

PrimaryNoNewArray_lf_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryNoNewArray_lf_primaryContext.prototype.constructor = PrimaryNoNewArray_lf_primaryContext;

PrimaryNoNewArray_lf_primaryContext.prototype.classInstanceCreationExpression_lf_primary = function() {
    return this.getTypedRuleContext(ClassInstanceCreationExpression_lf_primaryContext,0);
};

PrimaryNoNewArray_lf_primaryContext.prototype.fieldAccess_lf_primary = function() {
    return this.getTypedRuleContext(FieldAccess_lf_primaryContext,0);
};

PrimaryNoNewArray_lf_primaryContext.prototype.arrayAccess_lf_primary = function() {
    return this.getTypedRuleContext(ArrayAccess_lf_primaryContext,0);
};

PrimaryNoNewArray_lf_primaryContext.prototype.methodInvocation_lf_primary = function() {
    return this.getTypedRuleContext(MethodInvocation_lf_primaryContext,0);
};

PrimaryNoNewArray_lf_primaryContext.prototype.methodReference_lf_primary = function() {
    return this.getTypedRuleContext(MethodReference_lf_primaryContext,0);
};

PrimaryNoNewArray_lf_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimaryNoNewArray_lf_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimaryNoNewArray_lf_primaryContext = PrimaryNoNewArray_lf_primaryContext;

Java8Parser.prototype.primaryNoNewArray_lf_primary = function() {

    var localctx = new PrimaryNoNewArray_lf_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, Java8Parser.RULE_primaryNoNewArray_lf_primary);
    try {
        this.state = 2064;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2059;
            this.classInstanceCreationExpression_lf_primary();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2060;
            this.fieldAccess_lf_primary();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2061;
            this.arrayAccess_lf_primary();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2062;
            this.methodInvocation_lf_primary();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2063;
            this.methodReference_lf_primary();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary;
    return this;
}

PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext.prototype.constructor = PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext;


PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext = PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext;

Java8Parser.prototype.primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = function() {

    var localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary;
    return this;
}

PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.constructor = PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext;

PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.classInstanceCreationExpression_lf_primary = function() {
    return this.getTypedRuleContext(ClassInstanceCreationExpression_lf_primaryContext,0);
};

PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.fieldAccess_lf_primary = function() {
    return this.getTypedRuleContext(FieldAccess_lf_primaryContext,0);
};

PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.methodInvocation_lf_primary = function() {
    return this.getTypedRuleContext(MethodInvocation_lf_primaryContext,0);
};

PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.methodReference_lf_primary = function() {
    return this.getTypedRuleContext(MethodReference_lf_primaryContext,0);
};

PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext = PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext;

Java8Parser.prototype.primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = function() {

    var localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);
    try {
        this.state = 2072;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2068;
            this.classInstanceCreationExpression_lf_primary();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2069;
            this.fieldAccess_lf_primary();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2070;
            this.methodInvocation_lf_primary();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2071;
            this.methodReference_lf_primary();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryNoNewArray_lfno_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_primary;
    return this;
}

PrimaryNoNewArray_lfno_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryNoNewArray_lfno_primaryContext.prototype.constructor = PrimaryNoNewArray_lfno_primaryContext;

PrimaryNoNewArray_lfno_primaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryNoNewArray_lfno_primaryContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

PrimaryNoNewArray_lfno_primaryContext.prototype.unannPrimitiveType = function() {
    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
};

PrimaryNoNewArray_lfno_primaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryNoNewArray_lfno_primaryContext.prototype.classInstanceCreationExpression_lfno_primary = function() {
    return this.getTypedRuleContext(ClassInstanceCreationExpression_lfno_primaryContext,0);
};

PrimaryNoNewArray_lfno_primaryContext.prototype.fieldAccess_lfno_primary = function() {
    return this.getTypedRuleContext(FieldAccess_lfno_primaryContext,0);
};

PrimaryNoNewArray_lfno_primaryContext.prototype.arrayAccess_lfno_primary = function() {
    return this.getTypedRuleContext(ArrayAccess_lfno_primaryContext,0);
};

PrimaryNoNewArray_lfno_primaryContext.prototype.methodInvocation_lfno_primary = function() {
    return this.getTypedRuleContext(MethodInvocation_lfno_primaryContext,0);
};

PrimaryNoNewArray_lfno_primaryContext.prototype.methodReference_lfno_primary = function() {
    return this.getTypedRuleContext(MethodReference_lfno_primaryContext,0);
};

PrimaryNoNewArray_lfno_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimaryNoNewArray_lfno_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimaryNoNewArray_lfno_primaryContext = PrimaryNoNewArray_lfno_primaryContext;

Java8Parser.prototype.primaryNoNewArray_lfno_primary = function() {

    var localctx = new PrimaryNoNewArray_lfno_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, Java8Parser.RULE_primaryNoNewArray_lfno_primary);
    var _la = 0; // Token type
    try {
        this.state = 2114;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2074;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2075;
            this.typeName();
            this.state = 2080;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.LBRACK) {
                this.state = 2076;
                this.match(Java8Parser.LBRACK);
                this.state = 2077;
                this.match(Java8Parser.RBRACK);
                this.state = 2082;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2083;
            this.match(Java8Parser.DOT);
            this.state = 2084;
            this.match(Java8Parser.CLASS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2086;
            this.unannPrimitiveType();
            this.state = 2091;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.LBRACK) {
                this.state = 2087;
                this.match(Java8Parser.LBRACK);
                this.state = 2088;
                this.match(Java8Parser.RBRACK);
                this.state = 2093;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2094;
            this.match(Java8Parser.DOT);
            this.state = 2095;
            this.match(Java8Parser.CLASS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2097;
            this.match(Java8Parser.VOID);
            this.state = 2098;
            this.match(Java8Parser.DOT);
            this.state = 2099;
            this.match(Java8Parser.CLASS);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2100;
            this.match(Java8Parser.THIS);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2101;
            this.typeName();
            this.state = 2102;
            this.match(Java8Parser.DOT);
            this.state = 2103;
            this.match(Java8Parser.THIS);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2105;
            this.match(Java8Parser.LPAREN);
            this.state = 2106;
            this.expression();
            this.state = 2107;
            this.match(Java8Parser.RPAREN);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2109;
            this.classInstanceCreationExpression_lfno_primary();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2110;
            this.fieldAccess_lfno_primary();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2111;
            this.arrayAccess_lfno_primary();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2112;
            this.methodInvocation_lfno_primary();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2113;
            this.methodReference_lfno_primary();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary;
    return this;
}

PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext.prototype.constructor = PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext;


PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext = PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext;

Java8Parser.prototype.primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = function() {

    var localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary;
    return this;
}

PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.constructor = PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext;

PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.unannPrimitiveType = function() {
    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
};

PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.classInstanceCreationExpression_lfno_primary = function() {
    return this.getTypedRuleContext(ClassInstanceCreationExpression_lfno_primaryContext,0);
};

PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.fieldAccess_lfno_primary = function() {
    return this.getTypedRuleContext(FieldAccess_lfno_primaryContext,0);
};

PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.methodInvocation_lfno_primary = function() {
    return this.getTypedRuleContext(MethodInvocation_lfno_primaryContext,0);
};

PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.methodReference_lfno_primary = function() {
    return this.getTypedRuleContext(MethodReference_lfno_primaryContext,0);
};

PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext = PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext;

Java8Parser.prototype.primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = function() {

    var localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
    var _la = 0; // Token type
    try {
        this.state = 2157;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2118;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2119;
            this.typeName();
            this.state = 2124;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.LBRACK) {
                this.state = 2120;
                this.match(Java8Parser.LBRACK);
                this.state = 2121;
                this.match(Java8Parser.RBRACK);
                this.state = 2126;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2127;
            this.match(Java8Parser.DOT);
            this.state = 2128;
            this.match(Java8Parser.CLASS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2130;
            this.unannPrimitiveType();
            this.state = 2135;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.LBRACK) {
                this.state = 2131;
                this.match(Java8Parser.LBRACK);
                this.state = 2132;
                this.match(Java8Parser.RBRACK);
                this.state = 2137;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2138;
            this.match(Java8Parser.DOT);
            this.state = 2139;
            this.match(Java8Parser.CLASS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2141;
            this.match(Java8Parser.VOID);
            this.state = 2142;
            this.match(Java8Parser.DOT);
            this.state = 2143;
            this.match(Java8Parser.CLASS);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2144;
            this.match(Java8Parser.THIS);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2145;
            this.typeName();
            this.state = 2146;
            this.match(Java8Parser.DOT);
            this.state = 2147;
            this.match(Java8Parser.THIS);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2149;
            this.match(Java8Parser.LPAREN);
            this.state = 2150;
            this.expression();
            this.state = 2151;
            this.match(Java8Parser.RPAREN);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2153;
            this.classInstanceCreationExpression_lfno_primary();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2154;
            this.fieldAccess_lfno_primary();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2155;
            this.methodInvocation_lfno_primary();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2156;
            this.methodReference_lfno_primary();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassInstanceCreationExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classInstanceCreationExpression;
    return this;
}

ClassInstanceCreationExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassInstanceCreationExpressionContext.prototype.constructor = ClassInstanceCreationExpressionContext;

ClassInstanceCreationExpressionContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Java8Parser.Identifier);
    } else {
        return this.getToken(Java8Parser.Identifier, i);
    }
};


ClassInstanceCreationExpressionContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

ClassInstanceCreationExpressionContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

ClassInstanceCreationExpressionContext.prototype.typeArgumentsOrDiamond = function() {
    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
};

ClassInstanceCreationExpressionContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ClassInstanceCreationExpressionContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassInstanceCreationExpressionContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

ClassInstanceCreationExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

ClassInstanceCreationExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassInstanceCreationExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassInstanceCreationExpressionContext = ClassInstanceCreationExpressionContext;

Java8Parser.prototype.classInstanceCreationExpression = function() {

    var localctx = new ClassInstanceCreationExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, Java8Parser.RULE_classInstanceCreationExpression);
    var _la = 0; // Token type
    try {
        this.state = 2242;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2159;
            this.match(Java8Parser.NEW);
            this.state = 2161;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2160;
                this.typeArguments();
            }

            this.state = 2166;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 2163;
                this.annotation();
                this.state = 2168;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2169;
            this.match(Java8Parser.Identifier);
            this.state = 2180;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.DOT) {
                this.state = 2170;
                this.match(Java8Parser.DOT);
                this.state = 2174;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===Java8Parser.AT) {
                    this.state = 2171;
                    this.annotation();
                    this.state = 2176;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2177;
                this.match(Java8Parser.Identifier);
                this.state = 2182;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2184;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2183;
                this.typeArgumentsOrDiamond();
            }

            this.state = 2186;
            this.match(Java8Parser.LPAREN);
            this.state = 2188;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2187;
                this.argumentList();
            }

            this.state = 2190;
            this.match(Java8Parser.RPAREN);
            this.state = 2192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LBRACE) {
                this.state = 2191;
                this.classBody();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2194;
            this.expressionName();
            this.state = 2195;
            this.match(Java8Parser.DOT);
            this.state = 2196;
            this.match(Java8Parser.NEW);
            this.state = 2198;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2197;
                this.typeArguments();
            }

            this.state = 2203;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 2200;
                this.annotation();
                this.state = 2205;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2206;
            this.match(Java8Parser.Identifier);
            this.state = 2208;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2207;
                this.typeArgumentsOrDiamond();
            }

            this.state = 2210;
            this.match(Java8Parser.LPAREN);
            this.state = 2212;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2211;
                this.argumentList();
            }

            this.state = 2214;
            this.match(Java8Parser.RPAREN);
            this.state = 2216;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LBRACE) {
                this.state = 2215;
                this.classBody();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2218;
            this.primary();
            this.state = 2219;
            this.match(Java8Parser.DOT);
            this.state = 2220;
            this.match(Java8Parser.NEW);
            this.state = 2222;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2221;
                this.typeArguments();
            }

            this.state = 2227;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 2224;
                this.annotation();
                this.state = 2229;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2230;
            this.match(Java8Parser.Identifier);
            this.state = 2232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2231;
                this.typeArgumentsOrDiamond();
            }

            this.state = 2234;
            this.match(Java8Parser.LPAREN);
            this.state = 2236;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2235;
                this.argumentList();
            }

            this.state = 2238;
            this.match(Java8Parser.RPAREN);
            this.state = 2240;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LBRACE) {
                this.state = 2239;
                this.classBody();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassInstanceCreationExpression_lf_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classInstanceCreationExpression_lf_primary;
    return this;
}

ClassInstanceCreationExpression_lf_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassInstanceCreationExpression_lf_primaryContext.prototype.constructor = ClassInstanceCreationExpression_lf_primaryContext;

ClassInstanceCreationExpression_lf_primaryContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

ClassInstanceCreationExpression_lf_primaryContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

ClassInstanceCreationExpression_lf_primaryContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

ClassInstanceCreationExpression_lf_primaryContext.prototype.typeArgumentsOrDiamond = function() {
    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
};

ClassInstanceCreationExpression_lf_primaryContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ClassInstanceCreationExpression_lf_primaryContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassInstanceCreationExpression_lf_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassInstanceCreationExpression_lf_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassInstanceCreationExpression_lf_primaryContext = ClassInstanceCreationExpression_lf_primaryContext;

Java8Parser.prototype.classInstanceCreationExpression_lf_primary = function() {

    var localctx = new ClassInstanceCreationExpression_lf_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, Java8Parser.RULE_classInstanceCreationExpression_lf_primary);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2244;
        this.match(Java8Parser.DOT);
        this.state = 2245;
        this.match(Java8Parser.NEW);
        this.state = 2247;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LT) {
            this.state = 2246;
            this.typeArguments();
        }

        this.state = 2252;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 2249;
            this.annotation();
            this.state = 2254;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2255;
        this.match(Java8Parser.Identifier);
        this.state = 2257;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LT) {
            this.state = 2256;
            this.typeArgumentsOrDiamond();
        }

        this.state = 2259;
        this.match(Java8Parser.LPAREN);
        this.state = 2261;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 2260;
            this.argumentList();
        }

        this.state = 2263;
        this.match(Java8Parser.RPAREN);
        this.state = 2265;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
        if(la_===1) {
            this.state = 2264;
            this.classBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassInstanceCreationExpression_lfno_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_classInstanceCreationExpression_lfno_primary;
    return this;
}

ClassInstanceCreationExpression_lfno_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassInstanceCreationExpression_lfno_primaryContext.prototype.constructor = ClassInstanceCreationExpression_lfno_primaryContext;

ClassInstanceCreationExpression_lfno_primaryContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Java8Parser.Identifier);
    } else {
        return this.getToken(Java8Parser.Identifier, i);
    }
};


ClassInstanceCreationExpression_lfno_primaryContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

ClassInstanceCreationExpression_lfno_primaryContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

ClassInstanceCreationExpression_lfno_primaryContext.prototype.typeArgumentsOrDiamond = function() {
    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
};

ClassInstanceCreationExpression_lfno_primaryContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ClassInstanceCreationExpression_lfno_primaryContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassInstanceCreationExpression_lfno_primaryContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

ClassInstanceCreationExpression_lfno_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitClassInstanceCreationExpression_lfno_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ClassInstanceCreationExpression_lfno_primaryContext = ClassInstanceCreationExpression_lfno_primaryContext;

Java8Parser.prototype.classInstanceCreationExpression_lfno_primary = function() {

    var localctx = new ClassInstanceCreationExpression_lfno_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, Java8Parser.RULE_classInstanceCreationExpression_lfno_primary);
    var _la = 0; // Token type
    try {
        this.state = 2326;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.NEW:
            this.enterOuterAlt(localctx, 1);
            this.state = 2267;
            this.match(Java8Parser.NEW);
            this.state = 2269;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2268;
                this.typeArguments();
            }

            this.state = 2274;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 2271;
                this.annotation();
                this.state = 2276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2277;
            this.match(Java8Parser.Identifier);
            this.state = 2288;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.DOT) {
                this.state = 2278;
                this.match(Java8Parser.DOT);
                this.state = 2282;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===Java8Parser.AT) {
                    this.state = 2279;
                    this.annotation();
                    this.state = 2284;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2285;
                this.match(Java8Parser.Identifier);
                this.state = 2290;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2292;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2291;
                this.typeArgumentsOrDiamond();
            }

            this.state = 2294;
            this.match(Java8Parser.LPAREN);
            this.state = 2296;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2295;
                this.argumentList();
            }

            this.state = 2298;
            this.match(Java8Parser.RPAREN);
            this.state = 2300;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
            if(la_===1) {
                this.state = 2299;
                this.classBody();

            }
            break;
        case Java8Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 2302;
            this.expressionName();
            this.state = 2303;
            this.match(Java8Parser.DOT);
            this.state = 2304;
            this.match(Java8Parser.NEW);
            this.state = 2306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2305;
                this.typeArguments();
            }

            this.state = 2311;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.AT) {
                this.state = 2308;
                this.annotation();
                this.state = 2313;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2314;
            this.match(Java8Parser.Identifier);
            this.state = 2316;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2315;
                this.typeArgumentsOrDiamond();
            }

            this.state = 2318;
            this.match(Java8Parser.LPAREN);
            this.state = 2320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2319;
                this.argumentList();
            }

            this.state = 2322;
            this.match(Java8Parser.RPAREN);
            this.state = 2324;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
            if(la_===1) {
                this.state = 2323;
                this.classBody();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_typeArgumentsOrDiamond;
    return this;
}

TypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsOrDiamondContext.prototype.constructor = TypeArgumentsOrDiamondContext;

TypeArgumentsOrDiamondContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

TypeArgumentsOrDiamondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTypeArgumentsOrDiamond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext;

Java8Parser.prototype.typeArgumentsOrDiamond = function() {

    var localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, Java8Parser.RULE_typeArgumentsOrDiamond);
    try {
        this.state = 2331;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2328;
            this.typeArguments();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2329;
            this.match(Java8Parser.LT);
            this.state = 2330;
            this.match(Java8Parser.GT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldAccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_fieldAccess;
    return this;
}

FieldAccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldAccessContext.prototype.constructor = FieldAccessContext;

FieldAccessContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

FieldAccessContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

FieldAccessContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

FieldAccessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFieldAccess(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FieldAccessContext = FieldAccessContext;

Java8Parser.prototype.fieldAccess = function() {

    var localctx = new FieldAccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, Java8Parser.RULE_fieldAccess);
    try {
        this.state = 2346;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2333;
            this.primary();
            this.state = 2334;
            this.match(Java8Parser.DOT);
            this.state = 2335;
            this.match(Java8Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2337;
            this.match(Java8Parser.SUPER);
            this.state = 2338;
            this.match(Java8Parser.DOT);
            this.state = 2339;
            this.match(Java8Parser.Identifier);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2340;
            this.typeName();
            this.state = 2341;
            this.match(Java8Parser.DOT);
            this.state = 2342;
            this.match(Java8Parser.SUPER);
            this.state = 2343;
            this.match(Java8Parser.DOT);
            this.state = 2344;
            this.match(Java8Parser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldAccess_lf_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_fieldAccess_lf_primary;
    return this;
}

FieldAccess_lf_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldAccess_lf_primaryContext.prototype.constructor = FieldAccess_lf_primaryContext;

FieldAccess_lf_primaryContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

FieldAccess_lf_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFieldAccess_lf_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FieldAccess_lf_primaryContext = FieldAccess_lf_primaryContext;

Java8Parser.prototype.fieldAccess_lf_primary = function() {

    var localctx = new FieldAccess_lf_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, Java8Parser.RULE_fieldAccess_lf_primary);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2348;
        this.match(Java8Parser.DOT);
        this.state = 2349;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldAccess_lfno_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_fieldAccess_lfno_primary;
    return this;
}

FieldAccess_lfno_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldAccess_lfno_primaryContext.prototype.constructor = FieldAccess_lfno_primaryContext;

FieldAccess_lfno_primaryContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

FieldAccess_lfno_primaryContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

FieldAccess_lfno_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitFieldAccess_lfno_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.FieldAccess_lfno_primaryContext = FieldAccess_lfno_primaryContext;

Java8Parser.prototype.fieldAccess_lfno_primary = function() {

    var localctx = new FieldAccess_lfno_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, Java8Parser.RULE_fieldAccess_lfno_primary);
    try {
        this.state = 2360;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.SUPER:
            this.enterOuterAlt(localctx, 1);
            this.state = 2351;
            this.match(Java8Parser.SUPER);
            this.state = 2352;
            this.match(Java8Parser.DOT);
            this.state = 2353;
            this.match(Java8Parser.Identifier);
            break;
        case Java8Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 2354;
            this.typeName();
            this.state = 2355;
            this.match(Java8Parser.DOT);
            this.state = 2356;
            this.match(Java8Parser.SUPER);
            this.state = 2357;
            this.match(Java8Parser.DOT);
            this.state = 2358;
            this.match(Java8Parser.Identifier);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayAccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_arrayAccess;
    return this;
}

ArrayAccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayAccessContext.prototype.constructor = ArrayAccessContext;

ArrayAccessContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

ArrayAccessContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayAccessContext.prototype.primaryNoNewArray_lfno_arrayAccess = function() {
    return this.getTypedRuleContext(PrimaryNoNewArray_lfno_arrayAccessContext,0);
};

ArrayAccessContext.prototype.primaryNoNewArray_lf_arrayAccess = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryNoNewArray_lf_arrayAccessContext);
    } else {
        return this.getTypedRuleContext(PrimaryNoNewArray_lf_arrayAccessContext,i);
    }
};

ArrayAccessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitArrayAccess(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ArrayAccessContext = ArrayAccessContext;

Java8Parser.prototype.arrayAccess = function() {

    var localctx = new ArrayAccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, Java8Parser.RULE_arrayAccess);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2362;
            this.expressionName();
            this.state = 2363;
            this.match(Java8Parser.LBRACK);
            this.state = 2364;
            this.expression();
            this.state = 2365;
            this.match(Java8Parser.RBRACK);
            break;

        case 2:
            this.state = 2367;
            this.primaryNoNewArray_lfno_arrayAccess();
            this.state = 2368;
            this.match(Java8Parser.LBRACK);
            this.state = 2369;
            this.expression();
            this.state = 2370;
            this.match(Java8Parser.RBRACK);
            break;

        }
        this.state = 2381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.LBRACK) {
            this.state = 2374;
            this.primaryNoNewArray_lf_arrayAccess();
            this.state = 2375;
            this.match(Java8Parser.LBRACK);
            this.state = 2376;
            this.expression();
            this.state = 2377;
            this.match(Java8Parser.RBRACK);
            this.state = 2383;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayAccess_lf_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_arrayAccess_lf_primary;
    return this;
}

ArrayAccess_lf_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayAccess_lf_primaryContext.prototype.constructor = ArrayAccess_lf_primaryContext;

ArrayAccess_lf_primaryContext.prototype.primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = function() {
    return this.getTypedRuleContext(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext,0);
};

ArrayAccess_lf_primaryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayAccess_lf_primaryContext.prototype.primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext);
    } else {
        return this.getTypedRuleContext(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext,i);
    }
};

ArrayAccess_lf_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitArrayAccess_lf_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ArrayAccess_lf_primaryContext = ArrayAccess_lf_primaryContext;

Java8Parser.prototype.arrayAccess_lf_primary = function() {

    var localctx = new ArrayAccess_lf_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, Java8Parser.RULE_arrayAccess_lf_primary);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2384;
        this.primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
        this.state = 2385;
        this.match(Java8Parser.LBRACK);
        this.state = 2386;
        this.expression();
        this.state = 2387;
        this.match(Java8Parser.RBRACK);
        this.state = 2396;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,249,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2389;
                this.primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
                this.state = 2390;
                this.match(Java8Parser.LBRACK);
                this.state = 2391;
                this.expression();
                this.state = 2392;
                this.match(Java8Parser.RBRACK); 
            }
            this.state = 2398;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,249,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayAccess_lfno_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_arrayAccess_lfno_primary;
    return this;
}

ArrayAccess_lfno_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayAccess_lfno_primaryContext.prototype.constructor = ArrayAccess_lfno_primaryContext;

ArrayAccess_lfno_primaryContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

ArrayAccess_lfno_primaryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayAccess_lfno_primaryContext.prototype.primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = function() {
    return this.getTypedRuleContext(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext,0);
};

ArrayAccess_lfno_primaryContext.prototype.primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext);
    } else {
        return this.getTypedRuleContext(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext,i);
    }
};

ArrayAccess_lfno_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitArrayAccess_lfno_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ArrayAccess_lfno_primaryContext = ArrayAccess_lfno_primaryContext;

Java8Parser.prototype.arrayAccess_lfno_primary = function() {

    var localctx = new ArrayAccess_lfno_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, Java8Parser.RULE_arrayAccess_lfno_primary);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2409;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2399;
            this.expressionName();
            this.state = 2400;
            this.match(Java8Parser.LBRACK);
            this.state = 2401;
            this.expression();
            this.state = 2402;
            this.match(Java8Parser.RBRACK);
            break;

        case 2:
            this.state = 2404;
            this.primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
            this.state = 2405;
            this.match(Java8Parser.LBRACK);
            this.state = 2406;
            this.expression();
            this.state = 2407;
            this.match(Java8Parser.RBRACK);
            break;

        }
        this.state = 2418;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,251,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2411;
                this.primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
                this.state = 2412;
                this.match(Java8Parser.LBRACK);
                this.state = 2413;
                this.expression();
                this.state = 2414;
                this.match(Java8Parser.RBRACK); 
            }
            this.state = 2420;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,251,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodInvocation;
    return this;
}

MethodInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodInvocationContext.prototype.constructor = MethodInvocationContext;

MethodInvocationContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

MethodInvocationContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

MethodInvocationContext.prototype.receivers = function() {
    return this.getTypedRuleContext(ReceiversContext,0);
};

MethodInvocationContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

MethodInvocationContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

MethodInvocationContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

MethodInvocationContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

MethodInvocationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MethodInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodInvocationContext = MethodInvocationContext;

Java8Parser.prototype.methodInvocation = function() {

    var localctx = new MethodInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, Java8Parser.RULE_methodInvocation);
    var _la = 0; // Token type
    try {
        this.state = 2489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2421;
            this.ident();
            this.state = 2422;
            this.match(Java8Parser.LPAREN);
            this.state = 2424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2423;
                this.argumentList();
            }

            this.state = 2426;
            this.match(Java8Parser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2428;
            this.receivers();
            this.state = 2429;
            this.match(Java8Parser.DOT);
            this.state = 2431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2430;
                this.typeArguments();
            }

            this.state = 2433;
            this.ident();
            this.state = 2434;
            this.match(Java8Parser.LPAREN);
            this.state = 2436;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2435;
                this.argumentList();
            }

            this.state = 2438;
            this.match(Java8Parser.RPAREN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2440;
            this.expressionName();
            this.state = 2441;
            this.match(Java8Parser.DOT);
            this.state = 2443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2442;
                this.typeArguments();
            }

            this.state = 2445;
            this.ident();
            this.state = 2446;
            this.match(Java8Parser.LPAREN);
            this.state = 2448;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2447;
                this.argumentList();
            }

            this.state = 2450;
            this.match(Java8Parser.RPAREN);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2452;
            this.primary();
            this.state = 2453;
            this.match(Java8Parser.DOT);
            this.state = 2455;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2454;
                this.typeArguments();
            }

            this.state = 2457;
            this.match(Java8Parser.Identifier);
            this.state = 2458;
            this.match(Java8Parser.LPAREN);
            this.state = 2460;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2459;
                this.argumentList();
            }

            this.state = 2462;
            this.match(Java8Parser.RPAREN);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2464;
            this.match(Java8Parser.SUPER);
            this.state = 2465;
            this.match(Java8Parser.DOT);
            this.state = 2467;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2466;
                this.typeArguments();
            }

            this.state = 2469;
            this.match(Java8Parser.Identifier);
            this.state = 2470;
            this.match(Java8Parser.LPAREN);
            this.state = 2472;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2471;
                this.argumentList();
            }

            this.state = 2474;
            this.match(Java8Parser.RPAREN);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2475;
            this.typeName();
            this.state = 2476;
            this.match(Java8Parser.DOT);
            this.state = 2477;
            this.match(Java8Parser.SUPER);
            this.state = 2478;
            this.match(Java8Parser.DOT);
            this.state = 2480;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2479;
                this.typeArguments();
            }

            this.state = 2482;
            this.match(Java8Parser.Identifier);
            this.state = 2483;
            this.match(Java8Parser.LPAREN);
            this.state = 2485;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2484;
                this.argumentList();
            }

            this.state = 2487;
            this.match(Java8Parser.RPAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReceiversContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_receivers;
    return this;
}

ReceiversContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReceiversContext.prototype.constructor = ReceiversContext;

ReceiversContext.prototype.receiver = function() {
    return this.getTypedRuleContext(ReceiverContext,0);
};

ReceiversContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitReceivers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ReceiversContext = ReceiversContext;

Java8Parser.prototype.receivers = function() {

    var localctx = new ReceiversContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, Java8Parser.RULE_receivers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2491;
        this.receiver();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReceiverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_receiver;
    return this;
}

ReceiverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReceiverContext.prototype.constructor = ReceiverContext;

ReceiverContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

ReceiverContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitReceiver(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ReceiverContext = ReceiverContext;

Java8Parser.prototype.receiver = function() {

    var localctx = new ReceiverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, Java8Parser.RULE_receiver);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2493;
        this.ident();
        this.state = 2498;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,264,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2494;
                this.match(Java8Parser.DOT);
                this.state = 2495;
                this.ident(); 
            }
            this.state = 2500;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,264,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_ident;
    return this;
}

IdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentContext.prototype.constructor = IdentContext;

IdentContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

IdentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitIdent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.IdentContext = IdentContext;

Java8Parser.prototype.ident = function() {

    var localctx = new IdentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, Java8Parser.RULE_ident);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2501;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodInvocation_lf_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodInvocation_lf_primary;
    return this;
}

MethodInvocation_lf_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodInvocation_lf_primaryContext.prototype.constructor = MethodInvocation_lf_primaryContext;

MethodInvocation_lf_primaryContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

MethodInvocation_lf_primaryContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

MethodInvocation_lf_primaryContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

MethodInvocation_lf_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodInvocation_lf_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodInvocation_lf_primaryContext = MethodInvocation_lf_primaryContext;

Java8Parser.prototype.methodInvocation_lf_primary = function() {

    var localctx = new MethodInvocation_lf_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, Java8Parser.RULE_methodInvocation_lf_primary);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2503;
        this.match(Java8Parser.DOT);
        this.state = 2505;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LT) {
            this.state = 2504;
            this.typeArguments();
        }

        this.state = 2507;
        this.match(Java8Parser.Identifier);
        this.state = 2508;
        this.match(Java8Parser.LPAREN);
        this.state = 2510;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
            this.state = 2509;
            this.argumentList();
        }

        this.state = 2512;
        this.match(Java8Parser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodInvocation_lfno_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodInvocation_lfno_primary;
    return this;
}

MethodInvocation_lfno_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodInvocation_lfno_primaryContext.prototype.constructor = MethodInvocation_lfno_primaryContext;

MethodInvocation_lfno_primaryContext.prototype.methodName = function() {
    return this.getTypedRuleContext(MethodNameContext,0);
};

MethodInvocation_lfno_primaryContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

MethodInvocation_lfno_primaryContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MethodInvocation_lfno_primaryContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

MethodInvocation_lfno_primaryContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

MethodInvocation_lfno_primaryContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

MethodInvocation_lfno_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodInvocation_lfno_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodInvocation_lfno_primaryContext = MethodInvocation_lfno_primaryContext;

Java8Parser.prototype.methodInvocation_lfno_primary = function() {

    var localctx = new MethodInvocation_lfno_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, Java8Parser.RULE_methodInvocation_lfno_primary);
    var _la = 0; // Token type
    try {
        this.state = 2570;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2514;
            this.methodName();
            this.state = 2515;
            this.match(Java8Parser.LPAREN);
            this.state = 2517;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2516;
                this.argumentList();
            }

            this.state = 2519;
            this.match(Java8Parser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2521;
            this.typeName();
            this.state = 2522;
            this.match(Java8Parser.DOT);
            this.state = 2524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2523;
                this.typeArguments();
            }

            this.state = 2526;
            this.match(Java8Parser.Identifier);
            this.state = 2527;
            this.match(Java8Parser.LPAREN);
            this.state = 2529;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2528;
                this.argumentList();
            }

            this.state = 2531;
            this.match(Java8Parser.RPAREN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2533;
            this.expressionName();
            this.state = 2534;
            this.match(Java8Parser.DOT);
            this.state = 2536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2535;
                this.typeArguments();
            }

            this.state = 2538;
            this.match(Java8Parser.Identifier);
            this.state = 2539;
            this.match(Java8Parser.LPAREN);
            this.state = 2541;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2540;
                this.argumentList();
            }

            this.state = 2543;
            this.match(Java8Parser.RPAREN);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2545;
            this.match(Java8Parser.SUPER);
            this.state = 2546;
            this.match(Java8Parser.DOT);
            this.state = 2548;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2547;
                this.typeArguments();
            }

            this.state = 2550;
            this.match(Java8Parser.Identifier);
            this.state = 2551;
            this.match(Java8Parser.LPAREN);
            this.state = 2553;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2552;
                this.argumentList();
            }

            this.state = 2555;
            this.match(Java8Parser.RPAREN);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2556;
            this.typeName();
            this.state = 2557;
            this.match(Java8Parser.DOT);
            this.state = 2558;
            this.match(Java8Parser.SUPER);
            this.state = 2559;
            this.match(Java8Parser.DOT);
            this.state = 2561;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2560;
                this.typeArguments();
            }

            this.state = 2563;
            this.match(Java8Parser.Identifier);
            this.state = 2564;
            this.match(Java8Parser.LPAREN);
            this.state = 2566;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2565;
                this.argumentList();
            }

            this.state = 2568;
            this.match(Java8Parser.RPAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_argumentList;
    return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArgumentListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitArgumentList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ArgumentListContext = ArgumentListContext;

Java8Parser.prototype.argumentList = function() {

    var localctx = new ArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, Java8Parser.RULE_argumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2572;
        this.expression();
        this.state = 2577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.COMMA) {
            this.state = 2573;
            this.match(Java8Parser.COMMA);
            this.state = 2574;
            this.expression();
            this.state = 2579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodReference;
    return this;
}

MethodReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodReferenceContext.prototype.constructor = MethodReferenceContext;

MethodReferenceContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

MethodReferenceContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

MethodReferenceContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

MethodReferenceContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

MethodReferenceContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

MethodReferenceContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MethodReferenceContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

MethodReferenceContext.prototype.arrayType = function() {
    return this.getTypedRuleContext(ArrayTypeContext,0);
};

MethodReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodReferenceContext = MethodReferenceContext;

Java8Parser.prototype.methodReference = function() {

    var localctx = new MethodReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, Java8Parser.RULE_methodReference);
    var _la = 0; // Token type
    try {
        this.state = 2627;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2580;
            this.expressionName();
            this.state = 2581;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2582;
                this.typeArguments();
            }

            this.state = 2585;
            this.match(Java8Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2587;
            this.referenceType();
            this.state = 2588;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2590;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2589;
                this.typeArguments();
            }

            this.state = 2592;
            this.match(Java8Parser.Identifier);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2594;
            this.primary();
            this.state = 2595;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2597;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2596;
                this.typeArguments();
            }

            this.state = 2599;
            this.match(Java8Parser.Identifier);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2601;
            this.match(Java8Parser.SUPER);
            this.state = 2602;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2604;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2603;
                this.typeArguments();
            }

            this.state = 2606;
            this.match(Java8Parser.Identifier);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2607;
            this.typeName();
            this.state = 2608;
            this.match(Java8Parser.DOT);
            this.state = 2609;
            this.match(Java8Parser.SUPER);
            this.state = 2610;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2612;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2611;
                this.typeArguments();
            }

            this.state = 2614;
            this.match(Java8Parser.Identifier);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2616;
            this.classType();
            this.state = 2617;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2619;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2618;
                this.typeArguments();
            }

            this.state = 2621;
            this.match(Java8Parser.NEW);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2623;
            this.arrayType();
            this.state = 2624;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2625;
            this.match(Java8Parser.NEW);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodReference_lf_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodReference_lf_primary;
    return this;
}

MethodReference_lf_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodReference_lf_primaryContext.prototype.constructor = MethodReference_lf_primaryContext;

MethodReference_lf_primaryContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

MethodReference_lf_primaryContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

MethodReference_lf_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodReference_lf_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodReference_lf_primaryContext = MethodReference_lf_primaryContext;

Java8Parser.prototype.methodReference_lf_primary = function() {

    var localctx = new MethodReference_lf_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, Java8Parser.RULE_methodReference_lf_primary);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2629;
        this.match(Java8Parser.COLONCOLON);
        this.state = 2631;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Java8Parser.LT) {
            this.state = 2630;
            this.typeArguments();
        }

        this.state = 2633;
        this.match(Java8Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodReference_lfno_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_methodReference_lfno_primary;
    return this;
}

MethodReference_lfno_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodReference_lfno_primaryContext.prototype.constructor = MethodReference_lfno_primaryContext;

MethodReference_lfno_primaryContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

MethodReference_lfno_primaryContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

MethodReference_lfno_primaryContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

MethodReference_lfno_primaryContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

MethodReference_lfno_primaryContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MethodReference_lfno_primaryContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

MethodReference_lfno_primaryContext.prototype.arrayType = function() {
    return this.getTypedRuleContext(ArrayTypeContext,0);
};

MethodReference_lfno_primaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMethodReference_lfno_primary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MethodReference_lfno_primaryContext = MethodReference_lfno_primaryContext;

Java8Parser.prototype.methodReference_lfno_primary = function() {

    var localctx = new MethodReference_lfno_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, Java8Parser.RULE_methodReference_lfno_primary);
    var _la = 0; // Token type
    try {
        this.state = 2675;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2635;
            this.expressionName();
            this.state = 2636;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2637;
                this.typeArguments();
            }

            this.state = 2640;
            this.match(Java8Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2642;
            this.referenceType();
            this.state = 2643;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2645;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2644;
                this.typeArguments();
            }

            this.state = 2647;
            this.match(Java8Parser.Identifier);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2649;
            this.match(Java8Parser.SUPER);
            this.state = 2650;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2652;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2651;
                this.typeArguments();
            }

            this.state = 2654;
            this.match(Java8Parser.Identifier);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2655;
            this.typeName();
            this.state = 2656;
            this.match(Java8Parser.DOT);
            this.state = 2657;
            this.match(Java8Parser.SUPER);
            this.state = 2658;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2660;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2659;
                this.typeArguments();
            }

            this.state = 2662;
            this.match(Java8Parser.Identifier);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2664;
            this.classType();
            this.state = 2665;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2667;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Java8Parser.LT) {
                this.state = 2666;
                this.typeArguments();
            }

            this.state = 2669;
            this.match(Java8Parser.NEW);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2671;
            this.arrayType();
            this.state = 2672;
            this.match(Java8Parser.COLONCOLON);
            this.state = 2673;
            this.match(Java8Parser.NEW);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayCreationExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_arrayCreationExpression;
    return this;
}

ArrayCreationExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayCreationExpressionContext.prototype.constructor = ArrayCreationExpressionContext;

ArrayCreationExpressionContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

ArrayCreationExpressionContext.prototype.dimExprs = function() {
    return this.getTypedRuleContext(DimExprsContext,0);
};

ArrayCreationExpressionContext.prototype.dims = function() {
    return this.getTypedRuleContext(DimsContext,0);
};

ArrayCreationExpressionContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

ArrayCreationExpressionContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

ArrayCreationExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitArrayCreationExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ArrayCreationExpressionContext = ArrayCreationExpressionContext;

Java8Parser.prototype.arrayCreationExpression = function() {

    var localctx = new ArrayCreationExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, Java8Parser.RULE_arrayCreationExpression);
    try {
        this.state = 2699;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2677;
            this.match(Java8Parser.NEW);
            this.state = 2678;
            this.primitiveType();
            this.state = 2679;
            this.dimExprs();
            this.state = 2681;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
            if(la_===1) {
                this.state = 2680;
                this.dims();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2683;
            this.match(Java8Parser.NEW);
            this.state = 2684;
            this.classOrInterfaceType();
            this.state = 2685;
            this.dimExprs();
            this.state = 2687;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
            if(la_===1) {
                this.state = 2686;
                this.dims();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2689;
            this.match(Java8Parser.NEW);
            this.state = 2690;
            this.primitiveType();
            this.state = 2691;
            this.dims();
            this.state = 2692;
            this.arrayInitializer();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2694;
            this.match(Java8Parser.NEW);
            this.state = 2695;
            this.classOrInterfaceType();
            this.state = 2696;
            this.dims();
            this.state = 2697;
            this.arrayInitializer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimExprsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_dimExprs;
    return this;
}

DimExprsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimExprsContext.prototype.constructor = DimExprsContext;

DimExprsContext.prototype.dimExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DimExprContext);
    } else {
        return this.getTypedRuleContext(DimExprContext,i);
    }
};

DimExprsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitDimExprs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.DimExprsContext = DimExprsContext;

Java8Parser.prototype.dimExprs = function() {

    var localctx = new DimExprsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, Java8Parser.RULE_dimExprs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2701;
        this.dimExpr();
        this.state = 2705;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,295,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2702;
                this.dimExpr(); 
            }
            this.state = 2707;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,295,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_dimExpr;
    return this;
}

DimExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimExprContext.prototype.constructor = DimExprContext;

DimExprContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DimExprContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

DimExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitDimExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.DimExprContext = DimExprContext;

Java8Parser.prototype.dimExpr = function() {

    var localctx = new DimExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, Java8Parser.RULE_dimExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2711;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.AT) {
            this.state = 2708;
            this.annotation();
            this.state = 2713;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2714;
        this.match(Java8Parser.LBRACK);
        this.state = 2715;
        this.expression();
        this.state = 2716;
        this.match(Java8Parser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_constantExpression;
    return this;
}

ConstantExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantExpressionContext.prototype.constructor = ConstantExpressionContext;

ConstantExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstantExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConstantExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ConstantExpressionContext = ConstantExpressionContext;

Java8Parser.prototype.constantExpression = function() {

    var localctx = new ConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, Java8Parser.RULE_constantExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2718;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.lambdaExpression = function() {
    return this.getTypedRuleContext(LambdaExpressionContext,0);
};

ExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ExpressionContext = ExpressionContext;

Java8Parser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, Java8Parser.RULE_expression);
    try {
        this.state = 2722;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2720;
            this.lambdaExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2721;
            this.assignmentExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdaExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_lambdaExpression;
    return this;
}

LambdaExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaExpressionContext.prototype.constructor = LambdaExpressionContext;

LambdaExpressionContext.prototype.lambdaParameters = function() {
    return this.getTypedRuleContext(LambdaParametersContext,0);
};

LambdaExpressionContext.prototype.lambdaBody = function() {
    return this.getTypedRuleContext(LambdaBodyContext,0);
};

LambdaExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLambdaExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LambdaExpressionContext = LambdaExpressionContext;

Java8Parser.prototype.lambdaExpression = function() {

    var localctx = new LambdaExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, Java8Parser.RULE_lambdaExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2724;
        this.lambdaParameters();
        this.state = 2725;
        this.match(Java8Parser.ARROW);
        this.state = 2726;
        this.lambdaBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdaParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_lambdaParameters;
    return this;
}

LambdaParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaParametersContext.prototype.constructor = LambdaParametersContext;

LambdaParametersContext.prototype.Identifier = function() {
    return this.getToken(Java8Parser.Identifier, 0);
};

LambdaParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

LambdaParametersContext.prototype.inferredFormalParameterList = function() {
    return this.getTypedRuleContext(InferredFormalParameterListContext,0);
};

LambdaParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLambdaParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LambdaParametersContext = LambdaParametersContext;

Java8Parser.prototype.lambdaParameters = function() {

    var localctx = new LambdaParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, Java8Parser.RULE_lambdaParameters);
    var _la = 0; // Token type
    try {
        this.state = 2738;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2728;
            this.match(Java8Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2729;
            this.match(Java8Parser.LPAREN);
            this.state = 2731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la===Java8Parser.SHORT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
                this.state = 2730;
                this.formalParameterList();
            }

            this.state = 2733;
            this.match(Java8Parser.RPAREN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2734;
            this.match(Java8Parser.LPAREN);
            this.state = 2735;
            this.inferredFormalParameterList();
            this.state = 2736;
            this.match(Java8Parser.RPAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InferredFormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_inferredFormalParameterList;
    return this;
}

InferredFormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InferredFormalParameterListContext.prototype.constructor = InferredFormalParameterListContext;

InferredFormalParameterListContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Java8Parser.Identifier);
    } else {
        return this.getToken(Java8Parser.Identifier, i);
    }
};


InferredFormalParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInferredFormalParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InferredFormalParameterListContext = InferredFormalParameterListContext;

Java8Parser.prototype.inferredFormalParameterList = function() {

    var localctx = new InferredFormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, Java8Parser.RULE_inferredFormalParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2740;
        this.match(Java8Parser.Identifier);
        this.state = 2745;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Java8Parser.COMMA) {
            this.state = 2741;
            this.match(Java8Parser.COMMA);
            this.state = 2742;
            this.match(Java8Parser.Identifier);
            this.state = 2747;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdaBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_lambdaBody;
    return this;
}

LambdaBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaBodyContext.prototype.constructor = LambdaBodyContext;

LambdaBodyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LambdaBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

LambdaBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLambdaBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LambdaBodyContext = LambdaBodyContext;

Java8Parser.prototype.lambdaBody = function() {

    var localctx = new LambdaBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, Java8Parser.RULE_lambdaBody);
    try {
        this.state = 2750;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.BOOLEAN:
        case Java8Parser.BYTE:
        case Java8Parser.CHAR:
        case Java8Parser.DOUBLE:
        case Java8Parser.FLOAT:
        case Java8Parser.INT:
        case Java8Parser.LONG:
        case Java8Parser.NEW:
        case Java8Parser.SHORT:
        case Java8Parser.SUPER:
        case Java8Parser.THIS:
        case Java8Parser.VOID:
        case Java8Parser.IntegerLiteral:
        case Java8Parser.FloatingPointLiteral:
        case Java8Parser.BooleanLiteral:
        case Java8Parser.CharacterLiteral:
        case Java8Parser.StringLiteral:
        case Java8Parser.NullLiteral:
        case Java8Parser.LPAREN:
        case Java8Parser.BANG:
        case Java8Parser.TILDE:
        case Java8Parser.INC:
        case Java8Parser.DEC:
        case Java8Parser.ADD:
        case Java8Parser.SUB:
        case Java8Parser.Identifier:
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2748;
            this.expression();
            break;
        case Java8Parser.LBRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2749;
            this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_assignmentExpression;
    return this;
}

AssignmentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;

AssignmentExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

AssignmentExpressionContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

AssignmentExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAssignmentExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AssignmentExpressionContext = AssignmentExpressionContext;

Java8Parser.prototype.assignmentExpression = function() {

    var localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, Java8Parser.RULE_assignmentExpression);
    try {
        this.state = 2754;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2752;
            this.conditionalExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2753;
            this.assignment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_assignment;
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.leftHandSide = function() {
    return this.getTypedRuleContext(LeftHandSideContext,0);
};

AssignmentContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

AssignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AssignmentContext = AssignmentContext;

Java8Parser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, Java8Parser.RULE_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2756;
        this.leftHandSide();
        this.state = 2757;
        this.assignmentOperator();
        this.state = 2758;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeftHandSideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_leftHandSide;
    return this;
}

LeftHandSideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeftHandSideContext.prototype.constructor = LeftHandSideContext;

LeftHandSideContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

LeftHandSideContext.prototype.fieldAccess = function() {
    return this.getTypedRuleContext(FieldAccessContext,0);
};

LeftHandSideContext.prototype.arrayAccess = function() {
    return this.getTypedRuleContext(ArrayAccessContext,0);
};

LeftHandSideContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLeftHandSide(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LeftHandSideContext = LeftHandSideContext;

Java8Parser.prototype.leftHandSide = function() {

    var localctx = new LeftHandSideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, Java8Parser.RULE_leftHandSide);
    try {
        this.state = 2763;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2760;
            this.expressionName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2761;
            this.fieldAccess();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2762;
            this.arrayAccess();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;


AssignmentOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAssignmentOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AssignmentOperatorContext = AssignmentOperatorContext;

Java8Parser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, Java8Parser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2765;
        _la = this._input.LA(1);
        if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (Java8Parser.ASSIGN - 66)) | (1 << (Java8Parser.ADD_ASSIGN - 66)) | (1 << (Java8Parser.SUB_ASSIGN - 66)) | (1 << (Java8Parser.MUL_ASSIGN - 66)) | (1 << (Java8Parser.DIV_ASSIGN - 66)) | (1 << (Java8Parser.AND_ASSIGN - 66)) | (1 << (Java8Parser.OR_ASSIGN - 66)) | (1 << (Java8Parser.XOR_ASSIGN - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (Java8Parser.MOD_ASSIGN - 98)) | (1 << (Java8Parser.LSHIFT_ASSIGN - 98)) | (1 << (Java8Parser.RSHIFT_ASSIGN - 98)) | (1 << (Java8Parser.URSHIFT_ASSIGN - 98)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_conditionalExpression;
    return this;
}

ConditionalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.conditionalOrExpression = function() {
    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
};

ConditionalExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionalExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

ConditionalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConditionalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ConditionalExpressionContext = ConditionalExpressionContext;

Java8Parser.prototype.conditionalExpression = function() {

    var localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, Java8Parser.RULE_conditionalExpression);
    try {
        this.state = 2774;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2767;
            this.conditionalOrExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2768;
            this.conditionalOrExpression(0);
            this.state = 2769;
            this.match(Java8Parser.QUESTION);
            this.state = 2770;
            this.expression();
            this.state = 2771;
            this.match(Java8Parser.COLON);
            this.state = 2772;
            this.conditionalExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_or;
    return this;
}

OrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrContext.prototype.constructor = OrContext;

OrContext.prototype.OR = function() {
    return this.getToken(Java8Parser.OR, 0);
};

OrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitOr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.OrContext = OrContext;

Java8Parser.prototype.or = function() {

    var localctx = new OrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, Java8Parser.RULE_or);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2776;
        this.match(Java8Parser.OR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionalOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_conditionalOrExpression;
    return this;
}

ConditionalOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalOrExpressionContext.prototype.constructor = ConditionalOrExpressionContext;

ConditionalOrExpressionContext.prototype.conditionalAndExpression = function() {
    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
};

ConditionalOrExpressionContext.prototype.conditionalOrExpression = function() {
    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
};

ConditionalOrExpressionContext.prototype.or = function() {
    return this.getTypedRuleContext(OrContext,0);
};

ConditionalOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConditionalOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.conditionalOrExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConditionalOrExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 476;
    this.enterRecursionRule(localctx, 476, Java8Parser.RULE_conditionalOrExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2779;
        this.conditionalAndExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2787;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,305,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ConditionalOrExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_conditionalOrExpression);
                this.state = 2781;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2782;
                this.or();
                this.state = 2783;
                this.conditionalAndExpression(0); 
            }
            this.state = 2789;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,305,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_and;
    return this;
}

AndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndContext.prototype.constructor = AndContext;

AndContext.prototype.AND = function() {
    return this.getToken(Java8Parser.AND, 0);
};

AndContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAnd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AndContext = AndContext;

Java8Parser.prototype.and = function() {

    var localctx = new AndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, Java8Parser.RULE_and);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2790;
        this.match(Java8Parser.AND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionalAndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_conditionalAndExpression;
    return this;
}

ConditionalAndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalAndExpressionContext.prototype.constructor = ConditionalAndExpressionContext;

ConditionalAndExpressionContext.prototype.inclusiveOrExpression = function() {
    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
};

ConditionalAndExpressionContext.prototype.conditionalAndExpression = function() {
    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
};

ConditionalAndExpressionContext.prototype.and = function() {
    return this.getTypedRuleContext(AndContext,0);
};

ConditionalAndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitConditionalAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.conditionalAndExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConditionalAndExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 480;
    this.enterRecursionRule(localctx, 480, Java8Parser.RULE_conditionalAndExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2793;
        this.inclusiveOrExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2801;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,306,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ConditionalAndExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_conditionalAndExpression);
                this.state = 2795;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2796;
                this.and();
                this.state = 2797;
                this.inclusiveOrExpression(0); 
            }
            this.state = 2803;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,306,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function BitorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_bitor;
    return this;
}

BitorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitorContext.prototype.constructor = BitorContext;

BitorContext.prototype.BITOR = function() {
    return this.getToken(Java8Parser.BITOR, 0);
};

BitorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitBitor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.BitorContext = BitorContext;

Java8Parser.prototype.bitor = function() {

    var localctx = new BitorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, Java8Parser.RULE_bitor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2804;
        this.match(Java8Parser.BITOR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InclusiveOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_inclusiveOrExpression;
    return this;
}

InclusiveOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InclusiveOrExpressionContext.prototype.constructor = InclusiveOrExpressionContext;

InclusiveOrExpressionContext.prototype.exclusiveOrExpression = function() {
    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
};

InclusiveOrExpressionContext.prototype.inclusiveOrExpression = function() {
    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
};

InclusiveOrExpressionContext.prototype.bitor = function() {
    return this.getTypedRuleContext(BitorContext,0);
};

InclusiveOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInclusiveOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.inclusiveOrExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InclusiveOrExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 484;
    this.enterRecursionRule(localctx, 484, Java8Parser.RULE_inclusiveOrExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2807;
        this.exclusiveOrExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2815;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,307,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InclusiveOrExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_inclusiveOrExpression);
                this.state = 2809;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2810;
                this.bitor();
                this.state = 2811;
                this.exclusiveOrExpression(0); 
            }
            this.state = 2817;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,307,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CaretContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_caret;
    return this;
}

CaretContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaretContext.prototype.constructor = CaretContext;

CaretContext.prototype.CARET = function() {
    return this.getToken(Java8Parser.CARET, 0);
};

CaretContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitCaret(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.CaretContext = CaretContext;

Java8Parser.prototype.caret = function() {

    var localctx = new CaretContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, Java8Parser.RULE_caret);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2818;
        this.match(Java8Parser.CARET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExclusiveOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_exclusiveOrExpression;
    return this;
}

ExclusiveOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExclusiveOrExpressionContext.prototype.constructor = ExclusiveOrExpressionContext;

ExclusiveOrExpressionContext.prototype.andExpression = function() {
    return this.getTypedRuleContext(AndExpressionContext,0);
};

ExclusiveOrExpressionContext.prototype.exclusiveOrExpression = function() {
    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
};

ExclusiveOrExpressionContext.prototype.caret = function() {
    return this.getTypedRuleContext(CaretContext,0);
};

ExclusiveOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitExclusiveOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.exclusiveOrExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExclusiveOrExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 488;
    this.enterRecursionRule(localctx, 488, Java8Parser.RULE_exclusiveOrExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2821;
        this.andExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2829;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,308,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExclusiveOrExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_exclusiveOrExpression);
                this.state = 2823;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2824;
                this.caret();
                this.state = 2825;
                this.andExpression(0); 
            }
            this.state = 2831;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,308,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function BitandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_bitand;
    return this;
}

BitandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitandContext.prototype.constructor = BitandContext;

BitandContext.prototype.BITAND = function() {
    return this.getToken(Java8Parser.BITAND, 0);
};

BitandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitBitand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.BitandContext = BitandContext;

Java8Parser.prototype.bitand = function() {

    var localctx = new BitandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, Java8Parser.RULE_bitand);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2832;
        this.match(Java8Parser.BITAND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_andExpression;
    return this;
}

AndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

AndExpressionContext.prototype.equalityExpression = function() {
    return this.getTypedRuleContext(EqualityExpressionContext,0);
};

AndExpressionContext.prototype.andExpression = function() {
    return this.getTypedRuleContext(AndExpressionContext,0);
};

AndExpressionContext.prototype.bitand = function() {
    return this.getTypedRuleContext(BitandContext,0);
};

AndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.andExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AndExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 492;
    this.enterRecursionRule(localctx, 492, Java8Parser.RULE_andExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2835;
        this.equalityExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2843;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,309,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AndExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_andExpression);
                this.state = 2837;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2838;
                this.bitand();
                this.state = 2839;
                this.equalityExpression(0); 
            }
            this.state = 2845;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,309,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function EqualContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_equal;
    return this;
}

EqualContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualContext.prototype.constructor = EqualContext;

EqualContext.prototype.EQUAL = function() {
    return this.getToken(Java8Parser.EQUAL, 0);
};

EqualContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEqual(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.EqualContext = EqualContext;

Java8Parser.prototype.equal = function() {

    var localctx = new EqualContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, Java8Parser.RULE_equal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2846;
        this.match(Java8Parser.EQUAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NotequalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_notequal;
    return this;
}

NotequalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotequalContext.prototype.constructor = NotequalContext;

NotequalContext.prototype.NOTEQUAL = function() {
    return this.getToken(Java8Parser.NOTEQUAL, 0);
};

NotequalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitNotequal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.NotequalContext = NotequalContext;

Java8Parser.prototype.notequal = function() {

    var localctx = new NotequalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, Java8Parser.RULE_notequal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2848;
        this.match(Java8Parser.NOTEQUAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EqualityExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_equalityExpression;
    return this;
}

EqualityExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

EqualityExpressionContext.prototype.relationalExpression = function() {
    return this.getTypedRuleContext(RelationalExpressionContext,0);
};

EqualityExpressionContext.prototype.equalityExpression = function() {
    return this.getTypedRuleContext(EqualityExpressionContext,0);
};

EqualityExpressionContext.prototype.equal = function() {
    return this.getTypedRuleContext(EqualContext,0);
};

EqualityExpressionContext.prototype.notequal = function() {
    return this.getTypedRuleContext(NotequalContext,0);
};

EqualityExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitEqualityExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.equalityExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EqualityExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 498;
    this.enterRecursionRule(localctx, 498, Java8Parser.RULE_equalityExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2851;
        this.relationalExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2863;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,311,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2861;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_equalityExpression);
                    this.state = 2853;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2854;
                    this.equal();
                    this.state = 2855;
                    this.relationalExpression(0);
                    break;

                case 2:
                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_equalityExpression);
                    this.state = 2857;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 2858;
                    this.notequal();
                    this.state = 2859;
                    this.relationalExpression(0);
                    break;

                } 
            }
            this.state = 2865;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,311,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_lt;
    return this;
}

LtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LtContext.prototype.constructor = LtContext;

LtContext.prototype.LT = function() {
    return this.getToken(Java8Parser.LT, 0);
};

LtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LtContext = LtContext;

Java8Parser.prototype.lt = function() {

    var localctx = new LtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, Java8Parser.RULE_lt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2866;
        this.match(Java8Parser.LT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_gt;
    return this;
}

GtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GtContext.prototype.constructor = GtContext;

GtContext.prototype.GT = function() {
    return this.getToken(Java8Parser.GT, 0);
};

GtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitGt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.GtContext = GtContext;

Java8Parser.prototype.gt = function() {

    var localctx = new GtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, Java8Parser.RULE_gt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2868;
        this.match(Java8Parser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_le;
    return this;
}

LeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeContext.prototype.constructor = LeContext;

LeContext.prototype.LE = function() {
    return this.getToken(Java8Parser.LE, 0);
};

LeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLe(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LeContext = LeContext;

Java8Parser.prototype.le = function() {

    var localctx = new LeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, Java8Parser.RULE_le);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2870;
        this.match(Java8Parser.LE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_ge;
    return this;
}

GeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeContext.prototype.constructor = GeContext;

GeContext.prototype.GE = function() {
    return this.getToken(Java8Parser.GE, 0);
};

GeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitGe(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.GeContext = GeContext;

Java8Parser.prototype.ge = function() {

    var localctx = new GeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, Java8Parser.RULE_ge);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2872;
        this.match(Java8Parser.GE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InstanceofContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_instanceof;
    return this;
}

InstanceofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceofContext.prototype.constructor = InstanceofContext;

InstanceofContext.prototype.INSTANCEOF = function() {
    return this.getToken(Java8Parser.INSTANCEOF, 0);
};

InstanceofContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInstanceof(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.InstanceofContext = InstanceofContext;

Java8Parser.prototype.instanceof = function() {

    var localctx = new InstanceofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, Java8Parser.RULE_instanceof);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2874;
        this.match(Java8Parser.INSTANCEOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_relationalExpression;
    return this;
}

RelationalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

RelationalExpressionContext.prototype.shiftExpression = function() {
    return this.getTypedRuleContext(ShiftExpressionContext,0);
};

RelationalExpressionContext.prototype.relationalExpression = function() {
    return this.getTypedRuleContext(RelationalExpressionContext,0);
};

RelationalExpressionContext.prototype.lt = function() {
    return this.getTypedRuleContext(LtContext,0);
};

RelationalExpressionContext.prototype.gt = function() {
    return this.getTypedRuleContext(GtContext,0);
};

RelationalExpressionContext.prototype.le = function() {
    return this.getTypedRuleContext(LeContext,0);
};

RelationalExpressionContext.prototype.ge = function() {
    return this.getTypedRuleContext(GeContext,0);
};

RelationalExpressionContext.prototype.instanceof = function() {
    return this.getTypedRuleContext(InstanceofContext,0);
};

RelationalExpressionContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

RelationalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitRelationalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.relationalExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationalExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 510;
    this.enterRecursionRule(localctx, 510, Java8Parser.RULE_relationalExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2877;
        this.shiftExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2901;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,313,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2899;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
                    this.state = 2879;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 2880;
                    this.lt();
                    this.state = 2881;
                    this.shiftExpression(0);
                    break;

                case 2:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
                    this.state = 2883;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 2884;
                    this.gt();
                    this.state = 2885;
                    this.shiftExpression(0);
                    break;

                case 3:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
                    this.state = 2887;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 2888;
                    this.le();
                    this.state = 2889;
                    this.shiftExpression(0);
                    break;

                case 4:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
                    this.state = 2891;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2892;
                    this.ge();
                    this.state = 2893;
                    this.shiftExpression(0);
                    break;

                case 5:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
                    this.state = 2895;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 2896;
                    this.instanceof();
                    this.state = 2897;
                    this.referenceType();
                    break;

                } 
            }
            this.state = 2903;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,313,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LtltContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_ltlt;
    return this;
}

LtltContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LtltContext.prototype.constructor = LtltContext;

LtltContext.prototype.LT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Java8Parser.LT);
    } else {
        return this.getToken(Java8Parser.LT, i);
    }
};


LtltContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitLtlt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.LtltContext = LtltContext;

Java8Parser.prototype.ltlt = function() {

    var localctx = new LtltContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, Java8Parser.RULE_ltlt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2904;
        this.match(Java8Parser.LT);
        this.state = 2905;
        this.match(Java8Parser.LT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GtgtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_gtgt;
    return this;
}

GtgtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GtgtContext.prototype.constructor = GtgtContext;

GtgtContext.prototype.GT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Java8Parser.GT);
    } else {
        return this.getToken(Java8Parser.GT, i);
    }
};


GtgtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitGtgt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.GtgtContext = GtgtContext;

Java8Parser.prototype.gtgt = function() {

    var localctx = new GtgtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, Java8Parser.RULE_gtgt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2907;
        this.match(Java8Parser.GT);
        this.state = 2908;
        this.match(Java8Parser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GtgtgtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_gtgtgt;
    return this;
}

GtgtgtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GtgtgtContext.prototype.constructor = GtgtgtContext;

GtgtgtContext.prototype.GT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Java8Parser.GT);
    } else {
        return this.getToken(Java8Parser.GT, i);
    }
};


GtgtgtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitGtgtgt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.GtgtgtContext = GtgtgtContext;

Java8Parser.prototype.gtgtgt = function() {

    var localctx = new GtgtgtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, Java8Parser.RULE_gtgtgt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2910;
        this.match(Java8Parser.GT);
        this.state = 2911;
        this.match(Java8Parser.GT);
        this.state = 2912;
        this.match(Java8Parser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShiftExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_shiftExpression;
    return this;
}

ShiftExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftExpressionContext.prototype.constructor = ShiftExpressionContext;

ShiftExpressionContext.prototype.additiveExpression = function() {
    return this.getTypedRuleContext(AdditiveExpressionContext,0);
};

ShiftExpressionContext.prototype.shiftExpression = function() {
    return this.getTypedRuleContext(ShiftExpressionContext,0);
};

ShiftExpressionContext.prototype.ltlt = function() {
    return this.getTypedRuleContext(LtltContext,0);
};

ShiftExpressionContext.prototype.gtgt = function() {
    return this.getTypedRuleContext(GtgtContext,0);
};

ShiftExpressionContext.prototype.gtgtgt = function() {
    return this.getTypedRuleContext(GtgtgtContext,0);
};

ShiftExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitShiftExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.shiftExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ShiftExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 518;
    this.enterRecursionRule(localctx, 518, Java8Parser.RULE_shiftExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2915;
        this.additiveExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2931;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,315,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2929;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_shiftExpression);
                    this.state = 2917;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 2918;
                    this.ltlt();
                    this.state = 2919;
                    this.additiveExpression(0);
                    break;

                case 2:
                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_shiftExpression);
                    this.state = 2921;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2922;
                    this.gtgt();
                    this.state = 2923;
                    this.additiveExpression(0);
                    break;

                case 3:
                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_shiftExpression);
                    this.state = 2925;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 2926;
                    this.gtgtgt();
                    this.state = 2927;
                    this.additiveExpression(0);
                    break;

                } 
            }
            this.state = 2933;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,315,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AdditiveExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_additiveExpression;
    return this;
}

AdditiveExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.multiplicativeExpression = function() {
    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
};

AdditiveExpressionContext.prototype.additiveExpression = function() {
    return this.getTypedRuleContext(AdditiveExpressionContext,0);
};

AdditiveExpressionContext.prototype.add = function() {
    return this.getTypedRuleContext(AddContext,0);
};

AdditiveExpressionContext.prototype.sub = function() {
    return this.getTypedRuleContext(SubContext,0);
};

AdditiveExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAdditiveExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.additiveExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AdditiveExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 520;
    this.enterRecursionRule(localctx, 520, Java8Parser.RULE_additiveExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2935;
        this.multiplicativeExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2947;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,317,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2945;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_additiveExpression);
                    this.state = 2937;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2938;
                    this.add();
                    this.state = 2939;
                    this.multiplicativeExpression(0);
                    break;

                case 2:
                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_additiveExpression);
                    this.state = 2941;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 2942;
                    this.sub();
                    this.state = 2943;
                    this.multiplicativeExpression(0);
                    break;

                } 
            }
            this.state = 2949;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,317,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function MulContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_mul;
    return this;
}

MulContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MulContext.prototype.constructor = MulContext;

MulContext.prototype.MUL = function() {
    return this.getToken(Java8Parser.MUL, 0);
};

MulContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMul(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.MulContext = MulContext;

Java8Parser.prototype.mul = function() {

    var localctx = new MulContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, Java8Parser.RULE_mul);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2950;
        this.match(Java8Parser.MUL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DivContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_div;
    return this;
}

DivContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DivContext.prototype.constructor = DivContext;

DivContext.prototype.DIV = function() {
    return this.getToken(Java8Parser.DIV, 0);
};

DivContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitDiv(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.DivContext = DivContext;

Java8Parser.prototype.div = function() {

    var localctx = new DivContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, Java8Parser.RULE_div);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2952;
        this.match(Java8Parser.DIV);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_mod;
    return this;
}

ModContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModContext.prototype.constructor = ModContext;

ModContext.prototype.MOD = function() {
    return this.getToken(Java8Parser.MOD, 0);
};

ModContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMod(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.ModContext = ModContext;

Java8Parser.prototype.mod = function() {

    var localctx = new ModContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, Java8Parser.RULE_mod);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2954;
        this.match(Java8Parser.MOD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplicativeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_multiplicativeExpression;
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

MultiplicativeExpressionContext.prototype.multiplicativeExpression = function() {
    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
};

MultiplicativeExpressionContext.prototype.mul = function() {
    return this.getTypedRuleContext(MulContext,0);
};

MultiplicativeExpressionContext.prototype.div = function() {
    return this.getTypedRuleContext(DivContext,0);
};

MultiplicativeExpressionContext.prototype.mod = function() {
    return this.getTypedRuleContext(ModContext,0);
};

MultiplicativeExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitMultiplicativeExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



Java8Parser.prototype.multiplicativeExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MultiplicativeExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 528;
    this.enterRecursionRule(localctx, 528, Java8Parser.RULE_multiplicativeExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2957;
        this.unaryExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2973;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,319,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2971;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
                    this.state = 2959;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 2960;
                    this.mul();
                    this.state = 2961;
                    this.unaryExpression();
                    break;

                case 2:
                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
                    this.state = 2963;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2964;
                    this.div();
                    this.state = 2965;
                    this.unaryExpression();
                    break;

                case 3:
                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
                    this.state = 2967;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 2968;
                    this.mod();
                    this.state = 2969;
                    this.unaryExpression();
                    break;

                } 
            }
            this.state = 2975;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,319,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_add;
    return this;
}

AddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AddContext.prototype.constructor = AddContext;

AddContext.prototype.ADD = function() {
    return this.getToken(Java8Parser.ADD, 0);
};

AddContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitAdd(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.AddContext = AddContext;

Java8Parser.prototype.add = function() {

    var localctx = new AddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, Java8Parser.RULE_add);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2976;
        this.match(Java8Parser.ADD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_sub;
    return this;
}

SubContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubContext.prototype.constructor = SubContext;

SubContext.prototype.SUB = function() {
    return this.getToken(Java8Parser.SUB, 0);
};

SubContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitSub(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.SubContext = SubContext;

Java8Parser.prototype.sub = function() {

    var localctx = new SubContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, Java8Parser.RULE_sub);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2978;
        this.match(Java8Parser.SUB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unaryExpression;
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.preIncrementExpression = function() {
    return this.getTypedRuleContext(PreIncrementExpressionContext,0);
};

UnaryExpressionContext.prototype.preDecrementExpression = function() {
    return this.getTypedRuleContext(PreDecrementExpressionContext,0);
};

UnaryExpressionContext.prototype.add = function() {
    return this.getTypedRuleContext(AddContext,0);
};

UnaryExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

UnaryExpressionContext.prototype.sub = function() {
    return this.getTypedRuleContext(SubContext,0);
};

UnaryExpressionContext.prototype.unaryExpressionNotPlusMinus = function() {
    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
};

UnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnaryExpressionContext = UnaryExpressionContext;

Java8Parser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, Java8Parser.RULE_unaryExpression);
    try {
        this.state = 2989;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Java8Parser.INC:
            this.enterOuterAlt(localctx, 1);
            this.state = 2980;
            this.preIncrementExpression();
            break;
        case Java8Parser.DEC:
            this.enterOuterAlt(localctx, 2);
            this.state = 2981;
            this.preDecrementExpression();
            break;
        case Java8Parser.ADD:
            this.enterOuterAlt(localctx, 3);
            this.state = 2982;
            this.add();
            this.state = 2983;
            this.unaryExpression();
            break;
        case Java8Parser.SUB:
            this.enterOuterAlt(localctx, 4);
            this.state = 2985;
            this.sub();
            this.state = 2986;
            this.unaryExpression();
            break;
        case Java8Parser.BOOLEAN:
        case Java8Parser.BYTE:
        case Java8Parser.CHAR:
        case Java8Parser.DOUBLE:
        case Java8Parser.FLOAT:
        case Java8Parser.INT:
        case Java8Parser.LONG:
        case Java8Parser.NEW:
        case Java8Parser.SHORT:
        case Java8Parser.SUPER:
        case Java8Parser.THIS:
        case Java8Parser.VOID:
        case Java8Parser.IntegerLiteral:
        case Java8Parser.FloatingPointLiteral:
        case Java8Parser.BooleanLiteral:
        case Java8Parser.CharacterLiteral:
        case Java8Parser.StringLiteral:
        case Java8Parser.NullLiteral:
        case Java8Parser.LPAREN:
        case Java8Parser.BANG:
        case Java8Parser.TILDE:
        case Java8Parser.Identifier:
        case Java8Parser.AT:
            this.enterOuterAlt(localctx, 5);
            this.state = 2988;
            this.unaryExpressionNotPlusMinus();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_inc;
    return this;
}

IncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncContext.prototype.constructor = IncContext;

IncContext.prototype.INC = function() {
    return this.getToken(Java8Parser.INC, 0);
};

IncContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitInc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.IncContext = IncContext;

Java8Parser.prototype.inc = function() {

    var localctx = new IncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, Java8Parser.RULE_inc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2991;
        this.match(Java8Parser.INC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PreIncrementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_preIncrementExpression;
    return this;
}

PreIncrementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreIncrementExpressionContext.prototype.constructor = PreIncrementExpressionContext;

PreIncrementExpressionContext.prototype.inc = function() {
    return this.getTypedRuleContext(IncContext,0);
};

PreIncrementExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

PreIncrementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPreIncrementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PreIncrementExpressionContext = PreIncrementExpressionContext;

Java8Parser.prototype.preIncrementExpression = function() {

    var localctx = new PreIncrementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, Java8Parser.RULE_preIncrementExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2993;
        this.inc();
        this.state = 2994;
        this.unaryExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_dec;
    return this;
}

DecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecContext.prototype.constructor = DecContext;

DecContext.prototype.DEC = function() {
    return this.getToken(Java8Parser.DEC, 0);
};

DecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitDec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.DecContext = DecContext;

Java8Parser.prototype.dec = function() {

    var localctx = new DecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, Java8Parser.RULE_dec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2996;
        this.match(Java8Parser.DEC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PreDecrementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_preDecrementExpression;
    return this;
}

PreDecrementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreDecrementExpressionContext.prototype.constructor = PreDecrementExpressionContext;

PreDecrementExpressionContext.prototype.dec = function() {
    return this.getTypedRuleContext(DecContext,0);
};

PreDecrementExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

PreDecrementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPreDecrementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PreDecrementExpressionContext = PreDecrementExpressionContext;

Java8Parser.prototype.preDecrementExpression = function() {

    var localctx = new PreDecrementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, Java8Parser.RULE_preDecrementExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2998;
        this.dec();
        this.state = 2999;
        this.unaryExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TildeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_tilde;
    return this;
}

TildeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TildeContext.prototype.constructor = TildeContext;

TildeContext.prototype.TILDE = function() {
    return this.getToken(Java8Parser.TILDE, 0);
};

TildeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitTilde(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.TildeContext = TildeContext;

Java8Parser.prototype.tilde = function() {

    var localctx = new TildeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, Java8Parser.RULE_tilde);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3001;
        this.match(Java8Parser.TILDE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BangContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_bang;
    return this;
}

BangContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BangContext.prototype.constructor = BangContext;

BangContext.prototype.BANG = function() {
    return this.getToken(Java8Parser.BANG, 0);
};

BangContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitBang(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.BangContext = BangContext;

Java8Parser.prototype.bang = function() {

    var localctx = new BangContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, Java8Parser.RULE_bang);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3003;
        this.match(Java8Parser.BANG);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryExpressionNotPlusMinusContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_unaryExpressionNotPlusMinus;
    return this;
}

UnaryExpressionNotPlusMinusContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionNotPlusMinusContext.prototype.constructor = UnaryExpressionNotPlusMinusContext;

UnaryExpressionNotPlusMinusContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

UnaryExpressionNotPlusMinusContext.prototype.tilde = function() {
    return this.getTypedRuleContext(TildeContext,0);
};

UnaryExpressionNotPlusMinusContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

UnaryExpressionNotPlusMinusContext.prototype.bang = function() {
    return this.getTypedRuleContext(BangContext,0);
};

UnaryExpressionNotPlusMinusContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

UnaryExpressionNotPlusMinusContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitUnaryExpressionNotPlusMinus(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext;

Java8Parser.prototype.unaryExpressionNotPlusMinus = function() {

    var localctx = new UnaryExpressionNotPlusMinusContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, Java8Parser.RULE_unaryExpressionNotPlusMinus);
    try {
        this.state = 3013;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3005;
            this.postfixExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3006;
            this.tilde();
            this.state = 3007;
            this.unaryExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3009;
            this.bang();
            this.state = 3010;
            this.unaryExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3012;
            this.castExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostfixExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_postfixExpression;
    return this;
}

PostfixExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixExpressionContext.prototype.constructor = PostfixExpressionContext;

PostfixExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

PostfixExpressionContext.prototype.expressionName = function() {
    return this.getTypedRuleContext(ExpressionNameContext,0);
};

PostfixExpressionContext.prototype.postIncrementExpression_lf_postfixExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PostIncrementExpression_lf_postfixExpressionContext);
    } else {
        return this.getTypedRuleContext(PostIncrementExpression_lf_postfixExpressionContext,i);
    }
};

PostfixExpressionContext.prototype.postDecrementExpression_lf_postfixExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PostDecrementExpression_lf_postfixExpressionContext);
    } else {
        return this.getTypedRuleContext(PostDecrementExpression_lf_postfixExpressionContext,i);
    }
};

PostfixExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPostfixExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PostfixExpressionContext = PostfixExpressionContext;

Java8Parser.prototype.postfixExpression = function() {

    var localctx = new PostfixExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, Java8Parser.RULE_postfixExpression);
    try {
        this.state = 3028;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3015;
            this.primary();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3016;
            this.expressionName();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3019;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3017;
                this.primary();
                break;

            case 2:
                this.state = 3018;
                this.expressionName();
                break;

            }
            this.state = 3025;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,324,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3023;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case Java8Parser.INC:
                        this.state = 3021;
                        this.postIncrementExpression_lf_postfixExpression();
                        break;
                    case Java8Parser.DEC:
                        this.state = 3022;
                        this.postDecrementExpression_lf_postfixExpression();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 3027;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,324,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostIncrementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_postIncrementExpression;
    return this;
}

PostIncrementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostIncrementExpressionContext.prototype.constructor = PostIncrementExpressionContext;

PostIncrementExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

PostIncrementExpressionContext.prototype.inc = function() {
    return this.getTypedRuleContext(IncContext,0);
};

PostIncrementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPostIncrementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PostIncrementExpressionContext = PostIncrementExpressionContext;

Java8Parser.prototype.postIncrementExpression = function() {

    var localctx = new PostIncrementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, Java8Parser.RULE_postIncrementExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3030;
        this.postfixExpression();
        this.state = 3031;
        this.inc();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostIncrementExpression_lf_postfixExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_postIncrementExpression_lf_postfixExpression;
    return this;
}

PostIncrementExpression_lf_postfixExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostIncrementExpression_lf_postfixExpressionContext.prototype.constructor = PostIncrementExpression_lf_postfixExpressionContext;


PostIncrementExpression_lf_postfixExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPostIncrementExpression_lf_postfixExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PostIncrementExpression_lf_postfixExpressionContext = PostIncrementExpression_lf_postfixExpressionContext;

Java8Parser.prototype.postIncrementExpression_lf_postfixExpression = function() {

    var localctx = new PostIncrementExpression_lf_postfixExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, Java8Parser.RULE_postIncrementExpression_lf_postfixExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3033;
        this.match(Java8Parser.INC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostDecrementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_postDecrementExpression;
    return this;
}

PostDecrementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostDecrementExpressionContext.prototype.constructor = PostDecrementExpressionContext;

PostDecrementExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

PostDecrementExpressionContext.prototype.dec = function() {
    return this.getTypedRuleContext(DecContext,0);
};

PostDecrementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPostDecrementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PostDecrementExpressionContext = PostDecrementExpressionContext;

Java8Parser.prototype.postDecrementExpression = function() {

    var localctx = new PostDecrementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, Java8Parser.RULE_postDecrementExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3035;
        this.postfixExpression();
        this.state = 3036;
        this.dec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostDecrementExpression_lf_postfixExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_postDecrementExpression_lf_postfixExpression;
    return this;
}

PostDecrementExpression_lf_postfixExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostDecrementExpression_lf_postfixExpressionContext.prototype.constructor = PostDecrementExpression_lf_postfixExpressionContext;


PostDecrementExpression_lf_postfixExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitPostDecrementExpression_lf_postfixExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.PostDecrementExpression_lf_postfixExpressionContext = PostDecrementExpression_lf_postfixExpressionContext;

Java8Parser.prototype.postDecrementExpression_lf_postfixExpression = function() {

    var localctx = new PostDecrementExpression_lf_postfixExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, Java8Parser.RULE_postDecrementExpression_lf_postfixExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3038;
        this.match(Java8Parser.DEC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CastExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Java8Parser.RULE_castExpression;
    return this;
}

CastExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

CastExpressionContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

CastExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

CastExpressionContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

CastExpressionContext.prototype.unaryExpressionNotPlusMinus = function() {
    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
};

CastExpressionContext.prototype.additionalBound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AdditionalBoundContext);
    } else {
        return this.getTypedRuleContext(AdditionalBoundContext,i);
    }
};

CastExpressionContext.prototype.lambdaExpression = function() {
    return this.getTypedRuleContext(LambdaExpressionContext,0);
};

CastExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof Java8Visitor ) {
        return visitor.visitCastExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




Java8Parser.CastExpressionContext = CastExpressionContext;

Java8Parser.prototype.castExpression = function() {

    var localctx = new CastExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, Java8Parser.RULE_castExpression);
    var _la = 0; // Token type
    try {
        this.state = 3067;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3040;
            this.match(Java8Parser.LPAREN);
            this.state = 3041;
            this.primitiveType();
            this.state = 3042;
            this.match(Java8Parser.RPAREN);
            this.state = 3043;
            this.unaryExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3045;
            this.match(Java8Parser.LPAREN);
            this.state = 3046;
            this.referenceType();
            this.state = 3050;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.BITAND) {
                this.state = 3047;
                this.additionalBound();
                this.state = 3052;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3053;
            this.match(Java8Parser.RPAREN);
            this.state = 3054;
            this.unaryExpressionNotPlusMinus();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3056;
            this.match(Java8Parser.LPAREN);
            this.state = 3057;
            this.referenceType();
            this.state = 3061;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Java8Parser.BITAND) {
                this.state = 3058;
                this.additionalBound();
                this.state = 3063;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3064;
            this.match(Java8Parser.RPAREN);
            this.state = 3065;
            this.lambdaExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


Java8Parser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 33:
			return this.packageName_sempred(localctx, predIndex);
	case 35:
			return this.packageOrTypeName_sempred(localctx, predIndex);
	case 37:
			return this.ambiguousName_sempred(localctx, predIndex);
	case 238:
			return this.conditionalOrExpression_sempred(localctx, predIndex);
	case 240:
			return this.conditionalAndExpression_sempred(localctx, predIndex);
	case 242:
			return this.inclusiveOrExpression_sempred(localctx, predIndex);
	case 244:
			return this.exclusiveOrExpression_sempred(localctx, predIndex);
	case 246:
			return this.andExpression_sempred(localctx, predIndex);
	case 249:
			return this.equalityExpression_sempred(localctx, predIndex);
	case 255:
			return this.relationalExpression_sempred(localctx, predIndex);
	case 259:
			return this.shiftExpression_sempred(localctx, predIndex);
	case 260:
			return this.additiveExpression_sempred(localctx, predIndex);
	case 264:
			return this.multiplicativeExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

Java8Parser.prototype.packageName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.packageOrTypeName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.ambiguousName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.conditionalOrExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.conditionalAndExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.inclusiveOrExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.exclusiveOrExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.andExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.equalityExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 2);
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.relationalExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 5);
		case 11:
			return this.precpred(this._ctx, 4);
		case 12:
			return this.precpred(this._ctx, 3);
		case 13:
			return this.precpred(this._ctx, 2);
		case 14:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.shiftExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 15:
			return this.precpred(this._ctx, 3);
		case 16:
			return this.precpred(this._ctx, 2);
		case 17:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.additiveExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 18:
			return this.precpred(this._ctx, 2);
		case 19:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Java8Parser.prototype.multiplicativeExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 20:
			return this.precpred(this._ctx, 3);
		case 21:
			return this.precpred(this._ctx, 2);
		case 22:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.Java8Parser = Java8Parser;
