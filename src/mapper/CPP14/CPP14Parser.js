// Generated from C:\Users\RYOSUKE\eclipse\java-oxygen\eclipse\..\..\..\eclipse-workspace\net.unicoen\UniMapperGenerator\src-gen\CPP14.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CPP14Visitor = require('./CPP14Visitor').CPP14Visitor;

var grammarFileName = "CPP14.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0091\u0a8d\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0003",
    "\u0002\u0005\u0002\u01d0\n\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003",
    "\u01da\n\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u01de\n\u0004\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u01e2\n\u0005\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u01ed\n\u0006\u0003\u0007\u0003\u0007\u0005",
    "\u0007\u01f1\n\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005",
    "\b\u0200\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0207\n",
    "\b\u0003\b\u0003\b\u0003\b\u0007\b\u020c\n\b\f\b\u000e\b\u020f\u000b",
    "\b\u0003\t\u0003\t\u0005\t\u0213\n\t\u0003\t\u0003\t\u0003\n\u0003\n",
    "\u0005\n\u0219\n\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0223\n\u000b\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\r\u0005\r\u022a\n\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0005\r\u0230\n\r\u0007\r\u0232\n\r\f\r\u000e\r\u0235",
    "\u000b\r\u0003\u000e\u0003\u000e\u0005\u000e\u0239\n\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u023f\n\u000f\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0246",
    "\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011",
    "\u024c\n\u0011\u0003\u0011\u0005\u0011\u024f\n\u0011\u0003\u0011\u0005",
    "\u0011\u0252\n\u0011\u0003\u0011\u0005\u0011\u0255\n\u0011\u0003\u0012",
    "\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u025e\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0005\u0013\u0265\n\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u0299\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u02a8\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u02ae\n",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u02b4",
    "\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0007\u0013\u02c1\n\u0013\f\u0013\u000e\u0013\u02c4\u000b\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0015\u0005\u0015\u02c9\n\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u02d8\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u02de\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u02e4\n\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0304\n\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0005\u001a",
    "\u030b\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u030f\n\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u0313\n\u001a\u0003\u001a\u0005\u001a",
    "\u0316\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u031a\n\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0320\n\u001a",
    "\u0005\u001a\u0322\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u032a\n\u001c\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u032e\n\u001d\u0003\u001d\u0005\u001d\u0331",
    "\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u0338\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0005\u001e\u033f\n\u001e\u0007\u001e\u0341\n\u001e",
    "\f\u001e\u000e\u001e\u0344\u000b\u001e\u0003\u001f\u0003\u001f\u0005",
    "\u001f\u0348\n\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u034c\n\u001f",
    "\u0003 \u0005 \u034f\n \u0003 \u0003 \u0003 \u0005 \u0354\n \u0003 ",
    "\u0003 \u0003 \u0003 \u0005 \u035a\n \u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0367\n\"",
    "\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007",
    "#\u0372\n#\f#\u000e#\u0375\u000b#\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u0383\n$\f",
    "$\u000e$\u0386\u000b$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0007%\u0391\n%\f%\u000e%\u0394\u000b%\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007&\u03a0",
    "\n&\f&\u000e&\u03a3\u000b&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0007\'\u03b4\n\'\f\'\u000e\'\u03b7\u000b\'\u0003(\u0003(\u0003(",
    "\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0007(\u03c2\n(\f(\u000e",
    "(\u03c5\u000b(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0007)\u03cd",
    "\n)\f)\u000e)\u03d0\u000b)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0007*\u03d8\n*\f*\u000e*\u03db\u000b*\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0007+\u03e3\n+\f+\u000e+\u03e6\u000b+\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0007,\u03ee\n,\f,\u000e,\u03f1\u000b",
    ",\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007-\u03f9\n-\f-\u000e",
    "-\u03fc\u000b-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005",
    ".\u0405\n.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u040d\n",
    "/\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00050\u041a\n0\u00031\u00031\u00031\u00031\u00031\u00031\u0007",
    "1\u0422\n1\f1\u000e1\u0425\u000b1\u00032\u00032\u00033\u00033\u0005",
    "3\u042b\n3\u00033\u00033\u00053\u042f\n3\u00033\u00033\u00053\u0433",
    "\n3\u00033\u00033\u00053\u0437\n3\u00033\u00033\u00053\u043b\n3\u0003",
    "3\u00033\u00053\u043f\n3\u00033\u00033\u00053\u0443\n3\u00033\u0003",
    "3\u00053\u0447\n3\u00033\u00033\u00053\u044b\n3\u00033\u00033\u0005",
    "3\u044f\n3\u00033\u00033\u00053\u0453\n3\u00033\u00033\u00033\u0003",
    "3\u00053\u0459\n3\u00033\u00053\u045c\n3\u00034\u00054\u045f\n4\u0003",
    "4\u00034\u00034\u00034\u00054\u0465\n4\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00054\u046d\n4\u00034\u00034\u00034\u00054\u0472\n4\u0003",
    "5\u00055\u0475\n5\u00035\u00035\u00036\u00036\u00056\u047b\n6\u0003",
    "6\u00036\u00037\u00037\u00077\u0481\n7\f7\u000e7\u0484\u000b7\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00058\u0494\n8\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u0003:\u0003:\u0005:\u049e\n:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0005:\u04a6\n:\u0003:\u0003:\u0003:\u0003:\u0005:\u04ac\n",
    ":\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0005=\u04c0",
    "\n=\u0003=\u0003=\u0005=\u04c4\n=\u0003=\u0003=\u0003=\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0005",
    "?\u04d4\n?\u0003@\u0005@\u04d7\n@\u0003@\u0003@\u0003@\u0003A\u0003",
    "A\u0005A\u04de\nA\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003",
    "D\u0003D\u0003D\u0003E\u0003E\u0005E\u04ec\nE\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0005E\u04f3\nE\u0003F\u0003F\u0005F\u04f7\nF\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0007G\u04fe\nG\fG\u000eG\u0501\u000bG\u0003",
    "H\u0005H\u0504\nH\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003J\u0003",
    "J\u0005J\u050e\nJ\u0003J\u0005J\u0511\nJ\u0003J\u0003J\u0005J\u0515",
    "\nJ\u0003J\u0005J\u0518\nJ\u0003J\u0003J\u0005J\u051c\nJ\u0003J\u0005",
    "J\u051f\nJ\u0005J\u0521\nJ\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u052e\nK\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0005L\u0537\nL\u0003M\u0003M\u0005M\u053b",
    "\nM\u0003N\u0003N\u0003N\u0005N\u0540\nN\u0003N\u0003N\u0003N\u0003",
    "N\u0003O\u0003O\u0003O\u0003P\u0005P\u054a\nP\u0003P\u0005P\u054d\n",
    "P\u0003P\u0003P\u0005P\u0551\nP\u0003Q\u0003Q\u0003Q\u0003Q\u0007Q\u0557",
    "\nQ\fQ\u000eQ\u055a\u000bQ\u0005Q\u055c\nQ\u0003R\u0007R\u055f\nR\f",
    "R\u000eR\u0562\u000bR\u0003R\u0003R\u0003R\u0005R\u0567\nR\u0003R\u0007",
    "R\u056a\nR\fR\u000eR\u056d\u000bR\u0003R\u0003R\u0005R\u0571\nR\u0003",
    "S\u0003S\u0003S\u0003T\u0005T\u0577\nT\u0003T\u0005T\u057a\nT\u0003",
    "T\u0003T\u0003T\u0005T\u057f\nT\u0003T\u0003T\u0003T\u0005T\u0584\n",
    "T\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003V\u0003",
    "V\u0003W\u0003W\u0003W\u0003X\u0003X\u0005X\u0595\nX\u0003Y\u0003Y\u0005",
    "Y\u0599\nY\u0003Y\u0003Y\u0003Y\u0005Y\u059e\nY\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0005Z\u05a5\nZ\u0003[\u0003[\u0005[\u05a9\n[\u0003",
    "[\u0003[\u0003[\u0005[\u05ae\n[\u0003\\\u0003\\\u0003]\u0003]\u0003",
    "^\u0003^\u0003_\u0003_\u0003_\u0005_\u05b9\n_\u0003`\u0003`\u0003`\u0003",
    "`\u0005`\u05bf\n`\u0003a\u0003a\u0005a\u05c3\na\u0003a\u0003a\u0003",
    "a\u0005a\u05c8\na\u0003b\u0003b\u0005b\u05cc\nb\u0003b\u0003b\u0003",
    "b\u0005b\u05d1\nb\u0003c\u0005c\u05d4\nc\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0005c\u05e6\nc\u0003c\u0003c\u0003c\u0003c\u0003c\u0003",
    "c\u0005c\u05ee\nc\u0003d\u0003d\u0003d\u0003d\u0005d\u05f4\nd\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\u05ff",
    "\ne\u0003f\u0003f\u0005f\u0603\nf\u0003f\u0005f\u0606\nf\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0005f\u0610\nf\u0003f\u0003",
    "f\u0003f\u0003f\u0005f\u0616\nf\u0003f\u0005f\u0619\nf\u0003g\u0003",
    "g\u0003h\u0003h\u0003h\u0005h\u0620\nh\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0003h\u0003h\u0003h\u0005h\u062a\nh\u0003i\u0003i\u0005i\u062e\n",
    "i\u0003i\u0005i\u0631\ni\u0003i\u0005i\u0634\ni\u0003i\u0003i\u0005",
    "i\u0638\ni\u0003i\u0003i\u0003i\u0005i\u063d\ni\u0005i\u063f\ni\u0003",
    "j\u0003j\u0005j\u0643\nj\u0003j\u0003j\u0005j\u0647\nj\u0003j\u0003",
    "j\u0003k\u0003k\u0003k\u0003k\u0003k\u0005k\u0650\nk\u0003l\u0003l\u0003",
    "l\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0007m\u065b\nm\fm\u000e",
    "m\u065e\u000bm\u0003n\u0003n\u0003n\u0003n\u0003n\u0005n\u0665\nn\u0003",
    "o\u0003o\u0003p\u0003p\u0005p\u066b\np\u0003q\u0003q\u0003r\u0003r\u0005",
    "r\u0671\nr\u0003s\u0003s\u0005s\u0675\ns\u0003t\u0005t\u0678\nt\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003u\u0005u\u0681\nu\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003v\u0005v\u068a\nv\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003w\u0005w\u0692\nw\u0003x\u0003x\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003z\u0005z\u069d\nz\u0003z\u0003z\u0003{\u0003",
    "{\u0005{\u06a3\n{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0005{\u06ae\n{\u0003|\u0005|\u06b1\n|\u0003|\u0003|\u0003",
    "|\u0005|\u06b6\n|\u0003|\u0003|\u0003|\u0003}\u0003}\u0003}\u0003}\u0003",
    "}\u0003}\u0003~\u0003~\u0003~\u0003~\u0005~\u06c5\n~\u0003~\u0003~\u0003",
    "~\u0003~\u0005~\u06cb\n~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0007\u007f\u06d2\n\u007f\f\u007f\u000e\u007f\u06d5\u000b",
    "\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0005\u0080\u06de\n\u0080\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0081\u0005\u0081\u06e4\n\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u06ec",
    "\n\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u06f0\n\u0081\u0003\u0082",
    "\u0003\u0082\u0005\u0082\u06f4\n\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0005\u0082\u06f9\n\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0005\u0082\u06fe\n\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0007\u0082\u0705\n\u0082\f\u0082\u000e\u0082\u0708",
    "\u000b\u0082\u0003\u0083\u0003\u0083\u0005\u0083\u070c\n\u0083\u0003",
    "\u0084\u0003\u0084\u0005\u0084\u0710\n\u0084\u0003\u0085\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0087\u0003\u0088\u0003\u0088\u0005\u0088\u071e\n",
    "\u0088\u0003\u0088\u0003\u0088\u0007\u0088\u0722\n\u0088\f\u0088\u000e",
    "\u0088\u0725\u000b\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0005\u0089\u0733\n\u0089\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0007\u008a\u0738\n\u008a\f\u008a\u000e\u008a\u073b",
    "\u000b\u008a\u0003\u008b\u0003\u008b\u0005\u008b\u073f\n\u008b\u0003",
    "\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u0746",
    "\n\u008c\u0003\u008d\u0007\u008d\u0749\n\u008d\f\u008d\u000e\u008d\u074c",
    "\u000b\u008d\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0005\u008e\u0753\n\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0005\u008e\u0759\n\u008e\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0005\u008e\u0760\n\u008e\u0003\u008e\u0003",
    "\u008e\u0005\u008e\u0764\n\u008e\u0007\u008e\u0766\n\u008e\f\u008e\u000e",
    "\u008e\u0769\u000b\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0005\u008f\u076f\n\u008f\u0003\u008f\u0005\u008f\u0772\n\u008f\u0003",
    "\u008f\u0005\u008f\u0775\n\u008f\u0003\u008f\u0005\u008f\u0778\n\u008f",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u077d\n\u0090\u0003",
    "\u0091\u0003\u0091\u0005\u0091\u0781\n\u0091\u0003\u0091\u0005\u0091",
    "\u0784\n\u0091\u0003\u0091\u0003\u0091\u0005\u0091\u0788\n\u0091\u0003",
    "\u0091\u0003\u0091\u0005\u0091\u078c\n\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0005\u0091\u0791\n\u0091\u0003\u0091\u0005\u0091\u0794",
    "\n\u0091\u0005\u0091\u0796\n\u0091\u0003\u0092\u0003\u0092\u0005\u0092",
    "\u079a\n\u0092\u0003\u0093\u0003\u0093\u0003\u0094\u0003\u0094\u0003",
    "\u0095\u0005\u0095\u07a1\n\u0095\u0003\u0095\u0003\u0095\u0003\u0096",
    "\u0003\u0096\u0005\u0096\u07a7\n\u0096\u0003\u0097\u0003\u0097\u0005",
    "\u0097\u07ab\n\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097",
    "\u0005\u0097\u07b1\n\u0097\u0003\u0098\u0003\u0098\u0003\u0098\u0005",
    "\u0098\u07b6\n\u0098\u0005\u0098\u07b8\n\u0098\u0003\u0099\u0003\u0099",
    "\u0003\u0099\u0003\u0099\u0005\u0099\u07be\n\u0099\u0003\u0099\u0003",
    "\u0099\u0005\u0099\u07c2\n\u0099\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u0099\u0005\u0099\u07c8\n\u0099\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u07cf\n\u0099\u0003\u0099",
    "\u0003\u0099\u0005\u0099\u07d3\n\u0099\u0007\u0099\u07d5\n\u0099\f\u0099",
    "\u000e\u0099\u07d8\u000b\u0099\u0003\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0005\u009a\u07de\n\u009a\u0003\u009b\u0003\u009b\u0003\u009b",
    "\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0005\u009b",
    "\u07e8\n\u009b\u0003\u009b\u0003\u009b\u0005\u009b\u07ec\n\u009b\u0007",
    "\u009b\u07ee\n\u009b\f\u009b\u000e\u009b\u07f1\u000b\u009b\u0003\u009c",
    "\u0005\u009c\u07f4\n\u009c\u0003\u009c\u0005\u009c\u07f7\n\u009c\u0003",
    "\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u07fd\n\u009c",
    "\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0007\u009d\u0805\n\u009d\f\u009d\u000e\u009d\u0808\u000b\u009d\u0003",
    "\u009e\u0005\u009e\u080b\n\u009e\u0003\u009e\u0003\u009e\u0003\u009e",
    "\u0003\u009e\u0005\u009e\u0811\n\u009e\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0819\n\u009e",
    "\u0003\u009e\u0003\u009e\u0005\u009e\u081d\n\u009e\u0003\u009e\u0005",
    "\u009e\u0820\n\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0824\n\u009e",
    "\u0003\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0829\n\u009e\u0003",
    "\u009f\u0005\u009f\u082c\n\u009f\u0003\u009f\u0005\u009f\u082f\n\u009f",
    "\u0003\u009f\u0003\u009f\u0005\u009f\u0833\n\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u00a0\u0005\u00a0\u0838\n\u00a0\u0003\u00a0\u0003\u00a0",
    "\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a2",
    "\u0005\u00a2\u0842\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u084c",
    "\n\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0005\u00a3\u0853\n\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0005",
    "\u00a4\u0858\n\u00a4\u0003\u00a5\u0003\u00a5\u0005\u00a5\u085c\n\u00a5",
    "\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0007\u00a6\u0861\n\u00a6\f\u00a6",
    "\u000e\u00a6\u0864\u000b\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0005",
    "\u00a7\u0869\n\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7",
    "\u0005\u00a7\u086f\n\u00a7\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0873",
    "\n\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa",
    "\u0005\u00aa\u087a\n\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003",
    "\u00ab\u0005\u00ab\u0880\n\u00ab\u0003\u00ab\u0005\u00ab\u0883\n\u00ab",
    "\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0887\n\u00ab\u0003\u00ab\u0005",
    "\u00ab\u088a\n\u00ab\u0003\u00ab\u0003\u00ab\u0005\u00ab\u088e\n\u00ab",
    "\u0003\u00ab\u0005\u00ab\u0891\n\u00ab\u0005\u00ab\u0893\n\u00ab\u0003",
    "\u00ac\u0005\u00ac\u0896\n\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af\u0005\u00af",
    "\u08a0\n\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0005\u00af\u08a5",
    "\n\u00af\u0005\u00af\u08a7\n\u00af\u0003\u00b0\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u08b0\n",
    "\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0005\u00b2\u08b6",
    "\n\u00b2\u0003\u00b2\u0005\u00b2\u08b9\n\u00b2\u0003\u00b2\u0003\u00b2",
    "\u0007\u00b2\u08bd\n\u00b2\f\u00b2\u000e\u00b2\u08c0\u000b\u00b2\u0003",
    "\u00b2\u0005\u00b2\u08c3\n\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0007\u00b3\u08cb\n\u00b3\f\u00b3",
    "\u000e\u00b3\u08ce\u000b\u00b3\u0003\u00b4\u0003\u00b4\u0005\u00b4\u08d2",
    "\n\u00b4\u0003\u00b4\u0005\u00b4\u08d5\n\u00b4\u0003\u00b4\u0003\u00b4",
    "\u0003\u00b4\u0005\u00b4\u08da\n\u00b4\u0003\u00b4\u0003\u00b4\u0005",
    "\u00b4\u08de\n\u00b4\u0003\u00b4\u0005\u00b4\u08e1\n\u00b4\u0003\u00b4",
    "\u0005\u00b4\u08e4\n\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u08e8",
    "\n\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0007\u00b5\u08ef\n\u00b5\f\u00b5\u000e\u00b5\u08f2\u000b\u00b5\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u08ff",
    "\n\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9",
    "\u0905\n\u00b9\u0007\u00b9\u0907\n\u00b9\f\u00b9\u000e\u00b9\u090a\u000b",
    "\u00b9\u0003\u00ba\u0005\u00ba\u090d\n\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0005\u00ba\u0911\n\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u0915",
    "\n\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u0919\n\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0005\u00ba\u091d\n\u00ba\u0003\u00ba\u0003\u00ba\u0005",
    "\u00ba\u0921\n\u00ba\u0003\u00bb\u0005\u00bb\u0924\n\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0005\u00bb\u0928\n\u00bb\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bd\u0003\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00bf\u0003",
    "\u00bf\u0005\u00bf\u0933\n\u00bf\u0003\u00c0\u0003\u00c0\u0005\u00c0",
    "\u0937\n\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003",
    "\u00c2\u0005\u00c2\u093e\n\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2",
    "\u0942\n\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u0947",
    "\n\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u094c\n\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3",
    "\u0953\n\u00c3\u0003\u00c4\u0003\u00c4\u0005\u00c4\u0957\n\u00c4\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0005\u00c6\u0961\n\u00c6\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c8\u0003\u00c8",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0007\u00c8\u096f\n",
    "\u00c8\f\u00c8\u000e\u00c8\u0972\u000b\u00c8\u0003\u00c9\u0003\u00c9",
    "\u0005\u00c9\u0976\n\u00c9\u0003\u00ca\u0003\u00ca\u0005\u00ca\u097a",
    "\n\u00ca\u0003\u00ca\u0005\u00ca\u097d\n\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0005\u00ca\u0981\n\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0005\u00ca\u0987\n\u00ca\u0003\u00ca\u0005\u00ca\u098a\n\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0005\u00ca\u098e\n\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0005\u00ca\u0998\n\u00ca\u0003\u00ca\u0005\u00ca\u099b\n\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0005\u00ca\u09a3\n\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0005",
    "\u00ca\u09a8\n\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb",
    "\u09ad\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0005\u00cc\u09b5\n\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u09bc\n\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0005\u00cc\u09c0\n\u00cc\u0003\u00cd\u0003\u00cd",
    "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u09c7\n\u00ce\u0003",
    "\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u09cd\n\u00ce",
    "\u0007\u00ce\u09cf\n\u00ce\f\u00ce\u000e\u00ce\u09d2\u000b\u00ce\u0003",
    "\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u09d7\n\u00cf\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0",
    "\u0005\u00d0\u09e0\n\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u09e4",
    "\n\u00d0\u0003\u00d1\u0005\u00d1\u09e7\n\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4",
    "\u0005\u00d4\u09f7\n\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003",
    "\u00d5\u0003\u00d5\u0005\u00d5\u09fe\n\u00d5\u0003\u00d6\u0003\u00d6",
    "\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d7\u0005\u00d7",
    "\u0a07\n\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005",
    "\u00d7\u0a0d\n\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0a11\n\u00d7",
    "\u0003\u00d7\u0005\u00d7\u0a14\n\u00d7\u0003\u00d8\u0003\u00d8\u0005",
    "\u00d8\u0a18\n\u00d8\u0003\u00d9\u0003\u00d9\u0005\u00d9\u0a1c\n\u00d9",
    "\u0003\u00da\u0003\u00da\u0003\u00da\u0005\u00da\u0a21\n\u00da\u0003",
    "\u00da\u0003\u00da\u0003\u00db\u0003\u00db\u0003\u00db\u0005\u00db\u0a28",
    "\n\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0005\u00db",
    "\u0a2e\n\u00db\u0007\u00db\u0a30\n\u00db\f\u00db\u000e\u00db\u0a33\u000b",
    "\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0005\u00dc\u0a3b\n\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0005\u00df\u0a74\n",
    "\u00df\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0005\u00e0\u0a7d\n\u00e0\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e2\u0003\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e4\u0003\u00e4",
    "\u0003\u00e5\u0003\u00e5\u0003\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7",
    "\u0003\u00e7\u0002!\u000e\u0018$:DFHJLNPRTVX`\u008c\u00d8\u00fc\u0102",
    "\u010e\u011a\u0130\u0134\u0138\u0164\u0168\u0170\u018e\u019a\u01b4\u00e8",
    "\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c",
    "\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082",
    "\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a",
    "\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2",
    "\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca",
    "\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2",
    "\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa",
    "\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112",
    "\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a",
    "\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142",
    "\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a",
    "\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172",
    "\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a",
    "\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2",
    "\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba",
    "\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u0002\f\u0004",
    "\u0002\\\\``\u0004\u0002VX\\_\u0007\u0002\u001f\u001f**44::AA\u0005",
    "\u0002\u001d\u001d\'\'KK\u0004\u0002\u0010\u0010MM\u0004\u0002\\\\q",
    "q\u0005\u0002\u000f\u000f==HH\u0004\u0002!!00\u0003\u000213\u0003\u0002",
    "\u008a\u008d\u0002\u0bb3\u0002\u01cf\u0003\u0002\u0002\u0002\u0004\u01d9",
    "\u0003\u0002\u0002\u0002\u0006\u01dd\u0003\u0002\u0002\u0002\b\u01e1",
    "\u0003\u0002\u0002\u0002\n\u01ec\u0003\u0002\u0002\u0002\f\u01ee\u0003",
    "\u0002\u0002\u0002\u000e\u01ff\u0003\u0002\u0002\u0002\u0010\u0210\u0003",
    "\u0002\u0002\u0002\u0012\u0216\u0003\u0002\u0002\u0002\u0014\u0222\u0003",
    "\u0002\u0002\u0002\u0016\u0224\u0003\u0002\u0002\u0002\u0018\u0226\u0003",
    "\u0002\u0002\u0002\u001a\u0238\u0003\u0002\u0002\u0002\u001c\u023e\u0003",
    "\u0002\u0002\u0002\u001e\u0245\u0003\u0002\u0002\u0002 \u0247\u0003",
    "\u0002\u0002\u0002\"\u0256\u0003\u0002\u0002\u0002$\u0298\u0003\u0002",
    "\u0002\u0002&\u02c5\u0003\u0002\u0002\u0002(\u02dd\u0003\u0002\u0002",
    "\u0002*\u02e3\u0003\u0002\u0002\u0002,\u0303\u0003\u0002\u0002\u0002",
    ".\u0305\u0003\u0002\u0002\u00020\u0307\u0003\u0002\u0002\u00022\u0321",
    "\u0003\u0002\u0002\u00024\u0323\u0003\u0002\u0002\u00026\u0327\u0003",
    "\u0002\u0002\u00028\u0330\u0003\u0002\u0002\u0002:\u0332\u0003\u0002",
    "\u0002\u0002<\u034b\u0003\u0002\u0002\u0002>\u0359\u0003\u0002\u0002",
    "\u0002@\u035b\u0003\u0002\u0002\u0002B\u0366\u0003\u0002\u0002\u0002",
    "D\u0368\u0003\u0002\u0002\u0002F\u0376\u0003\u0002\u0002\u0002H\u0387",
    "\u0003\u0002\u0002\u0002J\u0395\u0003\u0002\u0002\u0002L\u03a4\u0003",
    "\u0002\u0002\u0002N\u03b8\u0003\u0002\u0002\u0002P\u03c6\u0003\u0002",
    "\u0002\u0002R\u03d1\u0003\u0002\u0002\u0002T\u03dc\u0003\u0002\u0002",
    "\u0002V\u03e7\u0003\u0002\u0002\u0002X\u03f2\u0003\u0002\u0002\u0002",
    "Z\u0404\u0003\u0002\u0002\u0002\\\u040c\u0003\u0002\u0002\u0002^\u0419",
    "\u0003\u0002\u0002\u0002`\u041b\u0003\u0002\u0002\u0002b\u0426\u0003",
    "\u0002\u0002\u0002d\u045b\u0003\u0002\u0002\u0002f\u0471\u0003\u0002",
    "\u0002\u0002h\u0474\u0003\u0002\u0002\u0002j\u0478\u0003\u0002\u0002",
    "\u0002l\u047e\u0003\u0002\u0002\u0002n\u0493\u0003\u0002\u0002\u0002",
    "p\u0495\u0003\u0002\u0002\u0002r\u04ab\u0003\u0002\u0002\u0002t\u04ad",
    "\u0003\u0002\u0002\u0002v\u04b3\u0003\u0002\u0002\u0002x\u04bb\u0003",
    "\u0002\u0002\u0002z\u04c8\u0003\u0002\u0002\u0002|\u04d3\u0003\u0002",
    "\u0002\u0002~\u04d6\u0003\u0002\u0002\u0002\u0080\u04dd\u0003\u0002",
    "\u0002\u0002\u0082\u04df\u0003\u0002\u0002\u0002\u0084\u04e3\u0003\u0002",
    "\u0002\u0002\u0086\u04e6\u0003\u0002\u0002\u0002\u0088\u04f2\u0003\u0002",
    "\u0002\u0002\u008a\u04f6\u0003\u0002\u0002\u0002\u008c\u04f8\u0003\u0002",
    "\u0002\u0002\u008e\u0503\u0003\u0002\u0002\u0002\u0090\u0505\u0003\u0002",
    "\u0002\u0002\u0092\u0520\u0003\u0002\u0002\u0002\u0094\u052d\u0003\u0002",
    "\u0002\u0002\u0096\u0536\u0003\u0002\u0002\u0002\u0098\u053a\u0003\u0002",
    "\u0002\u0002\u009a\u053c\u0003\u0002\u0002\u0002\u009c\u0545\u0003\u0002",
    "\u0002\u0002\u009e\u0549\u0003\u0002\u0002\u0002\u00a0\u055b\u0003\u0002",
    "\u0002\u0002\u00a2\u0560\u0003\u0002\u0002\u0002\u00a4\u0572\u0003\u0002",
    "\u0002\u0002\u00a6\u0583\u0003\u0002\u0002\u0002\u00a8\u0585\u0003\u0002",
    "\u0002\u0002\u00aa\u058d\u0003\u0002\u0002\u0002\u00ac\u058f\u0003\u0002",
    "\u0002\u0002\u00ae\u0594\u0003\u0002\u0002\u0002\u00b0\u059d\u0003\u0002",
    "\u0002\u0002\u00b2\u05a4\u0003\u0002\u0002\u0002\u00b4\u05ad\u0003\u0002",
    "\u0002\u0002\u00b6\u05af\u0003\u0002\u0002\u0002\u00b8\u05b1\u0003\u0002",
    "\u0002\u0002\u00ba\u05b3\u0003\u0002\u0002\u0002\u00bc\u05b8\u0003\u0002",
    "\u0002\u0002\u00be\u05be\u0003\u0002\u0002\u0002\u00c0\u05c7\u0003\u0002",
    "\u0002\u0002\u00c2\u05d0\u0003\u0002\u0002\u0002\u00c4\u05ed\u0003\u0002",
    "\u0002\u0002\u00c6\u05f3\u0003\u0002\u0002\u0002\u00c8\u05fe\u0003\u0002",
    "\u0002\u0002\u00ca\u0618\u0003\u0002\u0002\u0002\u00cc\u061a\u0003\u0002",
    "\u0002\u0002\u00ce\u0629\u0003\u0002\u0002\u0002\u00d0\u063e\u0003\u0002",
    "\u0002\u0002\u00d2\u0640\u0003\u0002\u0002\u0002\u00d4\u064f\u0003\u0002",
    "\u0002\u0002\u00d6\u0651\u0003\u0002\u0002\u0002\u00d8\u0654\u0003\u0002",
    "\u0002\u0002\u00da\u0664\u0003\u0002\u0002\u0002\u00dc\u0666\u0003\u0002",
    "\u0002\u0002\u00de\u066a\u0003\u0002\u0002\u0002\u00e0\u066c\u0003\u0002",
    "\u0002\u0002\u00e2\u0670\u0003\u0002\u0002\u0002\u00e4\u0674\u0003\u0002",
    "\u0002\u0002\u00e6\u0677\u0003\u0002\u0002\u0002\u00e8\u0680\u0003\u0002",
    "\u0002\u0002\u00ea\u0689\u0003\u0002\u0002\u0002\u00ec\u0691\u0003\u0002",
    "\u0002\u0002\u00ee\u0693\u0003\u0002\u0002\u0002\u00f0\u0695\u0003\u0002",
    "\u0002\u0002\u00f2\u069c\u0003\u0002\u0002\u0002\u00f4\u06ad\u0003\u0002",
    "\u0002\u0002\u00f6\u06b0\u0003\u0002\u0002\u0002\u00f8\u06ba\u0003\u0002",
    "\u0002\u0002\u00fa\u06ca\u0003\u0002\u0002\u0002\u00fc\u06cc\u0003\u0002",
    "\u0002\u0002\u00fe\u06dd\u0003\u0002\u0002\u0002\u0100\u06ef\u0003\u0002",
    "\u0002\u0002\u0102\u06f8\u0003\u0002\u0002\u0002\u0104\u0709\u0003\u0002",
    "\u0002\u0002\u0106\u070f\u0003\u0002\u0002\u0002\u0108\u0711\u0003\u0002",
    "\u0002\u0002\u010a\u0715\u0003\u0002\u0002\u0002\u010c\u0717\u0003\u0002",
    "\u0002\u0002\u010e\u071b\u0003\u0002\u0002\u0002\u0110\u0732\u0003\u0002",
    "\u0002\u0002\u0112\u0734\u0003\u0002\u0002\u0002\u0114\u073c\u0003\u0002",
    "\u0002\u0002\u0116\u0745\u0003\u0002\u0002\u0002\u0118\u074a\u0003\u0002",
    "\u0002\u0002\u011a\u0758\u0003\u0002\u0002\u0002\u011c\u076a\u0003\u0002",
    "\u0002\u0002\u011e\u0779\u0003\u0002\u0002\u0002\u0120\u0795\u0003\u0002",
    "\u0002\u0002\u0122\u0797\u0003\u0002\u0002\u0002\u0124\u079b\u0003\u0002",
    "\u0002\u0002\u0126\u079d\u0003\u0002\u0002\u0002\u0128\u07a0\u0003\u0002",
    "\u0002\u0002\u012a\u07a4\u0003\u0002\u0002\u0002\u012c\u07b0\u0003\u0002",
    "\u0002\u0002\u012e\u07b7\u0003\u0002\u0002\u0002\u0130\u07c7\u0003\u0002",
    "\u0002\u0002\u0132\u07dd\u0003\u0002\u0002\u0002\u0134\u07df\u0003\u0002",
    "\u0002\u0002\u0136\u07fc\u0003\u0002\u0002\u0002\u0138\u07fe\u0003\u0002",
    "\u0002\u0002\u013a\u0828\u0003\u0002\u0002\u0002\u013c\u082b\u0003\u0002",
    "\u0002\u0002\u013e\u0837\u0003\u0002\u0002\u0002\u0140\u083b\u0003\u0002",
    "\u0002\u0002\u0142\u084b\u0003\u0002\u0002\u0002\u0144\u0852\u0003\u0002",
    "\u0002\u0002\u0146\u0857\u0003\u0002\u0002\u0002\u0148\u085b\u0003\u0002",
    "\u0002\u0002\u014a\u085d\u0003\u0002\u0002\u0002\u014c\u086e\u0003\u0002",
    "\u0002\u0002\u014e\u0872\u0003\u0002\u0002\u0002\u0150\u0874\u0003\u0002",
    "\u0002\u0002\u0152\u0877\u0003\u0002\u0002\u0002\u0154\u0892\u0003\u0002",
    "\u0002\u0002\u0156\u0895\u0003\u0002\u0002\u0002\u0158\u0899\u0003\u0002",
    "\u0002\u0002\u015a\u089b\u0003\u0002\u0002\u0002\u015c\u08a6\u0003\u0002",
    "\u0002\u0002\u015e\u08af\u0003\u0002\u0002\u0002\u0160\u08b1\u0003\u0002",
    "\u0002\u0002\u0162\u08b5\u0003\u0002\u0002\u0002\u0164\u08c4\u0003\u0002",
    "\u0002\u0002\u0166\u08e7\u0003\u0002\u0002\u0002\u0168\u08e9\u0003\u0002",
    "\u0002\u0002\u016a\u08f3\u0003\u0002\u0002\u0002\u016c\u08f5\u0003\u0002",
    "\u0002\u0002\u016e\u08f8\u0003\u0002\u0002\u0002\u0170\u08fb\u0003\u0002",
    "\u0002\u0002\u0172\u0920\u0003\u0002\u0002\u0002\u0174\u0927\u0003\u0002",
    "\u0002\u0002\u0176\u0929\u0003\u0002\u0002\u0002\u0178\u092b\u0003\u0002",
    "\u0002\u0002\u017a\u092d\u0003\u0002\u0002\u0002\u017c\u0930\u0003\u0002",
    "\u0002\u0002\u017e\u0934\u0003\u0002\u0002\u0002\u0180\u0938\u0003\u0002",
    "\u0002\u0002\u0182\u0946\u0003\u0002\u0002\u0002\u0184\u0952\u0003\u0002",
    "\u0002\u0002\u0186\u0956\u0003\u0002\u0002\u0002\u0188\u0958\u0003\u0002",
    "\u0002\u0002\u018a\u0960\u0003\u0002\u0002\u0002\u018c\u0962\u0003\u0002",
    "\u0002\u0002\u018e\u0968\u0003\u0002\u0002\u0002\u0190\u0975\u0003\u0002",
    "\u0002\u0002\u0192\u09a7\u0003\u0002\u0002\u0002\u0194\u09a9\u0003\u0002",
    "\u0002\u0002\u0196\u09bf\u0003\u0002\u0002\u0002\u0198\u09c1\u0003\u0002",
    "\u0002\u0002\u019a\u09c3\u0003\u0002\u0002\u0002\u019c\u09d6\u0003\u0002",
    "\u0002\u0002\u019e\u09e3\u0003\u0002\u0002\u0002\u01a0\u09e6\u0003\u0002",
    "\u0002\u0002\u01a2\u09eb\u0003\u0002\u0002\u0002\u01a4\u09f0\u0003\u0002",
    "\u0002\u0002\u01a6\u09f4\u0003\u0002\u0002\u0002\u01a8\u09fb\u0003\u0002",
    "\u0002\u0002\u01aa\u09ff\u0003\u0002\u0002\u0002\u01ac\u0a13\u0003\u0002",
    "\u0002\u0002\u01ae\u0a15\u0003\u0002\u0002\u0002\u01b0\u0a1b\u0003\u0002",
    "\u0002\u0002\u01b2\u0a1d\u0003\u0002\u0002\u0002\u01b4\u0a24\u0003\u0002",
    "\u0002\u0002\u01b6\u0a3a\u0003\u0002\u0002\u0002\u01b8\u0a3c\u0003\u0002",
    "\u0002\u0002\u01ba\u0a3f\u0003\u0002\u0002\u0002\u01bc\u0a73\u0003\u0002",
    "\u0002\u0002\u01be\u0a7c\u0003\u0002\u0002\u0002\u01c0\u0a7e\u0003\u0002",
    "\u0002\u0002\u01c2\u0a80\u0003\u0002\u0002\u0002\u01c4\u0a82\u0003\u0002",
    "\u0002\u0002\u01c6\u0a84\u0003\u0002\u0002\u0002\u01c8\u0a86\u0003\u0002",
    "\u0002\u0002\u01ca\u0a88\u0003\u0002\u0002\u0002\u01cc\u0a8a\u0003\u0002",
    "\u0002\u0002\u01ce\u01d0\u0005\u008cG\u0002\u01cf\u01ce\u0003\u0002",
    "\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u0003\u0003\u0002",
    "\u0002\u0002\u01d1\u01da\u0005\u01be\u00e0\u0002\u01d2\u01da\u0007@",
    "\u0002\u0002\u01d3\u01d4\u0007P\u0002\u0002\u01d4\u01d5\u0005`1\u0002",
    "\u01d5\u01d6\u0007Q\u0002\u0002\u01d6\u01da\u0003\u0002\u0002\u0002",
    "\u01d7\u01da\u0005\b\u0005\u0002\u01d8\u01da\u0005\u0010\t\u0002\u01d9",
    "\u01d1\u0003\u0002\u0002\u0002\u01d9\u01d2\u0003\u0002\u0002\u0002\u01d9",
    "\u01d3\u0003\u0002\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01d9",
    "\u01d8\u0003\u0002\u0002\u0002\u01da\u0005\u0003\u0002\u0002\u0002\u01db",
    "\u01de\u0005\n\u0006\u0002\u01dc\u01de\u0005\f\u0007\u0002\u01dd\u01db",
    "\u0003\u0002\u0002\u0002\u01dd\u01dc\u0003\u0002\u0002\u0002\u01de\u0007",
    "\u0003\u0002\u0002\u0002\u01df\u01e2\u0005\n\u0006\u0002\u01e0\u01e2",
    "\u0005\f\u0007\u0002\u01e1\u01df\u0003\u0002\u0002\u0002\u01e1\u01e0",
    "\u0003\u0002\u0002\u0002\u01e2\t\u0003\u0002\u0002\u0002\u01e3\u01ed",
    "\u0007\u007f\u0002\u0002\u01e4\u01ed\u0005\u0188\u00c5\u0002\u01e5\u01ed",
    "\u0005\u017a\u00be\u0002\u01e6\u01ed\u0005\u018a\u00c6\u0002\u01e7\u01e8",
    "\u0007^\u0002\u0002\u01e8\u01ed\u0005\u014e\u00a8\u0002\u01e9\u01ea",
    "\u0007^\u0002\u0002\u01ea\u01ed\u0005\u00c8e\u0002\u01eb\u01ed\u0005",
    "\u0196\u00cc\u0002\u01ec\u01e3\u0003\u0002\u0002\u0002\u01ec\u01e4\u0003",
    "\u0002\u0002\u0002\u01ec\u01e5\u0003\u0002\u0002\u0002\u01ec\u01e6\u0003",
    "\u0002\u0002\u0002\u01ec\u01e7\u0003\u0002\u0002\u0002\u01ec\u01e9\u0003",
    "\u0002\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ed\u000b\u0003",
    "\u0002\u0002\u0002\u01ee\u01f0\u0005\u000e\b\u0002\u01ef\u01f1\u0007",
    "?\u0002\u0002\u01f0\u01ef\u0003\u0002\u0002\u0002\u01f0\u01f1\u0003",
    "\u0002\u0002\u0002\u01f1\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f3\u0005",
    "\n\u0006\u0002\u01f3\r\u0003\u0002\u0002\u0002\u01f4\u01f5\b\b\u0001",
    "\u0002\u01f5\u0200\u0007z\u0002\u0002\u01f6\u01f7\u0005\u00c6d\u0002",
    "\u01f7\u01f8\u0007z\u0002\u0002\u01f8\u0200\u0003\u0002\u0002\u0002",
    "\u01f9\u01fa\u0005\u00dep\u0002\u01fa\u01fb\u0007z\u0002\u0002\u01fb",
    "\u0200\u0003\u0002\u0002\u0002\u01fc\u01fd\u0005\u00c8e\u0002\u01fd",
    "\u01fe\u0007z\u0002\u0002\u01fe\u0200\u0003\u0002\u0002\u0002\u01ff",
    "\u01f4\u0003\u0002\u0002\u0002\u01ff\u01f6\u0003\u0002\u0002\u0002\u01ff",
    "\u01f9\u0003\u0002\u0002\u0002\u01ff\u01fc\u0003\u0002\u0002\u0002\u0200",
    "\u020d\u0003\u0002\u0002\u0002\u0201\u0202\f\u0004\u0002\u0002\u0202",
    "\u0203\u0007\u007f\u0002\u0002\u0203\u020c\u0007z\u0002\u0002\u0204",
    "\u0206\f\u0003\u0002\u0002\u0205\u0207\u0007?\u0002\u0002\u0206\u0205",
    "\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207\u0208",
    "\u0003\u0002\u0002\u0002\u0208\u0209\u0005\u0194\u00cb\u0002\u0209\u020a",
    "\u0007z\u0002\u0002\u020a\u020c\u0003\u0002\u0002\u0002\u020b\u0201",
    "\u0003\u0002\u0002\u0002\u020b\u0204\u0003\u0002\u0002\u0002\u020c\u020f",
    "\u0003\u0002\u0002\u0002\u020d\u020b\u0003\u0002\u0002\u0002\u020d\u020e",
    "\u0003\u0002\u0002\u0002\u020e\u000f\u0003\u0002\u0002\u0002\u020f\u020d",
    "\u0003\u0002\u0002\u0002\u0210\u0212\u0005\u0012\n\u0002\u0211\u0213",
    "\u0005 \u0011\u0002\u0212\u0211\u0003\u0002\u0002\u0002\u0212\u0213",
    "\u0003\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0215",
    "\u0005j6\u0002\u0215\u0011\u0003\u0002\u0002\u0002\u0216\u0218\u0007",
    "R\u0002\u0002\u0217\u0219\u0005\u0014\u000b\u0002\u0218\u0217\u0003",
    "\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021a\u0003",
    "\u0002\u0002\u0002\u021a\u021b\u0007S\u0002\u0002\u021b\u0013\u0003",
    "\u0002\u0002\u0002\u021c\u0223\u0005\u0016\f\u0002\u021d\u0223\u0005",
    "\u0018\r\u0002\u021e\u021f\u0005\u0016\f\u0002\u021f\u0220\u0007u\u0002",
    "\u0002\u0220\u0221\u0005\u0018\r\u0002\u0221\u0223\u0003\u0002\u0002",
    "\u0002\u0222\u021c\u0003\u0002\u0002\u0002\u0222\u021d\u0003\u0002\u0002",
    "\u0002\u0222\u021e\u0003\u0002\u0002\u0002\u0223\u0015\u0003\u0002\u0002",
    "\u0002\u0224\u0225\t\u0002\u0002\u0002\u0225\u0017\u0003\u0002\u0002",
    "\u0002\u0226\u0227\b\r\u0001\u0002\u0227\u0229\u0005\u001a\u000e\u0002",
    "\u0228\u022a\u0007~\u0002\u0002\u0229\u0228\u0003\u0002\u0002\u0002",
    "\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u0233\u0003\u0002\u0002\u0002",
    "\u022b\u022c\f\u0003\u0002\u0002\u022c\u022d\u0007u\u0002\u0002\u022d",
    "\u022f\u0005\u001a\u000e\u0002\u022e\u0230\u0007~\u0002\u0002\u022f",
    "\u022e\u0003\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230",
    "\u0232\u0003\u0002\u0002\u0002\u0231\u022b\u0003\u0002\u0002\u0002\u0232",
    "\u0235\u0003\u0002\u0002\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0233",
    "\u0234\u0003\u0002\u0002\u0002\u0234\u0019\u0003\u0002\u0002\u0002\u0235",
    "\u0233\u0003\u0002\u0002\u0002\u0236\u0239\u0005\u001c\u000f\u0002\u0237",
    "\u0239\u0005\u001e\u0010\u0002\u0238\u0236\u0003\u0002\u0002\u0002\u0238",
    "\u0237\u0003\u0002\u0002\u0002\u0239\u001b\u0003\u0002\u0002\u0002\u023a",
    "\u023f\u0007\u007f\u0002\u0002\u023b\u023c\u0007\\\u0002\u0002\u023c",
    "\u023f\u0007\u007f\u0002\u0002\u023d\u023f\u0007@\u0002\u0002\u023e",
    "\u023a\u0003\u0002\u0002\u0002\u023e\u023b\u0003\u0002\u0002\u0002\u023e",
    "\u023d\u0003\u0002\u0002\u0002\u023f\u001d\u0003\u0002\u0002\u0002\u0240",
    "\u0241\u0007\u007f\u0002\u0002\u0241\u0246\u0005\u0144\u00a3\u0002\u0242",
    "\u0243\u0007\\\u0002\u0002\u0243\u0244\u0007\u007f\u0002\u0002\u0244",
    "\u0246\u0005\u0144\u00a3\u0002\u0245\u0240\u0003\u0002\u0002\u0002\u0245",
    "\u0242\u0003\u0002\u0002\u0002\u0246\u001f\u0003\u0002\u0002\u0002\u0247",
    "\u0248\u0007P\u0002\u0002\u0248\u0249\u0005\u0136\u009c\u0002\u0249",
    "\u024b\u0007Q\u0002\u0002\u024a\u024c\u0007*\u0002\u0002\u024b\u024a",
    "\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u024e",
    "\u0003\u0002\u0002\u0002\u024d\u024f\u0005\u01b0\u00d9\u0002\u024e\u024d",
    "\u0003\u0002\u0002\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0251",
    "\u0003\u0002\u0002\u0002\u0250\u0252\u0005\u00fc\u007f\u0002\u0251\u0250",
    "\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252\u0254",
    "\u0003\u0002\u0002\u0002\u0253\u0255\u0005\u011e\u0090\u0002\u0254\u0253",
    "\u0003\u0002\u0002\u0002\u0254\u0255\u0003\u0002\u0002\u0002\u0255!",
    "\u0003\u0002\u0002\u0002\u0256\u0257\u0005\u0006\u0004\u0002\u0257#",
    "\u0003\u0002\u0002\u0002\u0258\u0259\b\u0013\u0001\u0002\u0259\u0299",
    "\u0005\u0004\u0003\u0002\u025a\u025b\u0005\u00c4c\u0002\u025b\u025d",
    "\u0007P\u0002\u0002\u025c\u025e\u0005&\u0014\u0002\u025d\u025c\u0003",
    "\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002\u025e\u025f\u0003",
    "\u0002\u0002\u0002\u025f\u0260\u0007Q\u0002\u0002\u0260\u0299\u0003",
    "\u0002\u0002\u0002\u0261\u0262\u0005\u019e\u00d0\u0002\u0262\u0264\u0007",
    "P\u0002\u0002\u0263\u0265\u0005&\u0014\u0002\u0264\u0263\u0003\u0002",
    "\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002",
    "\u0002\u0002\u0266\u0267\u0007Q\u0002\u0002\u0267\u0299\u0003\u0002",
    "\u0002\u0002\u0268\u0269\u0005\u00c4c\u0002\u0269\u026a\u0005\u014c",
    "\u00a7\u0002\u026a\u0299\u0003\u0002\u0002\u0002\u026b\u026c\u0005\u019e",
    "\u00d0\u0002\u026c\u026d\u0005\u014c\u00a7\u0002\u026d\u0299\u0003\u0002",
    "\u0002\u0002\u026e\u026f\u0007\u001a\u0002\u0002\u026f\u0270\u0007a",
    "\u0002\u0002\u0270\u0271\u0005\u012a\u0096\u0002\u0271\u0272\u0007b",
    "\u0002\u0002\u0272\u0273\u0007P\u0002\u0002\u0273\u0274\u0005`1\u0002",
    "\u0274\u0275\u0007Q\u0002\u0002\u0275\u0299\u0003\u0002\u0002\u0002",
    "\u0276\u0277\u0007<\u0002\u0002\u0277\u0278\u0007a\u0002\u0002\u0278",
    "\u0279\u0005\u012a\u0096\u0002\u0279\u027a\u0007b\u0002\u0002\u027a",
    "\u027b\u0007P\u0002\u0002\u027b\u027c\u0005`1\u0002\u027c\u027d\u0007",
    "Q\u0002\u0002\u027d\u0299\u0003\u0002\u0002\u0002\u027e\u027f\u0007",
    "5\u0002\u0002\u027f\u0280\u0007a\u0002\u0002\u0280\u0281\u0005\u012a",
    "\u0096\u0002\u0281\u0282\u0007b\u0002\u0002\u0282\u0283\u0007P\u0002",
    "\u0002\u0283\u0284\u0005`1\u0002\u0284\u0285\u0007Q\u0002\u0002\u0285",
    "\u0299\u0003\u0002\u0002\u0002\u0286\u0287\u0007\u0012\u0002\u0002\u0287",
    "\u0288\u0007a\u0002\u0002\u0288\u0289\u0005\u012a\u0096\u0002\u0289",
    "\u028a\u0007b\u0002\u0002\u028a\u028b\u0007P\u0002\u0002\u028b\u028c",
    "\u0005`1\u0002\u028c\u028d\u0007Q\u0002\u0002\u028d\u0299\u0003\u0002",
    "\u0002\u0002\u028e\u028f\u0007F\u0002\u0002\u028f\u0290\u0007P\u0002",
    "\u0002\u0290\u0291\u0005`1\u0002\u0291\u0292\u0007Q\u0002\u0002\u0292",
    "\u0299\u0003\u0002\u0002\u0002\u0293\u0294\u0007F\u0002\u0002\u0294",
    "\u0295\u0007P\u0002\u0002\u0295\u0296\u0005\u012a\u0096\u0002\u0296",
    "\u0297\u0007Q\u0002\u0002\u0297\u0299\u0003\u0002\u0002\u0002\u0298",
    "\u0258\u0003\u0002\u0002\u0002\u0298\u025a\u0003\u0002\u0002\u0002\u0298",
    "\u0261\u0003\u0002\u0002\u0002\u0298\u0268\u0003\u0002\u0002\u0002\u0298",
    "\u026b\u0003\u0002\u0002\u0002\u0298\u026e\u0003\u0002\u0002\u0002\u0298",
    "\u0276\u0003\u0002\u0002\u0002\u0298\u027e\u0003\u0002\u0002\u0002\u0298",
    "\u0286\u0003\u0002\u0002\u0002\u0298\u028e\u0003\u0002\u0002\u0002\u0298",
    "\u0293\u0003\u0002\u0002\u0002\u0299\u02c2\u0003\u0002\u0002\u0002\u029a",
    "\u029b\f\u0015\u0002\u0002\u029b\u029c\u0007R\u0002\u0002\u029c\u029d",
    "\u0005\\/\u0002\u029d\u029e\u0007S\u0002\u0002\u029e\u02c1\u0003\u0002",
    "\u0002\u0002\u029f\u02a0\f\u0014\u0002\u0002\u02a0\u02a1\u0007R\u0002",
    "\u0002\u02a1\u02a2\u0005\u014c\u00a7\u0002\u02a2\u02a3\u0007S\u0002",
    "\u0002\u02a3\u02c1\u0003\u0002\u0002\u0002\u02a4\u02a5\f\u0013\u0002",
    "\u0002\u02a5\u02a7\u0007P\u0002\u0002\u02a6\u02a8\u0005&\u0014\u0002",
    "\u02a7\u02a6\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002\u0002",
    "\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u02c1\u0007Q\u0002\u0002",
    "\u02aa\u02ab\f\u000e\u0002\u0002\u02ab\u02ad\u0007|\u0002\u0002\u02ac",
    "\u02ae\u0007?\u0002\u0002\u02ad\u02ac\u0003\u0002\u0002\u0002\u02ad",
    "\u02ae\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02af",
    "\u02c1\u0005\"\u0012\u0002\u02b0\u02b1\f\r\u0002\u0002\u02b1\u02b3\u0007",
    "w\u0002\u0002\u02b2\u02b4\u0007?\u0002\u0002\u02b3\u02b2\u0003\u0002",
    "\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4\u02b5\u0003\u0002",
    "\u0002\u0002\u02b5\u02c1\u0005\"\u0012\u0002\u02b6\u02b7\f\f\u0002\u0002",
    "\u02b7\u02b8\u0007|\u0002\u0002\u02b8\u02c1\u0005(\u0015\u0002\u02b9",
    "\u02ba\f\u000b\u0002\u0002\u02ba\u02bb\u0007w\u0002\u0002\u02bb\u02c1",
    "\u0005(\u0015\u0002\u02bc\u02bd\f\n\u0002\u0002\u02bd\u02c1\u0007s\u0002",
    "\u0002\u02be\u02bf\f\t\u0002\u0002\u02bf\u02c1\u0007t\u0002\u0002\u02c0",
    "\u029a\u0003\u0002\u0002\u0002\u02c0\u029f\u0003\u0002\u0002\u0002\u02c0",
    "\u02a4\u0003\u0002\u0002\u0002\u02c0\u02aa\u0003\u0002\u0002\u0002\u02c0",
    "\u02b0\u0003\u0002\u0002\u0002\u02c0\u02b6\u0003\u0002\u0002\u0002\u02c0",
    "\u02b9\u0003\u0002\u0002\u0002\u02c0\u02bc\u0003\u0002\u0002\u0002\u02c0",
    "\u02be\u0003\u0002\u0002\u0002\u02c1\u02c4\u0003\u0002\u0002\u0002\u02c2",
    "\u02c0\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002\u0002\u0002\u02c3",
    "%\u0003\u0002\u0002\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002\u02c5",
    "\u02c6\u0005\u014a\u00a6\u0002\u02c6\'\u0003\u0002\u0002\u0002\u02c7",
    "\u02c9\u0005\u000e\b\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002\u02c8",
    "\u02c9\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca",
    "\u02cb\u0005\u00c6d\u0002\u02cb\u02cc\u0007z\u0002\u0002\u02cc\u02cd",
    "\u0007^\u0002\u0002\u02cd\u02ce\u0005\u00c6d\u0002\u02ce\u02de\u0003",
    "\u0002\u0002\u0002\u02cf\u02d0\u0005\u000e\b\u0002\u02d0\u02d1\u0007",
    "?\u0002\u0002\u02d1\u02d2\u0005\u0194\u00cb\u0002\u02d2\u02d3\u0007",
    "z\u0002\u0002\u02d3\u02d4\u0007^\u0002\u0002\u02d4\u02d5\u0005\u00c6",
    "d\u0002\u02d5\u02de\u0003\u0002\u0002\u0002\u02d6\u02d8\u0005\u000e",
    "\b\u0002\u02d7\u02d6\u0003\u0002\u0002\u0002\u02d7\u02d8\u0003\u0002",
    "\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9\u02da\u0007^",
    "\u0002\u0002\u02da\u02de\u0005\u00c6d\u0002\u02db\u02dc\u0007^\u0002",
    "\u0002\u02dc\u02de\u0005\u00c8e\u0002\u02dd\u02c8\u0003\u0002\u0002",
    "\u0002\u02dd\u02cf\u0003\u0002\u0002\u0002\u02dd\u02d7\u0003\u0002\u0002",
    "\u0002\u02dd\u02db\u0003\u0002\u0002\u0002\u02de)\u0003\u0002\u0002",
    "\u0002\u02df\u02e4\u0005$\u0013\u0002\u02e0\u02e4\u0005,\u0017\u0002",
    "\u02e1\u02e4\u00052\u001a\u0002\u02e2\u02e4\u0005> \u0002\u02e3\u02df",
    "\u0003\u0002\u0002\u0002\u02e3\u02e0\u0003\u0002\u0002\u0002\u02e3\u02e1",
    "\u0003\u0002\u0002\u0002\u02e3\u02e2\u0003\u0002\u0002\u0002\u02e4+",
    "\u0003\u0002\u0002\u0002\u02e5\u02e6\u0007s\u0002\u0002\u02e6\u0304",
    "\u0005B\"\u0002\u02e7\u02e8\u0007t\u0002\u0002\u02e8\u0304\u0005B\"",
    "\u0002\u02e9\u02ea\u00050\u0019\u0002\u02ea\u02eb\u0005B\"\u0002\u02eb",
    "\u0304\u0003\u0002\u0002\u0002\u02ec\u02ed\u00079\u0002\u0002\u02ed",
    "\u0304\u0005*\u0016\u0002\u02ee\u02ef\u00079\u0002\u0002\u02ef\u02f0",
    "\u0007P\u0002\u0002\u02f0\u02f1\u0005.\u0018\u0002\u02f1\u02f2\u0007",
    "Q\u0002\u0002\u02f2\u0304\u0003\u0002\u0002\u0002\u02f3\u02f4\u0007",
    "9\u0002\u0002\u02f4\u02f5\u0007P\u0002\u0002\u02f5\u02f6\u0005\u012a",
    "\u0096\u0002\u02f6\u02f7\u0007Q\u0002\u0002\u02f7\u0304\u0003\u0002",
    "\u0002\u0002\u02f8\u02f9\u00079\u0002\u0002\u02f9\u02fa\u0007~\u0002",
    "\u0002\u02fa\u02fb\u0007P\u0002\u0002\u02fb\u02fc\u0007\u007f\u0002",
    "\u0002\u02fc\u0304\u0007Q\u0002\u0002\u02fd\u02fe\u0007\u0005\u0002",
    "\u0002\u02fe\u02ff\u0007P\u0002\u0002\u02ff\u0300\u0005\u012a\u0096",
    "\u0002\u0300\u0301\u0007Q\u0002\u0002\u0301\u0304\u0003\u0002\u0002",
    "\u0002\u0302\u0304\u0005@!\u0002\u0303\u02e5\u0003\u0002\u0002\u0002",
    "\u0303\u02e7\u0003\u0002\u0002\u0002\u0303\u02e9\u0003\u0002\u0002\u0002",
    "\u0303\u02ec\u0003\u0002\u0002\u0002\u0303\u02ee\u0003\u0002\u0002\u0002",
    "\u0303\u02f3\u0003\u0002\u0002\u0002\u0303\u02f8\u0003\u0002\u0002\u0002",
    "\u0303\u02fd\u0003\u0002\u0002\u0002\u0303\u0302\u0003\u0002\u0002\u0002",
    "\u0304-\u0003\u0002\u0002\u0002\u0305\u0306\u0005\u012a\u0096\u0002",
    "\u0306/\u0003\u0002\u0002\u0002\u0307\u0308\t\u0003\u0002\u0002\u0308",
    "1\u0003\u0002\u0002\u0002\u0309\u030b\u0007z\u0002\u0002\u030a\u0309",
    "\u0003\u0002\u0002\u0002\u030a\u030b\u0003\u0002\u0002\u0002\u030b\u030c",
    "\u0003\u0002\u0002\u0002\u030c\u030e\u0007,\u0002\u0002\u030d\u030f",
    "\u00054\u001b\u0002\u030e\u030d\u0003\u0002\u0002\u0002\u030e\u030f",
    "\u0003\u0002\u0002\u0002\u030f\u0310\u0003\u0002\u0002\u0002\u0310\u0312",
    "\u00056\u001c\u0002\u0311\u0313\u0005<\u001f\u0002\u0312\u0311\u0003",
    "\u0002\u0002\u0002\u0312\u0313\u0003\u0002\u0002\u0002\u0313\u0322\u0003",
    "\u0002\u0002\u0002\u0314\u0316\u0007z\u0002\u0002\u0315\u0314\u0003",
    "\u0002\u0002\u0002\u0315\u0316\u0003\u0002\u0002\u0002\u0316\u0317\u0003",
    "\u0002\u0002\u0002\u0317\u0319\u0007,\u0002\u0002\u0318\u031a\u0005",
    "4\u001b\u0002\u0319\u0318\u0003\u0002\u0002\u0002\u0319\u031a\u0003",
    "\u0002\u0002\u0002\u031a\u031b\u0003\u0002\u0002\u0002\u031b\u031c\u0007",
    "P\u0002\u0002\u031c\u031d\u0005\u012a\u0096\u0002\u031d\u031f\u0007",
    "Q\u0002\u0002\u031e\u0320\u0005<\u001f\u0002\u031f\u031e\u0003\u0002",
    "\u0002\u0002\u031f\u0320\u0003\u0002\u0002\u0002\u0320\u0322\u0003\u0002",
    "\u0002\u0002\u0321\u030a\u0003\u0002\u0002\u0002\u0321\u0315\u0003\u0002",
    "\u0002\u0002\u03223\u0003\u0002\u0002\u0002\u0323\u0324\u0007P\u0002",
    "\u0002\u0324\u0325\u0005&\u0014\u0002\u0325\u0326\u0007Q\u0002\u0002",
    "\u03265\u0003\u0002\u0002\u0002\u0327\u0329\u0005\u00c0a\u0002\u0328",
    "\u032a\u00058\u001d\u0002\u0329\u0328\u0003\u0002\u0002\u0002\u0329",
    "\u032a\u0003\u0002\u0002\u0002\u032a7\u0003\u0002\u0002\u0002\u032b",
    "\u032d\u0005\u0120\u0091\u0002\u032c\u032e\u00058\u001d\u0002\u032d",
    "\u032c\u0003\u0002\u0002\u0002\u032d\u032e\u0003\u0002\u0002\u0002\u032e",
    "\u0331\u0003\u0002\u0002\u0002\u032f\u0331\u0005:\u001e\u0002\u0330",
    "\u032b\u0003\u0002\u0002\u0002\u0330\u032f\u0003\u0002\u0002\u0002\u0331",
    "9\u0003\u0002\u0002\u0002\u0332\u0333\b\u001e\u0001\u0002\u0333\u0334",
    "\u0007R\u0002\u0002\u0334\u0335\u0005`1\u0002\u0335\u0337\u0007S\u0002",
    "\u0002\u0336\u0338\u0005\u00fc\u007f\u0002\u0337\u0336\u0003\u0002\u0002",
    "\u0002\u0337\u0338\u0003\u0002\u0002\u0002\u0338\u0342\u0003\u0002\u0002",
    "\u0002\u0339\u033a\f\u0003\u0002\u0002\u033a\u033b\u0007R\u0002\u0002",
    "\u033b\u033c\u0005b2\u0002\u033c\u033e\u0007S\u0002\u0002\u033d\u033f",
    "\u0005\u00fc\u007f\u0002\u033e\u033d\u0003\u0002\u0002\u0002\u033e\u033f",
    "\u0003\u0002\u0002\u0002\u033f\u0341\u0003\u0002\u0002\u0002\u0340\u0339",
    "\u0003\u0002\u0002\u0002\u0341\u0344\u0003\u0002\u0002\u0002\u0342\u0340",
    "\u0003\u0002\u0002\u0002\u0342\u0343\u0003\u0002\u0002\u0002\u0343;",
    "\u0003\u0002\u0002\u0002\u0344\u0342\u0003\u0002\u0002\u0002\u0345\u0347",
    "\u0007P\u0002\u0002\u0346\u0348\u0005&\u0014\u0002\u0347\u0346\u0003",
    "\u0002\u0002\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0349\u0003",
    "\u0002\u0002\u0002\u0349\u034c\u0007Q\u0002\u0002\u034a\u034c\u0005",
    "\u014c\u00a7\u0002\u034b\u0345\u0003\u0002\u0002\u0002\u034b\u034a\u0003",
    "\u0002\u0002\u0002\u034c=\u0003\u0002\u0002\u0002\u034d\u034f\u0007",
    "z\u0002\u0002\u034e\u034d\u0003\u0002\u0002\u0002\u034e\u034f\u0003",
    "\u0002\u0002\u0002\u034f\u0350\u0003\u0002\u0002\u0002\u0350\u0351\u0007",
    "\u0016\u0002\u0002\u0351\u035a\u0005B\"\u0002\u0352\u0354\u0007z\u0002",
    "\u0002\u0353\u0352\u0003\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002",
    "\u0002\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u0356\u0007\u0016\u0002",
    "\u0002\u0356\u0357\u0007R\u0002\u0002\u0357\u0358\u0007S\u0002\u0002",
    "\u0358\u035a\u0005B\"\u0002\u0359\u034e\u0003\u0002\u0002\u0002\u0359",
    "\u0353\u0003\u0002\u0002\u0002\u035a?\u0003\u0002\u0002\u0002\u035b",
    "\u035c\u0007-\u0002\u0002\u035c\u035d\u0007P\u0002\u0002\u035d\u035e",
    "\u0005`1\u0002\u035e\u035f\u0007Q\u0002\u0002\u035fA\u0003\u0002\u0002",
    "\u0002\u0360\u0367\u0005*\u0016\u0002\u0361\u0362\u0007P\u0002\u0002",
    "\u0362\u0363\u0005\u012a\u0096\u0002\u0363\u0364\u0007Q\u0002\u0002",
    "\u0364\u0365\u0005B\"\u0002\u0365\u0367\u0003\u0002\u0002\u0002\u0366",
    "\u0360\u0003\u0002\u0002\u0002\u0366\u0361\u0003\u0002\u0002\u0002\u0367",
    "C\u0003\u0002\u0002\u0002\u0368\u0369\b#\u0001\u0002\u0369\u036a\u0005",
    "B\"\u0002\u036a\u0373\u0003\u0002\u0002\u0002\u036b\u036c\f\u0004\u0002",
    "\u0002\u036c\u036d\u0007}\u0002\u0002\u036d\u0372\u0005B\"\u0002\u036e",
    "\u036f\f\u0003\u0002\u0002\u036f\u0370\u0007v\u0002\u0002\u0370\u0372",
    "\u0005B\"\u0002\u0371\u036b\u0003\u0002\u0002\u0002\u0371\u036e\u0003",
    "\u0002\u0002\u0002\u0372\u0375\u0003\u0002\u0002\u0002\u0373\u0371\u0003",
    "\u0002\u0002\u0002\u0373\u0374\u0003\u0002\u0002\u0002\u0374E\u0003",
    "\u0002\u0002\u0002\u0375\u0373\u0003\u0002\u0002\u0002\u0376\u0377\b",
    "$\u0001\u0002\u0377\u0378\u0005D#\u0002\u0378\u0384\u0003\u0002\u0002",
    "\u0002\u0379\u037a\f\u0005\u0002\u0002\u037a\u037b\u0007X\u0002\u0002",
    "\u037b\u0383\u0005D#\u0002\u037c\u037d\f\u0004\u0002\u0002\u037d\u037e",
    "\u0007Y\u0002\u0002\u037e\u0383\u0005D#\u0002\u037f\u0380\f\u0003\u0002",
    "\u0002\u0380\u0381\u0007Z\u0002\u0002\u0381\u0383\u0005D#\u0002\u0382",
    "\u0379\u0003\u0002\u0002\u0002\u0382\u037c\u0003\u0002\u0002\u0002\u0382",
    "\u037f\u0003\u0002\u0002\u0002\u0383\u0386\u0003\u0002\u0002\u0002\u0384",
    "\u0382\u0003\u0002\u0002\u0002\u0384\u0385\u0003\u0002\u0002\u0002\u0385",
    "G\u0003\u0002\u0002\u0002\u0386\u0384\u0003\u0002\u0002\u0002\u0387",
    "\u0388\b%\u0001\u0002\u0388\u0389\u0005F$\u0002\u0389\u0392\u0003\u0002",
    "\u0002\u0002\u038a\u038b\f\u0004\u0002\u0002\u038b\u038c\u0007V\u0002",
    "\u0002\u038c\u0391\u0005F$\u0002\u038d\u038e\f\u0003\u0002\u0002\u038e",
    "\u038f\u0007W\u0002\u0002\u038f\u0391\u0005F$\u0002\u0390\u038a\u0003",
    "\u0002\u0002\u0002\u0390\u038d\u0003\u0002\u0002\u0002\u0391\u0394\u0003",
    "\u0002\u0002\u0002\u0392\u0390\u0003\u0002\u0002\u0002\u0392\u0393\u0003",
    "\u0002\u0002\u0002\u0393I\u0003\u0002\u0002\u0002\u0394\u0392\u0003",
    "\u0002\u0002\u0002\u0395\u0396\b&\u0001\u0002\u0396\u0397\u0005H%\u0002",
    "\u0397\u03a1\u0003\u0002\u0002\u0002\u0398\u0399\f\u0004\u0002\u0002",
    "\u0399\u039a\u0007k\u0002\u0002\u039a\u03a0\u0005H%\u0002\u039b\u039c",
    "\f\u0003\u0002\u0002\u039c\u039d\u0005\u01b8\u00dd\u0002\u039d\u039e",
    "\u0005H%\u0002\u039e\u03a0\u0003\u0002\u0002\u0002\u039f\u0398\u0003",
    "\u0002\u0002\u0002\u039f\u039b\u0003\u0002\u0002\u0002\u03a0\u03a3\u0003",
    "\u0002\u0002\u0002\u03a1\u039f\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003",
    "\u0002\u0002\u0002\u03a2K\u0003\u0002\u0002\u0002\u03a3\u03a1\u0003",
    "\u0002\u0002\u0002\u03a4\u03a5\b\'\u0001\u0002\u03a5\u03a6\u0005J&\u0002",
    "\u03a6\u03b5\u0003\u0002\u0002\u0002\u03a7\u03a8\f\u0006\u0002\u0002",
    "\u03a8\u03a9\u0007a\u0002\u0002\u03a9\u03b4\u0005J&\u0002\u03aa\u03ab",
    "\f\u0005\u0002\u0002\u03ab\u03ac\u0007b\u0002\u0002\u03ac\u03b4\u0005",
    "J&\u0002\u03ad\u03ae\f\u0004\u0002\u0002\u03ae\u03af\u0007o\u0002\u0002",
    "\u03af\u03b4\u0005J&\u0002\u03b0\u03b1\f\u0003\u0002\u0002\u03b1\u03b2",
    "\u0007p\u0002\u0002\u03b2\u03b4\u0005J&\u0002\u03b3\u03a7\u0003\u0002",
    "\u0002\u0002\u03b3\u03aa\u0003\u0002\u0002\u0002\u03b3\u03ad\u0003\u0002",
    "\u0002\u0002\u03b3\u03b0\u0003\u0002\u0002\u0002\u03b4\u03b7\u0003\u0002",
    "\u0002\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003\u0002",
    "\u0002\u0002\u03b6M\u0003\u0002\u0002\u0002\u03b7\u03b5\u0003\u0002",
    "\u0002\u0002\u03b8\u03b9\b(\u0001\u0002\u03b9\u03ba\u0005L\'\u0002\u03ba",
    "\u03c3\u0003\u0002\u0002\u0002\u03bb\u03bc\f\u0004\u0002\u0002\u03bc",
    "\u03bd\u0007m\u0002\u0002\u03bd\u03c2\u0005L\'\u0002\u03be\u03bf\f\u0003",
    "\u0002\u0002\u03bf\u03c0\u0007n\u0002\u0002\u03c0\u03c2\u0005L\'\u0002",
    "\u03c1\u03bb\u0003\u0002\u0002\u0002\u03c1\u03be\u0003\u0002\u0002\u0002",
    "\u03c2\u03c5\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002",
    "\u03c3\u03c4\u0003\u0002\u0002\u0002\u03c4O\u0003\u0002\u0002\u0002",
    "\u03c5\u03c3\u0003\u0002\u0002\u0002\u03c6\u03c7\b)\u0001\u0002\u03c7",
    "\u03c8\u0005N(\u0002\u03c8\u03ce\u0003\u0002\u0002\u0002\u03c9\u03ca",
    "\f\u0003\u0002\u0002\u03ca\u03cb\u0007\\\u0002\u0002\u03cb\u03cd\u0005",
    "N(\u0002\u03cc\u03c9\u0003\u0002\u0002\u0002\u03cd\u03d0\u0003\u0002",
    "\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03ce\u03cf\u0003\u0002",
    "\u0002\u0002\u03cfQ\u0003\u0002\u0002\u0002\u03d0\u03ce\u0003\u0002",
    "\u0002\u0002\u03d1\u03d2\b*\u0001\u0002\u03d2\u03d3\u0005P)\u0002\u03d3",
    "\u03d9\u0003\u0002\u0002\u0002\u03d4\u03d5\f\u0003\u0002\u0002\u03d5",
    "\u03d6\u0007[\u0002\u0002\u03d6\u03d8\u0005P)\u0002\u03d7\u03d4\u0003",
    "\u0002\u0002\u0002\u03d8\u03db\u0003\u0002\u0002\u0002\u03d9\u03d7\u0003",
    "\u0002\u0002\u0002\u03d9\u03da\u0003\u0002\u0002\u0002\u03daS\u0003",
    "\u0002\u0002\u0002\u03db\u03d9\u0003\u0002\u0002\u0002\u03dc\u03dd\b",
    "+\u0001\u0002\u03dd\u03de\u0005R*\u0002\u03de\u03e4\u0003\u0002\u0002",
    "\u0002\u03df\u03e0\f\u0003\u0002\u0002\u03e0\u03e1\u0007]\u0002\u0002",
    "\u03e1\u03e3\u0005R*\u0002\u03e2\u03df\u0003\u0002\u0002\u0002\u03e3",
    "\u03e6\u0003\u0002\u0002\u0002\u03e4\u03e2\u0003\u0002\u0002\u0002\u03e4",
    "\u03e5\u0003\u0002\u0002\u0002\u03e5U\u0003\u0002\u0002\u0002\u03e6",
    "\u03e4\u0003\u0002\u0002\u0002\u03e7\u03e8\b,\u0001\u0002\u03e8\u03e9",
    "\u0005T+\u0002\u03e9\u03ef\u0003\u0002\u0002\u0002\u03ea\u03eb\f\u0003",
    "\u0002\u0002\u03eb\u03ec\u0007q\u0002\u0002\u03ec\u03ee\u0005T+\u0002",
    "\u03ed\u03ea\u0003\u0002\u0002\u0002\u03ee\u03f1\u0003\u0002\u0002\u0002",
    "\u03ef\u03ed\u0003\u0002\u0002\u0002\u03ef\u03f0\u0003\u0002\u0002\u0002",
    "\u03f0W\u0003\u0002\u0002\u0002\u03f1\u03ef\u0003\u0002\u0002\u0002",
    "\u03f2\u03f3\b-\u0001\u0002\u03f3\u03f4\u0005V,\u0002\u03f4\u03fa\u0003",
    "\u0002\u0002\u0002\u03f5\u03f6\f\u0003\u0002\u0002\u03f6\u03f7\u0007",
    "r\u0002\u0002\u03f7\u03f9\u0005V,\u0002\u03f8\u03f5\u0003\u0002\u0002",
    "\u0002\u03f9\u03fc\u0003\u0002\u0002\u0002\u03fa\u03f8\u0003\u0002\u0002",
    "\u0002\u03fa\u03fb\u0003\u0002\u0002\u0002\u03fbY\u0003\u0002\u0002",
    "\u0002\u03fc\u03fa\u0003\u0002\u0002\u0002\u03fd\u0405\u0005X-\u0002",
    "\u03fe\u03ff\u0005X-\u0002\u03ff\u0400\u0007x\u0002\u0002\u0400\u0401",
    "\u0005`1\u0002\u0401\u0402\u0007y\u0002\u0002\u0402\u0403\u0005\\/\u0002",
    "\u0403\u0405\u0003\u0002\u0002\u0002\u0404\u03fd\u0003\u0002\u0002\u0002",
    "\u0404\u03fe\u0003\u0002\u0002\u0002\u0405[\u0003\u0002\u0002\u0002",
    "\u0406\u040d\u0005Z.\u0002\u0407\u0408\u0005X-\u0002\u0408\u0409\u0005",
    "^0\u0002\u0409\u040a\u0005\u0148\u00a5\u0002\u040a\u040d\u0003\u0002",
    "\u0002\u0002\u040b\u040d\u0005\u01ae\u00d8\u0002\u040c\u0406\u0003\u0002",
    "\u0002\u0002\u040c\u0407\u0003\u0002\u0002\u0002\u040c\u040b\u0003\u0002",
    "\u0002\u0002\u040d]\u0003\u0002\u0002\u0002\u040e\u041a\u0007`\u0002",
    "\u0002\u040f\u041a\u0007e\u0002\u0002\u0410\u041a\u0007f\u0002\u0002",
    "\u0411\u041a\u0007g\u0002\u0002\u0412\u041a\u0007c\u0002\u0002\u0413",
    "\u041a\u0007d\u0002\u0002\u0414\u041a\u0005\u01ba\u00de\u0002\u0415",
    "\u041a\u0007l\u0002\u0002\u0416\u041a\u0007i\u0002\u0002\u0417\u041a",
    "\u0007h\u0002\u0002\u0418\u041a\u0007j\u0002\u0002\u0419\u040e\u0003",
    "\u0002\u0002\u0002\u0419\u040f\u0003\u0002\u0002\u0002\u0419\u0410\u0003",
    "\u0002\u0002\u0002\u0419\u0411\u0003\u0002\u0002\u0002\u0419\u0412\u0003",
    "\u0002\u0002\u0002\u0419\u0413\u0003\u0002\u0002\u0002\u0419\u0414\u0003",
    "\u0002\u0002\u0002\u0419\u0415\u0003\u0002\u0002\u0002\u0419\u0416\u0003",
    "\u0002\u0002\u0002\u0419\u0417\u0003\u0002\u0002\u0002\u0419\u0418\u0003",
    "\u0002\u0002\u0002\u041a_\u0003\u0002\u0002\u0002\u041b\u041c\b1\u0001",
    "\u0002\u041c\u041d\u0005\\/\u0002\u041d\u0423\u0003\u0002\u0002\u0002",
    "\u041e\u041f\f\u0003\u0002\u0002\u041f\u0420\u0007u\u0002\u0002\u0420",
    "\u0422\u0005\\/\u0002\u0421\u041e\u0003\u0002\u0002\u0002\u0422\u0425",
    "\u0003\u0002\u0002\u0002\u0423\u0421\u0003\u0002\u0002\u0002\u0423\u0424",
    "\u0003\u0002\u0002\u0002\u0424a\u0003\u0002\u0002\u0002\u0425\u0423",
    "\u0003\u0002\u0002\u0002\u0426\u0427\u0005Z.\u0002\u0427c\u0003\u0002",
    "\u0002\u0002\u0428\u045c\u0005f4\u0002\u0429\u042b\u0005\u00fc\u007f",
    "\u0002\u042a\u0429\u0003\u0002\u0002\u0002\u042a\u042b\u0003\u0002\u0002",
    "\u0002\u042b\u042c\u0003\u0002\u0002\u0002\u042c\u045c\u0005h5\u0002",
    "\u042d\u042f\u0005\u00fc\u007f\u0002\u042e\u042d\u0003\u0002\u0002\u0002",
    "\u042e\u042f\u0003\u0002\u0002\u0002\u042f\u0430\u0003\u0002\u0002\u0002",
    "\u0430\u045c\u0005j6\u0002\u0431\u0433\u0005\u00fc\u007f\u0002\u0432",
    "\u0431\u0003\u0002\u0002\u0002\u0432\u0433\u0003\u0002\u0002\u0002\u0433",
    "\u0434\u0003\u0002\u0002\u0002\u0434\u045c\u0005n8\u0002\u0435\u0437",
    "\u0005\u00fc\u007f\u0002\u0436\u0435\u0003\u0002\u0002\u0002\u0436\u0437",
    "\u0003\u0002\u0002\u0002\u0437\u0438\u0003\u0002\u0002\u0002\u0438\u045c",
    "\u0005p9\u0002\u0439\u043b\u0005\u00fc\u007f\u0002\u043a\u0439\u0003",
    "\u0002\u0002\u0002\u043a\u043b\u0003\u0002\u0002\u0002\u043b\u043c\u0003",
    "\u0002\u0002\u0002\u043c\u045c\u0005x=\u0002\u043d\u043f\u0005\u00fc",
    "\u007f\u0002\u043e\u043d\u0003\u0002\u0002\u0002\u043e\u043f\u0003\u0002",
    "\u0002\u0002\u043f\u0440\u0003\u0002\u0002\u0002\u0440\u045c\u0005t",
    ";\u0002\u0441\u0443\u0005\u00fc\u007f\u0002\u0442\u0441\u0003\u0002",
    "\u0002\u0002\u0442\u0443\u0003\u0002\u0002\u0002\u0443\u0444\u0003\u0002",
    "\u0002\u0002\u0444\u045c\u0005v<\u0002\u0445\u0447\u0005\u00fc\u007f",
    "\u0002\u0446\u0445\u0003\u0002\u0002\u0002\u0446\u0447\u0003\u0002\u0002",
    "\u0002\u0447\u0448\u0003\u0002\u0002\u0002\u0448\u045c\u0005\u0082B",
    "\u0002\u0449\u044b\u0005\u00fc\u007f\u0002\u044a\u0449\u0003\u0002\u0002",
    "\u0002\u044a\u044b\u0003\u0002\u0002\u0002\u044b\u044c\u0003\u0002\u0002",
    "\u0002\u044c\u045c\u0005\u0084C\u0002\u044d\u044f\u0005\u00fc\u007f",
    "\u0002\u044e\u044d\u0003\u0002\u0002\u0002\u044e\u044f\u0003\u0002\u0002",
    "\u0002\u044f\u0450\u0003\u0002\u0002\u0002\u0450\u045c\u0005\u0086D",
    "\u0002\u0451\u0453\u0005\u00fc\u007f\u0002\u0452\u0451\u0003\u0002\u0002",
    "\u0002\u0452\u0453\u0003\u0002\u0002\u0002\u0453\u0454\u0003\u0002\u0002",
    "\u0002\u0454\u045c\u0005\u0088E\u0002\u0455\u045c\u0005\u009cO\u0002",
    "\u0456\u045c\u0005\u008aF\u0002\u0457\u0459\u0005\u00fc\u007f\u0002",
    "\u0458\u0457\u0003\u0002\u0002\u0002\u0458\u0459\u0003\u0002\u0002\u0002",
    "\u0459\u045a\u0003\u0002\u0002\u0002\u045a\u045c\u0005\u01a4\u00d3\u0002",
    "\u045b\u0428\u0003\u0002\u0002\u0002\u045b\u042a\u0003\u0002\u0002\u0002",
    "\u045b\u042e\u0003\u0002\u0002\u0002\u045b\u0432\u0003\u0002\u0002\u0002",
    "\u045b\u0436\u0003\u0002\u0002\u0002\u045b\u043a\u0003\u0002\u0002\u0002",
    "\u045b\u043e\u0003\u0002\u0002\u0002\u045b\u0442\u0003\u0002\u0002\u0002",
    "\u045b\u0446\u0003\u0002\u0002\u0002\u045b\u044a\u0003\u0002\u0002\u0002",
    "\u045b\u044e\u0003\u0002\u0002\u0002\u045b\u0452\u0003\u0002\u0002\u0002",
    "\u045b\u0455\u0003\u0002\u0002\u0002\u045b\u0456\u0003\u0002\u0002\u0002",
    "\u045b\u0458\u0003\u0002\u0002\u0002\u045ce\u0003\u0002\u0002\u0002",
    "\u045d\u045f\u0005\u00fc\u007f\u0002\u045e\u045d\u0003\u0002\u0002\u0002",
    "\u045e\u045f\u0003\u0002\u0002\u0002\u045f\u0460\u0003\u0002\u0002\u0002",
    "\u0460\u0461\u0007\u007f\u0002\u0002\u0461\u0462\u0007y\u0002\u0002",
    "\u0462\u0472\u0005d3\u0002\u0463\u0465\u0005\u00fc\u007f\u0002\u0464",
    "\u0463\u0003\u0002\u0002\u0002\u0464\u0465\u0003\u0002\u0002\u0002\u0465",
    "\u0466\u0003\u0002\u0002\u0002\u0466\u0467\u0007\n\u0002\u0002\u0467",
    "\u0468\u0005b2\u0002\u0468\u0469\u0007y\u0002\u0002\u0469\u046a\u0005",
    "d3\u0002\u046a\u0472\u0003\u0002\u0002\u0002\u046b\u046d\u0005\u00fc",
    "\u007f\u0002\u046c\u046b\u0003\u0002\u0002\u0002\u046c\u046d\u0003\u0002",
    "\u0002\u0002\u046d\u046e\u0003\u0002\u0002\u0002\u046e\u046f\u0007\u0015",
    "\u0002\u0002\u046f\u0470\u0007y\u0002\u0002\u0470\u0472\u0005d3\u0002",
    "\u0471\u045e\u0003\u0002\u0002\u0002\u0471\u0464\u0003\u0002\u0002\u0002",
    "\u0471\u046c\u0003\u0002\u0002\u0002\u0472g\u0003\u0002\u0002\u0002",
    "\u0473\u0475\u0005`1\u0002\u0474\u0473\u0003\u0002\u0002\u0002\u0474",
    "\u0475\u0003\u0002\u0002\u0002\u0475\u0476\u0003\u0002\u0002\u0002\u0476",
    "\u0477\u0007{\u0002\u0002\u0477i\u0003\u0002\u0002\u0002\u0478\u047a",
    "\u0007T\u0002\u0002\u0479\u047b\u0005l7\u0002\u047a\u0479\u0003\u0002",
    "\u0002\u0002\u047a\u047b\u0003\u0002\u0002\u0002\u047b\u047c\u0003\u0002",
    "\u0002\u0002\u047c\u047d\u0007U\u0002\u0002\u047dk\u0003\u0002\u0002",
    "\u0002\u047e\u0482\u0005d3\u0002\u047f\u0481\u0005d3\u0002\u0480\u047f",
    "\u0003\u0002\u0002\u0002\u0481\u0484\u0003\u0002\u0002\u0002\u0482\u0480",
    "\u0003\u0002\u0002\u0002\u0482\u0483\u0003\u0002\u0002\u0002\u0483m",
    "\u0003\u0002\u0002\u0002\u0484\u0482\u0003\u0002\u0002\u0002\u0485\u0486",
    "\u0007&\u0002\u0002\u0486\u0487\u0007P\u0002\u0002\u0487\u0488\u0005",
    "r:\u0002\u0488\u0489\u0007Q\u0002\u0002\u0489\u048a\u0005d3\u0002\u048a",
    "\u0494\u0003\u0002\u0002\u0002\u048b\u048c\u0007&\u0002\u0002\u048c",
    "\u048d\u0007P\u0002\u0002\u048d\u048e\u0005r:\u0002\u048e\u048f\u0007",
    "Q\u0002\u0002\u048f\u0490\u0005d3\u0002\u0490\u0491\u0007\u001b\u0002",
    "\u0002\u0491\u0492\u0005d3\u0002\u0492\u0494\u0003\u0002\u0002\u0002",
    "\u0493\u0485\u0003\u0002\u0002\u0002\u0493\u048b\u0003\u0002\u0002\u0002",
    "\u0494o\u0003\u0002\u0002\u0002\u0495\u0496\u0007>\u0002\u0002\u0496",
    "\u0497\u0007P\u0002\u0002\u0497\u0498\u0005r:\u0002\u0498\u0499\u0007",
    "Q\u0002\u0002\u0499\u049a\u0005d3\u0002\u049aq\u0003\u0002\u0002\u0002",
    "\u049b\u04ac\u0005`1\u0002\u049c\u049e\u0005\u00fc\u007f\u0002\u049d",
    "\u049c\u0003\u0002\u0002\u0002\u049d\u049e\u0003\u0002\u0002\u0002\u049e",
    "\u049f\u0003\u0002\u0002\u0002\u049f\u04a0\u0005\u00b0Y\u0002\u04a0",
    "\u04a1\u0005\u0116\u008c\u0002\u04a1\u04a2\u0007`\u0002\u0002\u04a2",
    "\u04a3\u0005\u0148\u00a5\u0002\u04a3\u04ac\u0003\u0002\u0002\u0002\u04a4",
    "\u04a6\u0005\u00fc\u007f\u0002\u04a5\u04a4\u0003\u0002\u0002\u0002\u04a5",
    "\u04a6\u0003\u0002\u0002\u0002\u04a6\u04a7\u0003\u0002\u0002\u0002\u04a7",
    "\u04a8\u0005\u00b0Y\u0002\u04a8\u04a9\u0005\u0116\u008c\u0002\u04a9",
    "\u04aa\u0005\u014c\u00a7\u0002\u04aa\u04ac\u0003\u0002\u0002\u0002\u04ab",
    "\u049b\u0003\u0002\u0002\u0002\u04ab\u049d\u0003\u0002\u0002\u0002\u04ab",
    "\u04a5\u0003\u0002\u0002\u0002\u04acs\u0003\u0002\u0002\u0002\u04ad",
    "\u04ae\u0007O\u0002\u0002\u04ae\u04af\u0007P\u0002\u0002\u04af\u04b0",
    "\u0005r:\u0002\u04b0\u04b1\u0007Q\u0002\u0002\u04b1\u04b2\u0005d3\u0002",
    "\u04b2u\u0003\u0002\u0002\u0002\u04b3\u04b4\u0007\u0017\u0002\u0002",
    "\u04b4\u04b5\u0005j6\u0002\u04b5\u04b6\u0007O\u0002\u0002\u04b6\u04b7",
    "\u0007P\u0002\u0002\u04b7\u04b8\u0005`1\u0002\u04b8\u04b9\u0007Q\u0002",
    "\u0002\u04b9\u04ba\u0007{\u0002\u0002\u04baw\u0003\u0002\u0002\u0002",
    "\u04bb\u04bc\u0007#\u0002\u0002\u04bc\u04bd\u0007P\u0002\u0002\u04bd",
    "\u04bf\u0005|?\u0002\u04be\u04c0\u0005r:\u0002\u04bf\u04be\u0003\u0002",
    "\u0002\u0002\u04bf\u04c0\u0003\u0002\u0002\u0002\u04c0\u04c1\u0003\u0002",
    "\u0002\u0002\u04c1\u04c3\u0007{\u0002\u0002\u04c2\u04c4\u0005`1\u0002",
    "\u04c3\u04c2\u0003\u0002\u0002\u0002\u04c3\u04c4\u0003\u0002\u0002\u0002",
    "\u04c4\u04c5\u0003\u0002\u0002\u0002\u04c5\u04c6\u0007Q\u0002\u0002",
    "\u04c6\u04c7\u0005d3\u0002\u04c7y\u0003\u0002\u0002\u0002\u04c8\u04c9",
    "\u0007#\u0002\u0002\u04c9\u04ca\u0007P\u0002\u0002\u04ca\u04cb\u0005",
    "~@\u0002\u04cb\u04cc\u0007y\u0002\u0002\u04cc\u04cd\u0005\u0080A\u0002",
    "\u04cd\u04ce\u0007Q\u0002\u0002\u04ce\u04cf\u0005d3\u0002\u04cf{\u0003",
    "\u0002\u0002\u0002\u04d0\u04d4\u0005h5\u0002\u04d1\u04d4\u0005\u009c",
    "O\u0002\u04d2\u04d4\u0005\u00a6T\u0002\u04d3\u04d0\u0003\u0002\u0002",
    "\u0002\u04d3\u04d1\u0003\u0002\u0002\u0002\u04d3\u04d2\u0003\u0002\u0002",
    "\u0002\u04d4}\u0003\u0002\u0002\u0002\u04d5\u04d7\u0005\u00fc\u007f",
    "\u0002\u04d6\u04d5\u0003\u0002\u0002\u0002\u04d6\u04d7\u0003\u0002\u0002",
    "\u0002\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8\u04d9\u0005\u00b0Y",
    "\u0002\u04d9\u04da\u0005\u0116\u008c\u0002\u04da\u007f\u0003\u0002\u0002",
    "\u0002\u04db\u04de\u0005`1\u0002\u04dc\u04de\u0005\u014c\u00a7\u0002",
    "\u04dd\u04db\u0003\u0002\u0002\u0002\u04dd\u04dc\u0003\u0002\u0002\u0002",
    "\u04de\u0081\u0003\u0002\u0002\u0002\u04df\u04e0\u0007%\u0002\u0002",
    "\u04e0\u04e1\u0007\u007f\u0002\u0002\u04e1\u04e2\u0007{\u0002\u0002",
    "\u04e2\u0083\u0003\u0002\u0002\u0002\u04e3\u04e4\u0007\t\u0002\u0002",
    "\u04e4\u04e5\u0007{\u0002\u0002\u04e5\u0085\u0003\u0002\u0002\u0002",
    "\u04e6\u04e7\u0007\u0013\u0002\u0002\u04e7\u04e8\u0007{\u0002\u0002",
    "\u04e8\u0087\u0003\u0002\u0002\u0002\u04e9\u04eb\u00076\u0002\u0002",
    "\u04ea\u04ec\u0005`1\u0002\u04eb\u04ea\u0003\u0002\u0002\u0002\u04eb",
    "\u04ec\u0003\u0002\u0002\u0002\u04ec\u04ed\u0003\u0002\u0002\u0002\u04ed",
    "\u04f3\u0007{\u0002\u0002\u04ee\u04ef\u00076\u0002\u0002\u04ef\u04f0",
    "\u0005\u014c\u00a7\u0002\u04f0\u04f1\u0007{\u0002\u0002\u04f1\u04f3",
    "\u0003\u0002\u0002\u0002\u04f2\u04e9\u0003\u0002\u0002\u0002\u04f2\u04ee",
    "\u0003\u0002\u0002\u0002\u04f3\u0089\u0003\u0002\u0002\u0002\u04f4\u04f7",
    "\u0005\u00a6T\u0002\u04f5\u04f7\u0005\u0096L\u0002\u04f6\u04f4\u0003",
    "\u0002\u0002\u0002\u04f6\u04f5\u0003\u0002\u0002\u0002\u04f7\u008b\u0003",
    "\u0002\u0002\u0002\u04f8\u04f9\bG\u0001\u0002\u04f9\u04fa\u0005\u0094",
    "K\u0002\u04fa\u04ff\u0003\u0002\u0002\u0002\u04fb\u04fc\f\u0003\u0002",
    "\u0002\u04fc\u04fe\u0005\u0094K\u0002\u04fd\u04fb\u0003\u0002\u0002",
    "\u0002\u04fe\u0501\u0003\u0002\u0002\u0002\u04ff\u04fd\u0003\u0002\u0002",
    "\u0002\u04ff\u0500\u0003\u0002\u0002\u0002\u0500\u008d\u0003\u0002\u0002",
    "\u0002\u0501\u04ff\u0003\u0002\u0002\u0002\u0502\u0504\u0005\u015c\u00af",
    "\u0002\u0503\u0502\u0003\u0002\u0002\u0002\u0503\u0504\u0003\u0002\u0002",
    "\u0002\u0504\u008f\u0003\u0002\u0002\u0002\u0505\u0506\u0005\u0092J",
    "\u0002\u0506\u0507\u0007T\u0002\u0002\u0507\u0508\u0005\u008eH\u0002",
    "\u0508\u0509\u0007U\u0002\u0002\u0509\u050a\u0007{\u0002\u0002\u050a",
    "\u0091\u0003\u0002\u0002\u0002\u050b\u050d\u0005\u015a\u00ae\u0002\u050c",
    "\u050e\u0005\u00fc\u007f\u0002\u050d\u050c\u0003\u0002\u0002\u0002\u050d",
    "\u050e\u0003\u0002\u0002\u0002\u050e\u0510\u0003\u0002\u0002\u0002\u050f",
    "\u0511\u0005\u000e\b\u0002\u0510\u050f\u0003\u0002\u0002\u0002\u0510",
    "\u0511\u0003\u0002\u0002\u0002\u0511\u0512\u0003\u0002\u0002\u0002\u0512",
    "\u0514\u0005\u0156\u00ac\u0002\u0513\u0515\u0005\u0158\u00ad\u0002\u0514",
    "\u0513\u0003\u0002\u0002\u0002\u0514\u0515\u0003\u0002\u0002\u0002\u0515",
    "\u0517\u0003\u0002\u0002\u0002\u0516\u0518\u0005\u016e\u00b8\u0002\u0517",
    "\u0516\u0003\u0002\u0002\u0002\u0517\u0518\u0003\u0002\u0002\u0002\u0518",
    "\u0521\u0003\u0002\u0002\u0002\u0519\u051b\u0005\u015a\u00ae\u0002\u051a",
    "\u051c\u0005\u00fc\u007f\u0002\u051b\u051a\u0003\u0002\u0002\u0002\u051b",
    "\u051c\u0003\u0002\u0002\u0002\u051c\u051e\u0003\u0002\u0002\u0002\u051d",
    "\u051f\u0005\u016e\u00b8\u0002\u051e\u051d\u0003\u0002\u0002\u0002\u051e",
    "\u051f\u0003\u0002\u0002\u0002\u051f\u0521\u0003\u0002\u0002\u0002\u0520",
    "\u050b\u0003\u0002\u0002\u0002\u0520\u0519\u0003\u0002\u0002\u0002\u0521",
    "\u0093\u0003\u0002\u0002\u0002\u0522\u052e\u0005\u009cO\u0002\u0523",
    "\u052e\u0005\u0098M\u0002\u0524\u052e\u0005\u0090I\u0002\u0525\u052e",
    "\u0005\u013c\u009f\u0002\u0526\u052e\u0005\u018c\u00c7\u0002\u0527\u052e",
    "\u0005\u01a0\u00d1\u0002\u0528\u052e\u0005\u01a2\u00d2\u0002\u0529\u052e",
    "\u0005\u00fa~\u0002\u052a\u052e\u0005\u00e2r\u0002\u052b\u052e\u0005",
    "\u00aaV\u0002\u052c\u052e\u0005\u00acW\u0002\u052d\u0522\u0003\u0002",
    "\u0002\u0002\u052d\u0523\u0003\u0002\u0002\u0002\u052d\u0524\u0003\u0002",
    "\u0002\u0002\u052d\u0525\u0003\u0002\u0002\u0002\u052d\u0526\u0003\u0002",
    "\u0002\u0002\u052d\u0527\u0003\u0002\u0002\u0002\u052d\u0528\u0003\u0002",
    "\u0002\u0002\u052d\u0529\u0003\u0002\u0002\u0002\u052d\u052a\u0003\u0002",
    "\u0002\u0002\u052d\u052b\u0003\u0002\u0002\u0002\u052d\u052c\u0003\u0002",
    "\u0002\u0002\u052e\u0095\u0003\u0002\u0002\u0002\u052f\u0537\u0005\u00f8",
    "}\u0002\u0530\u0537\u0005\u00f0y\u0002\u0531\u0537\u0005\u00f4{\u0002",
    "\u0532\u0537\u0005\u00f6|\u0002\u0533\u0537\u0005\u00a8U\u0002\u0534",
    "\u0537\u0005\u009aN\u0002\u0535\u0537\u0005\u00d2j\u0002\u0536\u052f",
    "\u0003\u0002\u0002\u0002\u0536\u0530\u0003\u0002\u0002\u0002\u0536\u0531",
    "\u0003\u0002\u0002\u0002\u0536\u0532\u0003\u0002\u0002\u0002\u0536\u0533",
    "\u0003\u0002\u0002\u0002\u0536\u0534\u0003\u0002\u0002\u0002\u0536\u0535",
    "\u0003\u0002\u0002\u0002\u0537\u0097\u0003\u0002\u0002\u0002\u0538\u053b",
    "\u0005\u00a6T\u0002\u0539\u053b\u0005\u0096L\u0002\u053a\u0538\u0003",
    "\u0002\u0002\u0002\u053a\u0539\u0003\u0002\u0002\u0002\u053b\u0099\u0003",
    "\u0002\u0002\u0002\u053c\u053d\u0007J\u0002\u0002\u053d\u053f\u0007",
    "\u007f\u0002\u0002\u053e\u0540\u0005\u00fc\u007f\u0002\u053f\u053e\u0003",
    "\u0002\u0002\u0002\u053f\u0540\u0003\u0002\u0002\u0002\u0540\u0541\u0003",
    "\u0002\u0002\u0002\u0541\u0542\u0007`\u0002\u0002\u0542\u0543\u0005",
    "\u012a\u0096\u0002\u0543\u0544\u0007{\u0002\u0002\u0544\u009b\u0003",
    "\u0002\u0002\u0002\u0545\u0546\u0005\u009eP\u0002\u0546\u0547\u0007",
    "{\u0002\u0002\u0547\u009d\u0003\u0002\u0002\u0002\u0548\u054a\u0005",
    "\u00fc\u007f\u0002\u0549\u0548\u0003\u0002\u0002\u0002\u0549\u054a\u0003",
    "\u0002\u0002\u0002\u054a\u054c\u0003\u0002\u0002\u0002\u054b\u054d\u0005",
    "\u00b4[\u0002\u054c\u054b\u0003\u0002\u0002\u0002\u054c\u054d\u0003",
    "\u0002\u0002\u0002\u054d\u054e\u0003\u0002\u0002\u0002\u054e\u0550\u0005",
    "\u00bc_\u0002\u054f\u0551\u0005\u00a0Q\u0002\u0550\u054f\u0003\u0002",
    "\u0002\u0002\u0550\u0551\u0003\u0002\u0002\u0002\u0551\u009f\u0003\u0002",
    "\u0002\u0002\u0552\u055c\u0003\u0002\u0002\u0002\u0553\u0558\u0005\u00a2",
    "R\u0002\u0554\u0555\u0007u\u0002\u0002\u0555\u0557\u0005\u00a2R\u0002",
    "\u0556\u0554\u0003\u0002\u0002\u0002\u0557\u055a\u0003\u0002\u0002\u0002",
    "\u0558\u0556\u0003\u0002\u0002\u0002\u0558\u0559\u0003\u0002\u0002\u0002",
    "\u0559\u055c\u0003\u0002\u0002\u0002\u055a\u0558\u0003\u0002\u0002\u0002",
    "\u055b\u0552\u0003\u0002\u0002\u0002\u055b\u0553\u0003\u0002\u0002\u0002",
    "\u055c\u00a1\u0003\u0002\u0002\u0002\u055d\u055f\u0005\u0120\u0091\u0002",
    "\u055e\u055d\u0003\u0002\u0002\u0002\u055f\u0562\u0003\u0002\u0002\u0002",
    "\u0560\u055e\u0003\u0002\u0002\u0002\u0560\u0561\u0003\u0002\u0002\u0002",
    "\u0561\u0563\u0003\u0002\u0002\u0002\u0562\u0560\u0003\u0002\u0002\u0002",
    "\u0563\u056b\u0005\u0128\u0095\u0002\u0564\u0566\u0007R\u0002\u0002",
    "\u0565\u0567\u0005`1\u0002\u0566\u0565\u0003\u0002\u0002\u0002\u0566",
    "\u0567\u0003\u0002\u0002\u0002\u0567\u0568\u0003\u0002\u0002\u0002\u0568",
    "\u056a\u0007S\u0002\u0002\u0569\u0564\u0003\u0002\u0002\u0002\u056a",
    "\u056d\u0003\u0002\u0002\u0002\u056b\u0569\u0003\u0002\u0002\u0002\u056b",
    "\u056c\u0003\u0002\u0002\u0002\u056c\u0570\u0003\u0002\u0002\u0002\u056d",
    "\u056b\u0003\u0002\u0002\u0002\u056e\u056f\u0007`\u0002\u0002\u056f",
    "\u0571\u0005\u0148\u00a5\u0002\u0570\u056e\u0003\u0002\u0002\u0002\u0570",
    "\u0571\u0003\u0002\u0002\u0002\u0571\u00a3\u0003\u0002\u0002\u0002\u0572",
    "\u0573\u0007R\u0002\u0002\u0573\u0574\u0007S\u0002\u0002\u0574\u00a5",
    "\u0003\u0002\u0002\u0002\u0575\u0577\u0005\u00b0Y\u0002\u0576\u0575",
    "\u0003\u0002\u0002\u0002\u0576\u0577\u0003\u0002\u0002\u0002\u0577\u0579",
    "\u0003\u0002\u0002\u0002\u0578\u057a\u0005\u0112\u008a\u0002\u0579\u0578",
    "\u0003\u0002\u0002\u0002\u0579\u057a\u0003\u0002\u0002\u0002\u057a\u057b",
    "\u0003\u0002\u0002\u0002\u057b\u0584\u0007{\u0002\u0002\u057c\u057e",
    "\u0005\u00fc\u007f\u0002\u057d\u057f\u0005\u00b0Y\u0002\u057e\u057d",
    "\u0003\u0002\u0002\u0002\u057e\u057f\u0003\u0002\u0002\u0002\u057f\u0580",
    "\u0003\u0002\u0002\u0002\u0580\u0581\u0005\u0112\u008a\u0002\u0581\u0582",
    "\u0007{\u0002\u0002\u0582\u0584\u0003\u0002\u0002\u0002\u0583\u0576",
    "\u0003\u0002\u0002\u0002\u0583\u057c\u0003\u0002\u0002\u0002\u0584\u00a7",
    "\u0003\u0002\u0002\u0002\u0585\u0586\u0007;\u0002\u0002\u0586\u0587",
    "\u0007P\u0002\u0002\u0587\u0588\u0005b2\u0002\u0588\u0589\u0007u\u0002",
    "\u0002\u0589\u058a\u0007\u0088\u0002\u0002\u058a\u058b\u0007Q\u0002",
    "\u0002\u058b\u058c\u0007{\u0002\u0002\u058c\u00a9\u0003\u0002\u0002",
    "\u0002\u058d\u058e\u0007{\u0002\u0002\u058e\u00ab\u0003\u0002\u0002",
    "\u0002\u058f\u0590\u0005\u00fc\u007f\u0002\u0590\u0591\u0007{\u0002",
    "\u0002\u0591\u00ad\u0003\u0002\u0002\u0002\u0592\u0595\u0005\u00b2Z",
    "\u0002\u0593\u0595\u0005\u00bc_\u0002\u0594\u0592\u0003\u0002\u0002",
    "\u0002\u0594\u0593\u0003\u0002\u0002\u0002\u0595\u00af\u0003\u0002\u0002",
    "\u0002\u0596\u0598\u0005\u00aeX\u0002\u0597\u0599\u0005\u00fc\u007f",
    "\u0002\u0598\u0597\u0003\u0002\u0002\u0002\u0598\u0599\u0003\u0002\u0002",
    "\u0002\u0599\u059e\u0003\u0002\u0002\u0002\u059a\u059b\u0005\u00aeX",
    "\u0002\u059b\u059c\u0005\u00b0Y\u0002\u059c\u059e\u0003\u0002\u0002",
    "\u0002\u059d\u0596\u0003\u0002\u0002\u0002\u059d\u059a\u0003\u0002\u0002",
    "\u0002\u059e\u00b1\u0003\u0002\u0002\u0002\u059f\u05a5\u0005\u00b6\\",
    "\u0002\u05a0\u05a5\u0005\u00b8]\u0002\u05a1\u05a5\u0007$\u0002\u0002",
    "\u05a2\u05a5\u0007E\u0002\u0002\u05a3\u05a5\u0007\u0011\u0002\u0002",
    "\u05a4\u059f\u0003\u0002\u0002\u0002\u05a4\u05a0\u0003\u0002\u0002\u0002",
    "\u05a4\u05a1\u0003\u0002\u0002\u0002\u05a4\u05a2\u0003\u0002\u0002\u0002",
    "\u05a4\u05a3\u0003\u0002\u0002\u0002\u05a5\u00b3\u0003\u0002\u0002\u0002",
    "\u05a6\u05a8\u0005\u00b2Z\u0002\u05a7\u05a9\u0005\u00fc\u007f\u0002",
    "\u05a8\u05a7\u0003\u0002\u0002\u0002\u05a8\u05a9\u0003\u0002\u0002\u0002",
    "\u05a9\u05ae\u0003\u0002\u0002\u0002\u05aa\u05ab\u0005\u00b2Z\u0002",
    "\u05ab\u05ac\u0005\u00b0Y\u0002\u05ac\u05ae\u0003\u0002\u0002\u0002",
    "\u05ad\u05a6\u0003\u0002\u0002\u0002\u05ad\u05aa\u0003\u0002\u0002\u0002",
    "\u05ae\u00b5\u0003\u0002\u0002\u0002\u05af\u05b0\t\u0004\u0002\u0002",
    "\u05b0\u00b7\u0003\u0002\u0002\u0002\u05b1\u05b2\t\u0005\u0002\u0002",
    "\u05b2\u00b9\u0003\u0002\u0002\u0002\u05b3\u05b4\u0007\u007f\u0002\u0002",
    "\u05b4\u00bb\u0003\u0002\u0002\u0002\u05b5\u05b9\u0005\u00be`\u0002",
    "\u05b6\u05b9\u0005\u0090I\u0002\u05b7\u05b9\u0005\u00ceh\u0002\u05b8",
    "\u05b5\u0003\u0002\u0002\u0002\u05b8\u05b6\u0003\u0002\u0002\u0002\u05b8",
    "\u05b7\u0003\u0002\u0002\u0002\u05b9\u00bd\u0003\u0002\u0002\u0002\u05ba",
    "\u05bf\u0005\u00c4c\u0002\u05bb\u05bf\u0005\u00caf\u0002\u05bc\u05bf",
    "\u0005\u019e\u00d0\u0002\u05bd\u05bf\u0005\u0124\u0093\u0002\u05be\u05ba",
    "\u0003\u0002\u0002\u0002\u05be\u05bb\u0003\u0002\u0002\u0002\u05be\u05bc",
    "\u0003\u0002\u0002\u0002\u05be\u05bd\u0003\u0002\u0002\u0002\u05bf\u00bf",
    "\u0003\u0002\u0002\u0002\u05c0\u05c2\u0005\u00bc_\u0002\u05c1\u05c3",
    "\u0005\u00fc\u007f\u0002\u05c2\u05c1\u0003\u0002\u0002\u0002\u05c2\u05c3",
    "\u0003\u0002\u0002\u0002\u05c3\u05c8\u0003\u0002\u0002\u0002\u05c4\u05c5",
    "\u0005\u00bc_\u0002\u05c5\u05c6\u0005\u00c0a\u0002\u05c6\u05c8\u0003",
    "\u0002\u0002\u0002\u05c7\u05c0\u0003\u0002\u0002\u0002\u05c7\u05c4\u0003",
    "\u0002\u0002\u0002\u05c8\u00c1\u0003\u0002\u0002\u0002\u05c9\u05cb\u0005",
    "\u00be`\u0002\u05ca\u05cc\u0005\u00fc\u007f\u0002\u05cb\u05ca\u0003",
    "\u0002\u0002\u0002\u05cb\u05cc\u0003\u0002\u0002\u0002\u05cc\u05d1\u0003",
    "\u0002\u0002\u0002\u05cd\u05ce\u0005\u00be`\u0002\u05ce\u05cf\u0005",
    "\u00c2b\u0002\u05cf\u05d1\u0003\u0002\u0002\u0002\u05d0\u05c9\u0003",
    "\u0002\u0002\u0002\u05d0\u05cd\u0003\u0002\u0002\u0002\u05d1\u00c3\u0003",
    "\u0002\u0002\u0002\u05d2\u05d4\u0005\u000e\b\u0002\u05d3\u05d2\u0003",
    "\u0002\u0002\u0002\u05d3\u05d4\u0003\u0002\u0002\u0002\u05d4\u05d5\u0003",
    "\u0002\u0002\u0002\u05d5\u05ee\u0005\u00c6d\u0002\u05d6\u05d7\u0005",
    "\u000e\b\u0002\u05d7\u05d8\u0007?\u0002\u0002\u05d8\u05d9\u0005\u0194",
    "\u00cb\u0002\u05d9\u05ee\u0003\u0002\u0002\u0002\u05da\u05ee\u0007\f",
    "\u0002\u0002\u05db\u05ee\u0007\r\u0002\u0002\u05dc\u05ee\u0007\u000e",
    "\u0002\u0002\u05dd\u05ee\u0007N\u0002\u0002\u05de\u05ee\u0007\b\u0002",
    "\u0002\u05df\u05ee\u00077\u0002\u0002\u05e0\u05ee\u0007(\u0002\u0002",
    "\u05e1\u05ee\u0007)\u0002\u0002\u05e2\u05ee\u00078\u0002\u0002\u05e3",
    "\u05e5\u0007I\u0002\u0002\u05e4\u05e6\u0005\u00c4c\u0002\u05e5\u05e4",
    "\u0003\u0002\u0002\u0002\u05e5\u05e6\u0003\u0002\u0002\u0002\u05e6\u05ee",
    "\u0003\u0002\u0002\u0002\u05e7\u05ee\u0007\"\u0002\u0002\u05e8\u05ee",
    "\u0007\u0018\u0002\u0002\u05e9\u05ee\u0007L\u0002\u0002\u05ea\u05ee",
    "\u0007\u0007\u0002\u0002\u05eb\u05ee\u0005\u00c8e\u0002\u05ec\u05ee",
    "\u0007\u0019\u0002\u0002\u05ed\u05d3\u0003\u0002\u0002\u0002\u05ed\u05d6",
    "\u0003\u0002\u0002\u0002\u05ed\u05da\u0003\u0002\u0002\u0002\u05ed\u05db",
    "\u0003\u0002\u0002\u0002\u05ed\u05dc\u0003\u0002\u0002\u0002\u05ed\u05dd",
    "\u0003\u0002\u0002\u0002\u05ed\u05de\u0003\u0002\u0002\u0002\u05ed\u05df",
    "\u0003\u0002\u0002\u0002\u05ed\u05e0\u0003\u0002\u0002\u0002\u05ed\u05e1",
    "\u0003\u0002\u0002\u0002\u05ed\u05e2\u0003\u0002\u0002\u0002\u05ed\u05e3",
    "\u0003\u0002\u0002\u0002\u05ed\u05e7\u0003\u0002\u0002\u0002\u05ed\u05e8",
    "\u0003\u0002\u0002\u0002\u05ed\u05e9\u0003\u0002\u0002\u0002\u05ed\u05ea",
    "\u0003\u0002\u0002\u0002\u05ed\u05eb\u0003\u0002\u0002\u0002\u05ed\u05ec",
    "\u0003\u0002\u0002\u0002\u05ee\u00c5\u0003\u0002\u0002\u0002\u05ef\u05f4",
    "\u0005\u014e\u00a8\u0002\u05f0\u05f4\u0005\u00ccg\u0002\u05f1\u05f4",
    "\u0005\u00ba^\u0002\u05f2\u05f4\u0005\u0194\u00cb\u0002\u05f3\u05ef",
    "\u0003\u0002\u0002\u0002\u05f3\u05f0\u0003\u0002\u0002\u0002\u05f3\u05f1",
    "\u0003\u0002\u0002\u0002\u05f3\u05f2\u0003\u0002\u0002\u0002\u05f4\u00c7",
    "\u0003\u0002\u0002\u0002\u05f5\u05f6\u0007\u0014\u0002\u0002\u05f6\u05f7",
    "\u0007P\u0002\u0002\u05f7\u05f8\u0005`1\u0002\u05f8\u05f9\u0007Q\u0002",
    "\u0002\u05f9\u05ff\u0003\u0002\u0002\u0002\u05fa\u05fb\u0007\u0014\u0002",
    "\u0002\u05fb\u05fc\u0007P\u0002\u0002\u05fc\u05fd\u0007\u0007\u0002",
    "\u0002\u05fd\u05ff\u0007Q\u0002\u0002\u05fe\u05f5\u0003\u0002\u0002",
    "\u0002\u05fe\u05fa\u0003\u0002\u0002\u0002\u05ff\u00c9\u0003\u0002\u0002",
    "\u0002\u0600\u0602\u0005\u015a\u00ae\u0002\u0601\u0603\u0005\u00fc\u007f",
    "\u0002\u0602\u0601\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002",
    "\u0002\u0603\u0605\u0003\u0002\u0002\u0002\u0604\u0606\u0005\u000e\b",
    "\u0002\u0605\u0604\u0003\u0002\u0002\u0002\u0605\u0606\u0003\u0002\u0002",
    "\u0002\u0606\u0607\u0003\u0002\u0002\u0002\u0607\u0608\u0007\u007f\u0002",
    "\u0002\u0608\u0619\u0003\u0002\u0002\u0002\u0609\u060a\u0005\u015a\u00ae",
    "\u0002\u060a\u060b\u0005\u0194\u00cb\u0002\u060b\u0619\u0003\u0002\u0002",
    "\u0002\u060c\u060d\u0005\u015a\u00ae\u0002\u060d\u060f\u0005\u000e\b",
    "\u0002\u060e\u0610\u0007?\u0002\u0002\u060f\u060e\u0003\u0002\u0002",
    "\u0002\u060f\u0610\u0003\u0002\u0002\u0002\u0610\u0611\u0003\u0002\u0002",
    "\u0002\u0611\u0612\u0005\u0194\u00cb\u0002\u0612\u0619\u0003\u0002\u0002",
    "\u0002\u0613\u0615\u0007\u001c\u0002\u0002\u0614\u0616\u0005\u000e\b",
    "\u0002\u0615\u0614\u0003\u0002\u0002\u0002\u0615\u0616\u0003\u0002\u0002",
    "\u0002\u0616\u0617\u0003\u0002\u0002\u0002\u0617\u0619\u0007\u007f\u0002",
    "\u0002\u0618\u0600\u0003\u0002\u0002\u0002\u0618\u0609\u0003\u0002\u0002",
    "\u0002\u0618\u060c\u0003\u0002\u0002\u0002\u0618\u0613\u0003\u0002\u0002",
    "\u0002\u0619\u00cb\u0003\u0002\u0002\u0002\u061a\u061b\u0007\u007f\u0002",
    "\u0002\u061b\u00cd\u0003\u0002\u0002\u0002\u061c\u061d\u0005\u00d0i",
    "\u0002\u061d\u061f\u0007T\u0002\u0002\u061e\u0620\u0005\u00d8m\u0002",
    "\u061f\u061e\u0003\u0002\u0002\u0002\u061f\u0620\u0003\u0002\u0002\u0002",
    "\u0620\u0621\u0003\u0002\u0002\u0002\u0621\u0622\u0007U\u0002\u0002",
    "\u0622\u062a\u0003\u0002\u0002\u0002\u0623\u0624\u0005\u00d0i\u0002",
    "\u0624\u0625\u0007T\u0002\u0002\u0625\u0626\u0005\u00d8m\u0002\u0626",
    "\u0627\u0007u\u0002\u0002\u0627\u0628\u0007U\u0002\u0002\u0628\u062a",
    "\u0003\u0002\u0002\u0002\u0629\u061c\u0003\u0002\u0002\u0002\u0629\u0623",
    "\u0003\u0002\u0002\u0002\u062a\u00cf\u0003\u0002\u0002\u0002\u062b\u062d",
    "\u0005\u00d4k\u0002\u062c\u062e\u0005\u00fc\u007f\u0002\u062d\u062c",
    "\u0003\u0002\u0002\u0002\u062d\u062e\u0003\u0002\u0002\u0002\u062e\u0630",
    "\u0003\u0002\u0002\u0002\u062f\u0631\u0007\u007f\u0002\u0002\u0630\u062f",
    "\u0003\u0002\u0002\u0002\u0630\u0631\u0003\u0002\u0002\u0002\u0631\u0633",
    "\u0003\u0002\u0002\u0002\u0632\u0634\u0005\u00d6l\u0002\u0633\u0632",
    "\u0003\u0002\u0002\u0002\u0633\u0634\u0003\u0002\u0002\u0002\u0634\u063f",
    "\u0003\u0002\u0002\u0002\u0635\u0637\u0005\u00d4k\u0002\u0636\u0638",
    "\u0005\u00fc\u007f\u0002\u0637\u0636\u0003\u0002\u0002\u0002\u0637\u0638",
    "\u0003\u0002\u0002\u0002\u0638\u0639\u0003\u0002\u0002\u0002\u0639\u063a",
    "\u0005\u000e\b\u0002\u063a\u063c\u0007\u007f\u0002\u0002\u063b\u063d",
    "\u0005\u00d6l\u0002\u063c\u063b\u0003\u0002\u0002\u0002\u063c\u063d",
    "\u0003\u0002\u0002\u0002\u063d\u063f\u0003\u0002\u0002\u0002\u063e\u062b",
    "\u0003\u0002\u0002\u0002\u063e\u0635\u0003\u0002\u0002\u0002\u063f\u00d1",
    "\u0003\u0002\u0002\u0002\u0640\u0642\u0005\u00d4k\u0002\u0641\u0643",
    "\u0005\u00fc\u007f\u0002\u0642\u0641\u0003\u0002\u0002\u0002\u0642\u0643",
    "\u0003\u0002\u0002\u0002\u0643\u0644\u0003\u0002\u0002\u0002\u0644\u0646",
    "\u0007\u007f\u0002\u0002\u0645\u0647\u0005\u00d6l\u0002\u0646\u0645",
    "\u0003\u0002\u0002\u0002\u0646\u0647\u0003\u0002\u0002\u0002\u0647\u0648",
    "\u0003\u0002\u0002\u0002\u0648\u0649\u0007{\u0002\u0002\u0649\u00d3",
    "\u0003\u0002\u0002\u0002\u064a\u0650\u0007\u001c\u0002\u0002\u064b\u064c",
    "\u0007\u001c\u0002\u0002\u064c\u0650\u0007\u000f\u0002\u0002\u064d\u064e",
    "\u0007\u001c\u0002\u0002\u064e\u0650\u0007=\u0002\u0002\u064f\u064a",
    "\u0003\u0002\u0002\u0002\u064f\u064b\u0003\u0002\u0002\u0002\u064f\u064d",
    "\u0003\u0002\u0002\u0002\u0650\u00d5\u0003\u0002\u0002\u0002\u0651\u0652",
    "\u0007y\u0002\u0002\u0652\u0653\u0005\u00c0a\u0002\u0653\u00d7\u0003",
    "\u0002\u0002\u0002\u0654\u0655\bm\u0001\u0002\u0655\u0656\u0005\u00da",
    "n\u0002\u0656\u065c\u0003\u0002\u0002\u0002\u0657\u0658\f\u0003\u0002",
    "\u0002\u0658\u0659\u0007u\u0002\u0002\u0659\u065b\u0005\u00dan\u0002",
    "\u065a\u0657\u0003\u0002\u0002\u0002\u065b\u065e\u0003\u0002\u0002\u0002",
    "\u065c\u065a\u0003\u0002\u0002\u0002\u065c\u065d\u0003\u0002\u0002\u0002",
    "\u065d\u00d9\u0003\u0002\u0002\u0002\u065e\u065c\u0003\u0002\u0002\u0002",
    "\u065f\u0665\u0005\u00dco\u0002\u0660\u0661\u0005\u00dco\u0002\u0661",
    "\u0662\u0007`\u0002\u0002\u0662\u0663\u0005b2\u0002\u0663\u0665\u0003",
    "\u0002\u0002\u0002\u0664\u065f\u0003\u0002\u0002\u0002\u0664\u0660\u0003",
    "\u0002\u0002\u0002\u0665\u00db\u0003\u0002\u0002\u0002\u0666\u0667\u0007",
    "\u007f\u0002\u0002\u0667\u00dd\u0003\u0002\u0002\u0002\u0668\u066b\u0005",
    "\u00e0q\u0002\u0669\u066b\u0005\u00eex\u0002\u066a\u0668\u0003\u0002",
    "\u0002\u0002\u066a\u0669\u0003\u0002\u0002\u0002\u066b\u00df\u0003\u0002",
    "\u0002\u0002\u066c\u066d\u0007\u007f\u0002\u0002\u066d\u00e1\u0003\u0002",
    "\u0002\u0002\u066e\u0671\u0005\u00e4s\u0002\u066f\u0671\u0005\u00ea",
    "v\u0002\u0670\u066e\u0003\u0002\u0002\u0002\u0670\u066f\u0003\u0002",
    "\u0002\u0002\u0671\u00e3\u0003\u0002\u0002\u0002\u0672\u0675\u0005\u00e6",
    "t\u0002\u0673\u0675\u0005\u00e8u\u0002\u0674\u0672\u0003\u0002\u0002",
    "\u0002\u0674\u0673\u0003\u0002\u0002\u0002\u0675\u00e5\u0003\u0002\u0002",
    "\u0002\u0676\u0678\u0007\'\u0002\u0002\u0677\u0676\u0003\u0002\u0002",
    "\u0002\u0677\u0678\u0003\u0002\u0002\u0002\u0678\u0679\u0003\u0002\u0002",
    "\u0002\u0679\u067a\u0007+\u0002\u0002\u067a\u067b\u0007\u007f\u0002",
    "\u0002\u067b\u067c\u0007T\u0002\u0002\u067c\u067d\u0005\u00ecw\u0002",
    "\u067d\u067e\u0007U\u0002\u0002\u067e\u00e7\u0003\u0002\u0002\u0002",
    "\u067f\u0681\u0007\'\u0002\u0002\u0680\u067f\u0003\u0002\u0002\u0002",
    "\u0680\u0681\u0003\u0002\u0002\u0002\u0681\u0682\u0003\u0002\u0002\u0002",
    "\u0682\u0683\u0007+\u0002\u0002\u0683\u0684\u0005\u00e0q\u0002\u0684",
    "\u0685\u0007T\u0002\u0002\u0685\u0686\u0005\u00ecw\u0002\u0686\u0687",
    "\u0007U\u0002\u0002\u0687\u00e9\u0003\u0002\u0002\u0002\u0688\u068a",
    "\u0007\'\u0002\u0002\u0689\u0688\u0003\u0002\u0002\u0002\u0689\u068a",
    "\u0003\u0002\u0002\u0002\u068a\u068b\u0003\u0002\u0002\u0002\u068b\u068c",
    "\u0007+\u0002\u0002\u068c\u068d\u0007T\u0002\u0002\u068d\u068e\u0005",
    "\u00ecw\u0002\u068e\u068f\u0007U\u0002\u0002\u068f\u00eb\u0003\u0002",
    "\u0002\u0002\u0690\u0692\u0005\u008cG\u0002\u0691\u0690\u0003\u0002",
    "\u0002\u0002\u0691\u0692\u0003\u0002\u0002\u0002\u0692\u00ed\u0003\u0002",
    "\u0002\u0002\u0693\u0694\u0007\u007f\u0002\u0002\u0694\u00ef\u0003\u0002",
    "\u0002\u0002\u0695\u0696\u0007+\u0002\u0002\u0696\u0697\u0007\u007f",
    "\u0002\u0002\u0697\u0698\u0007`\u0002\u0002\u0698\u0699\u0005\u00f2",
    "z\u0002\u0699\u069a\u0007{\u0002\u0002\u069a\u00f1\u0003\u0002\u0002",
    "\u0002\u069b\u069d\u0005\u000e\b\u0002\u069c\u069b\u0003\u0002\u0002",
    "\u0002\u069c\u069d\u0003\u0002\u0002\u0002\u069d\u069e\u0003\u0002\u0002",
    "\u0002\u069e\u069f\u0005\u00dep\u0002\u069f\u00f3\u0003\u0002\u0002",
    "\u0002\u06a0\u06a2\u0007J\u0002\u0002\u06a1\u06a3\u0007G\u0002\u0002",
    "\u06a2\u06a1\u0003\u0002\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002",
    "\u06a3\u06a4\u0003\u0002\u0002\u0002\u06a4\u06a5\u0005\u000e\b\u0002",
    "\u06a5\u06a6\u0005\n\u0006\u0002\u06a6\u06a7\u0007{\u0002\u0002\u06a7",
    "\u06ae\u0003\u0002\u0002\u0002\u06a8\u06a9\u0007J\u0002\u0002\u06a9",
    "\u06aa\u0007z\u0002\u0002\u06aa\u06ab\u0005\n\u0006\u0002\u06ab\u06ac",
    "\u0007{\u0002\u0002\u06ac\u06ae\u0003\u0002\u0002\u0002\u06ad\u06a0",
    "\u0003\u0002\u0002\u0002\u06ad\u06a8\u0003\u0002\u0002\u0002\u06ae\u00f5",
    "\u0003\u0002\u0002\u0002\u06af\u06b1\u0005\u00fc\u007f\u0002\u06b0\u06af",
    "\u0003\u0002\u0002\u0002\u06b0\u06b1\u0003\u0002\u0002\u0002\u06b1\u06b2",
    "\u0003\u0002\u0002\u0002\u06b2\u06b3\u0007J\u0002\u0002\u06b3\u06b5",
    "\u0007+\u0002\u0002\u06b4\u06b6\u0005\u000e\b\u0002\u06b5\u06b4\u0003",
    "\u0002\u0002\u0002\u06b5\u06b6\u0003\u0002\u0002\u0002\u06b6\u06b7\u0003",
    "\u0002\u0002\u0002\u06b7\u06b8\u0005\u00dep\u0002\u06b8\u06b9\u0007",
    "{\u0002\u0002\u06b9\u00f7\u0003\u0002\u0002\u0002\u06ba\u06bb\u0007",
    "\u0006\u0002\u0002\u06bb\u06bc\u0007P\u0002\u0002\u06bc\u06bd\u0007",
    "\u0088\u0002\u0002\u06bd\u06be\u0007Q\u0002\u0002\u06be\u06bf\u0007",
    "{\u0002\u0002\u06bf\u00f9\u0003\u0002\u0002\u0002\u06c0\u06c1\u0007",
    "\u001f\u0002\u0002\u06c1\u06c2\u0007\u0088\u0002\u0002\u06c2\u06c4\u0007",
    "T\u0002\u0002\u06c3\u06c5\u0005\u008cG\u0002\u06c4\u06c3\u0003\u0002",
    "\u0002\u0002\u06c4\u06c5\u0003\u0002\u0002\u0002\u06c5\u06c6\u0003\u0002",
    "\u0002\u0002\u06c6\u06cb\u0007U\u0002\u0002\u06c7\u06c8\u0007\u001f",
    "\u0002\u0002\u06c8\u06c9\u0007\u0088\u0002\u0002\u06c9\u06cb\u0005\u0094",
    "K\u0002\u06ca\u06c0\u0003\u0002\u0002\u0002\u06ca\u06c7\u0003\u0002",
    "\u0002\u0002\u06cb\u00fb\u0003\u0002\u0002\u0002\u06cc\u06cd\b\u007f",
    "\u0001\u0002\u06cd\u06ce\u0005\u00fe\u0080\u0002\u06ce\u06d3\u0003\u0002",
    "\u0002\u0002\u06cf\u06d0\f\u0003\u0002\u0002\u06d0\u06d2\u0005\u00fe",
    "\u0080\u0002\u06d1\u06cf\u0003\u0002\u0002\u0002\u06d2\u06d5\u0003\u0002",
    "\u0002\u0002\u06d3\u06d1\u0003\u0002\u0002\u0002\u06d3\u06d4\u0003\u0002",
    "\u0002\u0002\u06d4\u00fd\u0003\u0002\u0002\u0002\u06d5\u06d3\u0003\u0002",
    "\u0002\u0002\u06d6\u06d7\u0007R\u0002\u0002\u06d7\u06d8\u0007R\u0002",
    "\u0002\u06d8\u06d9\u0005\u0102\u0082\u0002\u06d9\u06da\u0007S\u0002",
    "\u0002\u06da\u06db\u0007S\u0002\u0002\u06db\u06de\u0003\u0002\u0002",
    "\u0002\u06dc\u06de\u0005\u0100\u0081\u0002\u06dd\u06d6\u0003\u0002\u0002",
    "\u0002\u06dd\u06dc\u0003\u0002\u0002\u0002\u06de\u00ff\u0003\u0002\u0002",
    "\u0002\u06df\u06e0\u0007\u0004\u0002\u0002\u06e0\u06e1\u0007P\u0002",
    "\u0002\u06e1\u06e3\u0005\u012a\u0096\u0002\u06e2\u06e4\u0007~\u0002",
    "\u0002\u06e3\u06e2\u0003\u0002\u0002\u0002\u06e3\u06e4\u0003\u0002\u0002",
    "\u0002\u06e4\u06e5\u0003\u0002\u0002\u0002\u06e5\u06e6\u0007Q\u0002",
    "\u0002\u06e6\u06f0\u0003\u0002\u0002\u0002\u06e7\u06e8\u0007\u0004\u0002",
    "\u0002\u06e8\u06e9\u0007P\u0002\u0002\u06e9\u06eb\u0005b2\u0002\u06ea",
    "\u06ec\u0007~\u0002\u0002\u06eb\u06ea\u0003\u0002\u0002\u0002\u06eb",
    "\u06ec\u0003\u0002\u0002\u0002\u06ec\u06ed\u0003\u0002\u0002\u0002\u06ed",
    "\u06ee\u0007Q\u0002\u0002\u06ee\u06f0\u0003\u0002\u0002\u0002\u06ef",
    "\u06df\u0003\u0002\u0002\u0002\u06ef\u06e7\u0003\u0002\u0002\u0002\u06f0",
    "\u0101\u0003\u0002\u0002\u0002\u06f1\u06f3\b\u0082\u0001\u0002\u06f2",
    "\u06f4\u0005\u0104\u0083\u0002\u06f3\u06f2\u0003\u0002\u0002\u0002\u06f3",
    "\u06f4\u0003\u0002\u0002\u0002\u06f4\u06f9\u0003\u0002\u0002\u0002\u06f5",
    "\u06f6\u0005\u0104\u0083\u0002\u06f6\u06f7\u0007~\u0002\u0002\u06f7",
    "\u06f9\u0003\u0002\u0002\u0002\u06f8\u06f1\u0003\u0002\u0002\u0002\u06f8",
    "\u06f5\u0003\u0002\u0002\u0002\u06f9\u0706\u0003\u0002\u0002\u0002\u06fa",
    "\u06fb\f\u0005\u0002\u0002\u06fb\u06fd\u0007u\u0002\u0002\u06fc\u06fe",
    "\u0005\u0104\u0083\u0002\u06fd\u06fc\u0003\u0002\u0002\u0002\u06fd\u06fe",
    "\u0003\u0002\u0002\u0002\u06fe\u0705\u0003\u0002\u0002\u0002\u06ff\u0700",
    "\f\u0003\u0002\u0002\u0700\u0701\u0007u\u0002\u0002\u0701\u0702\u0005",
    "\u0104\u0083\u0002\u0702\u0703\u0007~\u0002\u0002\u0703\u0705\u0003",
    "\u0002\u0002\u0002\u0704\u06fa\u0003\u0002\u0002\u0002\u0704\u06ff\u0003",
    "\u0002\u0002\u0002\u0705\u0708\u0003\u0002\u0002\u0002\u0706\u0704\u0003",
    "\u0002\u0002\u0002\u0706\u0707\u0003\u0002\u0002\u0002\u0707\u0103\u0003",
    "\u0002\u0002\u0002\u0708\u0706\u0003\u0002\u0002\u0002\u0709\u070b\u0005",
    "\u0106\u0084\u0002\u070a\u070c\u0005\u010c\u0087\u0002\u070b\u070a\u0003",
    "\u0002\u0002\u0002\u070b\u070c\u0003\u0002\u0002\u0002\u070c\u0105\u0003",
    "\u0002\u0002\u0002\u070d\u0710\u0007\u007f\u0002\u0002\u070e\u0710\u0005",
    "\u0108\u0085\u0002\u070f\u070d\u0003\u0002\u0002\u0002\u070f\u070e\u0003",
    "\u0002\u0002\u0002\u0710\u0107\u0003\u0002\u0002\u0002\u0711\u0712\u0005",
    "\u010a\u0086\u0002\u0712\u0713\u0007z\u0002\u0002\u0713\u0714\u0007",
    "\u007f\u0002\u0002\u0714\u0109\u0003\u0002\u0002\u0002\u0715\u0716\u0007",
    "\u007f\u0002\u0002\u0716\u010b\u0003\u0002\u0002\u0002\u0717\u0718\u0007",
    "P\u0002\u0002\u0718\u0719\u0005\u010e\u0088\u0002\u0719\u071a\u0007",
    "Q\u0002\u0002\u071a\u010d\u0003\u0002\u0002\u0002\u071b\u071d\b\u0088",
    "\u0001\u0002\u071c\u071e\u0005\u0110\u0089\u0002\u071d\u071c\u0003\u0002",
    "\u0002\u0002\u071d\u071e\u0003\u0002\u0002\u0002\u071e\u0723\u0003\u0002",
    "\u0002\u0002\u071f\u0720\f\u0003\u0002\u0002\u0720\u0722\u0005\u0110",
    "\u0089\u0002\u0721\u071f\u0003\u0002\u0002\u0002\u0722\u0725\u0003\u0002",
    "\u0002\u0002\u0723\u0721\u0003\u0002\u0002\u0002\u0723\u0724\u0003\u0002",
    "\u0002\u0002\u0724\u010f\u0003\u0002\u0002\u0002\u0725\u0723\u0003\u0002",
    "\u0002\u0002\u0726\u0727\u0007P\u0002\u0002\u0727\u0728\u0005\u010e",
    "\u0088\u0002\u0728\u0729\u0007Q\u0002\u0002\u0729\u0733\u0003\u0002",
    "\u0002\u0002\u072a\u072b\u0007R\u0002\u0002\u072b\u072c\u0005\u010e",
    "\u0088\u0002\u072c\u072d\u0007S\u0002\u0002\u072d\u0733\u0003\u0002",
    "\u0002\u0002\u072e\u072f\u0007T\u0002\u0002\u072f\u0730\u0005\u010e",
    "\u0088\u0002\u0730\u0731\u0007U\u0002\u0002\u0731\u0733\u0003\u0002",
    "\u0002\u0002\u0732\u0726\u0003\u0002\u0002\u0002\u0732\u072a\u0003\u0002",
    "\u0002\u0002\u0732\u072e\u0003\u0002\u0002\u0002\u0733\u0111\u0003\u0002",
    "\u0002\u0002\u0734\u0739\u0005\u0114\u008b\u0002\u0735\u0736\u0007u",
    "\u0002\u0002\u0736\u0738\u0005\u0114\u008b\u0002\u0737\u0735\u0003\u0002",
    "\u0002\u0002\u0738\u073b\u0003\u0002\u0002\u0002\u0739\u0737\u0003\u0002",
    "\u0002\u0002\u0739\u073a\u0003\u0002\u0002\u0002\u073a\u0113\u0003\u0002",
    "\u0002\u0002\u073b\u0739\u0003\u0002\u0002\u0002\u073c\u073e\u0005\u0116",
    "\u008c\u0002\u073d\u073f\u0005\u0144\u00a3\u0002\u073e\u073d\u0003\u0002",
    "\u0002\u0002\u073e\u073f\u0003\u0002\u0002\u0002\u073f\u0115\u0003\u0002",
    "\u0002\u0002\u0740\u0746\u0005\u0118\u008d\u0002\u0741\u0742\u0005\u011a",
    "\u008e\u0002\u0742\u0743\u0005\u011c\u008f\u0002\u0743\u0744\u0005\u011e",
    "\u0090\u0002\u0744\u0746\u0003\u0002\u0002\u0002\u0745\u0740\u0003\u0002",
    "\u0002\u0002\u0745\u0741\u0003\u0002\u0002\u0002\u0746\u0117\u0003\u0002",
    "\u0002\u0002\u0747\u0749\u0005\u0120\u0091\u0002\u0748\u0747\u0003\u0002",
    "\u0002\u0002\u0749\u074c\u0003\u0002\u0002\u0002\u074a\u0748\u0003\u0002",
    "\u0002\u0002\u074a\u074b\u0003\u0002\u0002\u0002\u074b\u074d\u0003\u0002",
    "\u0002\u0002\u074c\u074a\u0003\u0002\u0002\u0002\u074d\u074e\u0005\u011a",
    "\u008e\u0002\u074e\u0119\u0003\u0002\u0002\u0002\u074f\u0750\b\u008e",
    "\u0001\u0002\u0750\u0752\u0005\u0128\u0095\u0002\u0751\u0753\u0005\u00fc",
    "\u007f\u0002\u0752\u0751\u0003\u0002\u0002\u0002\u0752\u0753\u0003\u0002",
    "\u0002\u0002\u0753\u0759\u0003\u0002\u0002\u0002\u0754\u0755\u0007P",
    "\u0002\u0002\u0755\u0756\u0005\u0118\u008d\u0002\u0756\u0757\u0007Q",
    "\u0002\u0002\u0757\u0759\u0003\u0002\u0002\u0002\u0758\u074f\u0003\u0002",
    "\u0002\u0002\u0758\u0754\u0003\u0002\u0002\u0002\u0759\u0767\u0003\u0002",
    "\u0002\u0002\u075a\u075b\f\u0005\u0002\u0002\u075b\u0766\u0005\u011c",
    "\u008f\u0002\u075c\u075d\f\u0004\u0002\u0002\u075d\u075f\u0007R\u0002",
    "\u0002\u075e\u0760\u0005b2\u0002\u075f\u075e\u0003\u0002\u0002\u0002",
    "\u075f\u0760\u0003\u0002\u0002\u0002\u0760\u0761\u0003\u0002\u0002\u0002",
    "\u0761\u0763\u0007S\u0002\u0002\u0762\u0764\u0005\u00fc\u007f\u0002",
    "\u0763\u0762\u0003\u0002\u0002\u0002\u0763\u0764\u0003\u0002\u0002\u0002",
    "\u0764\u0766\u0003\u0002\u0002\u0002\u0765\u075a\u0003\u0002\u0002\u0002",
    "\u0765\u075c\u0003\u0002\u0002\u0002\u0766\u0769\u0003\u0002\u0002\u0002",
    "\u0767\u0765\u0003\u0002\u0002\u0002\u0767\u0768\u0003\u0002\u0002\u0002",
    "\u0768\u011b\u0003\u0002\u0002\u0002\u0769\u0767\u0003\u0002\u0002\u0002",
    "\u076a\u076b\u0007P\u0002\u0002\u076b\u076c\u0005\u0136\u009c\u0002",
    "\u076c\u076e\u0007Q\u0002\u0002\u076d\u076f\u0005\u0122\u0092\u0002",
    "\u076e\u076d\u0003\u0002\u0002\u0002\u076e\u076f\u0003\u0002\u0002\u0002",
    "\u076f\u0771\u0003\u0002\u0002\u0002\u0770\u0772\u0005\u0126\u0094\u0002",
    "\u0771\u0770\u0003\u0002\u0002\u0002\u0771\u0772\u0003\u0002\u0002\u0002",
    "\u0772\u0774\u0003\u0002\u0002\u0002\u0773\u0775\u0005\u01b0\u00d9\u0002",
    "\u0774\u0773\u0003\u0002\u0002\u0002\u0774\u0775\u0003\u0002\u0002\u0002",
    "\u0775\u0777\u0003\u0002\u0002\u0002\u0776\u0778\u0005\u00fc\u007f\u0002",
    "\u0777\u0776\u0003\u0002\u0002\u0002\u0777\u0778\u0003\u0002\u0002\u0002",
    "\u0778\u011d\u0003\u0002\u0002\u0002\u0779\u077a\u0007w\u0002\u0002",
    "\u077a\u077c\u0005\u00c2b\u0002\u077b\u077d\u0005\u012c\u0097\u0002",
    "\u077c\u077b\u0003\u0002\u0002\u0002\u077c\u077d\u0003\u0002\u0002\u0002",
    "\u077d\u011f\u0003\u0002\u0002\u0002\u077e\u0780\u0007X\u0002\u0002",
    "\u077f\u0781\u0005\u00fc\u007f\u0002\u0780\u077f\u0003\u0002\u0002\u0002",
    "\u0780\u0781\u0003\u0002\u0002\u0002\u0781\u0783\u0003\u0002\u0002\u0002",
    "\u0782\u0784\u0005\u0122\u0092\u0002\u0783\u0782\u0003\u0002\u0002\u0002",
    "\u0783\u0784\u0003\u0002\u0002\u0002\u0784\u0796\u0003\u0002\u0002\u0002",
    "\u0785\u0787\u0007\\\u0002\u0002\u0786\u0788\u0005\u00fc\u007f\u0002",
    "\u0787\u0786\u0003\u0002\u0002\u0002\u0787\u0788\u0003\u0002\u0002\u0002",
    "\u0788\u0796\u0003\u0002\u0002\u0002\u0789\u078b\u0007q\u0002\u0002",
    "\u078a\u078c\u0005\u00fc\u007f\u0002\u078b\u078a\u0003\u0002\u0002\u0002",
    "\u078b\u078c\u0003\u0002\u0002\u0002\u078c\u0796\u0003\u0002\u0002\u0002",
    "\u078d\u078e\u0005\u000e\b\u0002\u078e\u0790\u0007X\u0002\u0002\u078f",
    "\u0791\u0005\u00fc\u007f\u0002\u0790\u078f\u0003\u0002\u0002\u0002\u0790",
    "\u0791\u0003\u0002\u0002\u0002\u0791\u0793\u0003\u0002\u0002\u0002\u0792",
    "\u0794\u0005\u0122\u0092\u0002\u0793\u0792\u0003\u0002\u0002\u0002\u0793",
    "\u0794\u0003\u0002\u0002\u0002\u0794\u0796\u0003\u0002\u0002\u0002\u0795",
    "\u077e\u0003\u0002\u0002\u0002\u0795\u0785\u0003\u0002\u0002\u0002\u0795",
    "\u0789\u0003\u0002\u0002\u0002\u0795\u078d\u0003\u0002\u0002\u0002\u0796",
    "\u0121\u0003\u0002\u0002\u0002\u0797\u0799\u0005\u0124\u0093\u0002\u0798",
    "\u079a\u0005\u0122\u0092\u0002\u0799\u0798\u0003\u0002\u0002\u0002\u0799",
    "\u079a\u0003\u0002\u0002\u0002\u079a\u0123\u0003\u0002\u0002\u0002\u079b",
    "\u079c\t\u0006\u0002\u0002\u079c\u0125\u0003\u0002\u0002\u0002\u079d",
    "\u079e\t\u0007\u0002\u0002\u079e\u0127\u0003\u0002\u0002\u0002\u079f",
    "\u07a1\u0007~\u0002\u0002\u07a0\u079f\u0003\u0002\u0002\u0002\u07a0",
    "\u07a1\u0003\u0002\u0002\u0002\u07a1\u07a2\u0003\u0002\u0002\u0002\u07a2",
    "\u07a3\u0005\u0006\u0004\u0002\u07a3\u0129\u0003\u0002\u0002\u0002\u07a4",
    "\u07a6\u0005\u00c0a\u0002\u07a5\u07a7\u0005\u012c\u0097\u0002\u07a6",
    "\u07a5\u0003\u0002\u0002\u0002\u07a6\u07a7\u0003\u0002\u0002\u0002\u07a7",
    "\u012b\u0003\u0002\u0002\u0002\u07a8\u07b1\u0005\u012e\u0098\u0002\u07a9",
    "\u07ab\u0005\u0130\u0099\u0002\u07aa\u07a9\u0003\u0002\u0002\u0002\u07aa",
    "\u07ab\u0003\u0002\u0002\u0002\u07ab\u07ac\u0003\u0002\u0002\u0002\u07ac",
    "\u07ad\u0005\u011c\u008f\u0002\u07ad\u07ae\u0005\u011e\u0090\u0002\u07ae",
    "\u07b1\u0003\u0002\u0002\u0002\u07af\u07b1\u0005\u0132\u009a\u0002\u07b0",
    "\u07a8\u0003\u0002\u0002\u0002\u07b0\u07aa\u0003\u0002\u0002\u0002\u07b0",
    "\u07af\u0003\u0002\u0002\u0002\u07b1\u012d\u0003\u0002\u0002\u0002\u07b2",
    "\u07b8\u0005\u0130\u0099\u0002\u07b3\u07b5\u0005\u0120\u0091\u0002\u07b4",
    "\u07b6\u0005\u012e\u0098\u0002\u07b5\u07b4\u0003\u0002\u0002\u0002\u07b5",
    "\u07b6\u0003\u0002\u0002\u0002\u07b6\u07b8\u0003\u0002\u0002\u0002\u07b7",
    "\u07b2\u0003\u0002\u0002\u0002\u07b7\u07b3\u0003\u0002\u0002\u0002\u07b8",
    "\u012f\u0003\u0002\u0002\u0002\u07b9\u07ba\b\u0099\u0001\u0002\u07ba",
    "\u07c8\u0005\u011c\u008f\u0002\u07bb\u07bd\u0007R\u0002\u0002\u07bc",
    "\u07be\u0005b2\u0002\u07bd\u07bc\u0003\u0002\u0002\u0002\u07bd\u07be",
    "\u0003\u0002\u0002\u0002\u07be\u07bf\u0003\u0002\u0002\u0002\u07bf\u07c1",
    "\u0007S\u0002\u0002\u07c0\u07c2\u0005\u00fc\u007f\u0002\u07c1\u07c0",
    "\u0003\u0002\u0002\u0002\u07c1\u07c2\u0003\u0002\u0002\u0002\u07c2\u07c8",
    "\u0003\u0002\u0002\u0002\u07c3\u07c4\u0007P\u0002\u0002\u07c4\u07c5",
    "\u0005\u012e\u0098\u0002\u07c5\u07c6\u0007Q\u0002\u0002\u07c6\u07c8",
    "\u0003\u0002\u0002\u0002\u07c7\u07b9\u0003\u0002\u0002\u0002\u07c7\u07bb",
    "\u0003\u0002\u0002\u0002\u07c7\u07c3\u0003\u0002\u0002\u0002\u07c8\u07d6",
    "\u0003\u0002\u0002\u0002\u07c9\u07ca\f\u0007\u0002\u0002\u07ca\u07d5",
    "\u0005\u011c\u008f\u0002\u07cb\u07cc\f\u0005\u0002\u0002\u07cc\u07ce",
    "\u0007R\u0002\u0002\u07cd\u07cf\u0005b2\u0002\u07ce\u07cd\u0003\u0002",
    "\u0002\u0002\u07ce\u07cf\u0003\u0002\u0002\u0002\u07cf\u07d0\u0003\u0002",
    "\u0002\u0002\u07d0\u07d2\u0007S\u0002\u0002\u07d1\u07d3\u0005\u00fc",
    "\u007f\u0002\u07d2\u07d1\u0003\u0002\u0002\u0002\u07d2\u07d3\u0003\u0002",
    "\u0002\u0002\u07d3\u07d5\u0003\u0002\u0002\u0002\u07d4\u07c9\u0003\u0002",
    "\u0002\u0002\u07d4\u07cb\u0003\u0002\u0002\u0002\u07d5\u07d8\u0003\u0002",
    "\u0002\u0002\u07d6\u07d4\u0003\u0002\u0002\u0002\u07d6\u07d7\u0003\u0002",
    "\u0002\u0002\u07d7\u0131\u0003\u0002\u0002\u0002\u07d8\u07d6\u0003\u0002",
    "\u0002\u0002\u07d9\u07de\u0005\u0134\u009b\u0002\u07da\u07db\u0005\u0120",
    "\u0091\u0002\u07db\u07dc\u0005\u0132\u009a\u0002\u07dc\u07de\u0003\u0002",
    "\u0002\u0002\u07dd\u07d9\u0003\u0002\u0002\u0002\u07dd\u07da\u0003\u0002",
    "\u0002\u0002\u07de\u0133\u0003\u0002\u0002\u0002\u07df\u07e0\b\u009b",
    "\u0001\u0002\u07e0\u07e1\u0007~\u0002\u0002\u07e1\u07ef\u0003\u0002",
    "\u0002\u0002\u07e2\u07e3\f\u0005\u0002\u0002\u07e3\u07ee\u0005\u011c",
    "\u008f\u0002\u07e4\u07e5\f\u0004\u0002\u0002\u07e5\u07e7\u0007R\u0002",
    "\u0002\u07e6\u07e8\u0005b2\u0002\u07e7\u07e6\u0003\u0002\u0002\u0002",
    "\u07e7\u07e8\u0003\u0002\u0002\u0002\u07e8\u07e9\u0003\u0002\u0002\u0002",
    "\u07e9\u07eb\u0007S\u0002\u0002\u07ea\u07ec\u0005\u00fc\u007f\u0002",
    "\u07eb\u07ea\u0003\u0002\u0002\u0002\u07eb\u07ec\u0003\u0002\u0002\u0002",
    "\u07ec\u07ee\u0003\u0002\u0002\u0002\u07ed\u07e2\u0003\u0002\u0002\u0002",
    "\u07ed\u07e4\u0003\u0002\u0002\u0002\u07ee\u07f1\u0003\u0002\u0002\u0002",
    "\u07ef\u07ed\u0003\u0002\u0002\u0002\u07ef\u07f0\u0003\u0002\u0002\u0002",
    "\u07f0\u0135\u0003\u0002\u0002\u0002\u07f1\u07ef\u0003\u0002\u0002\u0002",
    "\u07f2\u07f4\u0005\u0138\u009d\u0002\u07f3\u07f2\u0003\u0002\u0002\u0002",
    "\u07f3\u07f4\u0003\u0002\u0002\u0002\u07f4\u07f6\u0003\u0002\u0002\u0002",
    "\u07f5\u07f7\u0007~\u0002\u0002\u07f6\u07f5\u0003\u0002\u0002\u0002",
    "\u07f6\u07f7\u0003\u0002\u0002\u0002\u07f7\u07fd\u0003\u0002\u0002\u0002",
    "\u07f8\u07f9\u0005\u0138\u009d\u0002\u07f9\u07fa\u0007u\u0002\u0002",
    "\u07fa\u07fb\u0007~\u0002\u0002\u07fb\u07fd\u0003\u0002\u0002\u0002",
    "\u07fc\u07f3\u0003\u0002\u0002\u0002\u07fc\u07f8\u0003\u0002\u0002\u0002",
    "\u07fd\u0137\u0003\u0002\u0002\u0002\u07fe\u07ff\b\u009d\u0001\u0002",
    "\u07ff\u0800\u0005\u013a\u009e\u0002\u0800\u0806\u0003\u0002\u0002\u0002",
    "\u0801\u0802\f\u0003\u0002\u0002\u0802\u0803\u0007u\u0002\u0002\u0803",
    "\u0805\u0005\u013a\u009e\u0002\u0804\u0801\u0003\u0002\u0002\u0002\u0805",
    "\u0808\u0003\u0002\u0002\u0002\u0806\u0804\u0003\u0002\u0002\u0002\u0806",
    "\u0807\u0003\u0002\u0002\u0002\u0807\u0139\u0003\u0002\u0002\u0002\u0808",
    "\u0806\u0003\u0002\u0002\u0002\u0809\u080b\u0005\u00fc\u007f\u0002\u080a",
    "\u0809\u0003\u0002\u0002\u0002\u080a\u080b\u0003\u0002\u0002\u0002\u080b",
    "\u080c\u0003\u0002\u0002\u0002\u080c\u080d\u0005\u00b0Y\u0002\u080d",
    "\u080e\u0005\u0116\u008c\u0002\u080e\u0829\u0003\u0002\u0002\u0002\u080f",
    "\u0811\u0005\u00fc\u007f\u0002\u0810\u080f\u0003\u0002\u0002\u0002\u0810",
    "\u0811\u0003\u0002\u0002\u0002\u0811\u0812\u0003\u0002\u0002\u0002\u0812",
    "\u0813\u0005\u00b0Y\u0002\u0813\u0814\u0005\u0116\u008c\u0002\u0814",
    "\u0815\u0007`\u0002\u0002\u0815\u0816\u0005\u0148\u00a5\u0002\u0816",
    "\u0829\u0003\u0002\u0002\u0002\u0817\u0819\u0005\u00fc\u007f\u0002\u0818",
    "\u0817\u0003\u0002\u0002\u0002\u0818\u0819\u0003\u0002\u0002\u0002\u0819",
    "\u081a\u0003\u0002\u0002\u0002\u081a\u081c\u0005\u00b0Y\u0002\u081b",
    "\u081d\u0005\u012c\u0097\u0002\u081c\u081b\u0003\u0002\u0002\u0002\u081c",
    "\u081d\u0003\u0002\u0002\u0002\u081d\u0829\u0003\u0002\u0002\u0002\u081e",
    "\u0820\u0005\u00fc\u007f\u0002\u081f\u081e\u0003\u0002\u0002\u0002\u081f",
    "\u0820\u0003\u0002\u0002\u0002\u0820\u0821\u0003\u0002\u0002\u0002\u0821",
    "\u0823\u0005\u00b0Y\u0002\u0822\u0824\u0005\u012c\u0097\u0002\u0823",
    "\u0822\u0003\u0002\u0002\u0002\u0823\u0824\u0003\u0002\u0002\u0002\u0824",
    "\u0825\u0003\u0002\u0002\u0002\u0825\u0826\u0007`\u0002\u0002\u0826",
    "\u0827\u0005\u0148\u00a5\u0002\u0827\u0829\u0003\u0002\u0002\u0002\u0828",
    "\u080a\u0003\u0002\u0002\u0002\u0828\u0810\u0003\u0002\u0002\u0002\u0828",
    "\u0818\u0003\u0002\u0002\u0002\u0828\u081f\u0003\u0002\u0002\u0002\u0829",
    "\u013b\u0003\u0002\u0002\u0002\u082a\u082c\u0005\u00fc\u007f\u0002\u082b",
    "\u082a\u0003\u0002\u0002\u0002\u082b\u082c\u0003\u0002\u0002\u0002\u082c",
    "\u082e\u0003\u0002\u0002\u0002\u082d\u082f\u0005\u00b4[\u0002\u082e",
    "\u082d\u0003\u0002\u0002\u0002\u082e\u082f\u0003\u0002\u0002\u0002\u082f",
    "\u0830\u0003\u0002\u0002\u0002\u0830\u0832\u0005\u013e\u00a0\u0002\u0831",
    "\u0833\u0005\u0168\u00b5\u0002\u0832\u0831\u0003\u0002\u0002\u0002\u0832",
    "\u0833\u0003\u0002\u0002\u0002\u0833\u0834\u0003\u0002\u0002\u0002\u0834",
    "\u0835\u0005\u0142\u00a2\u0002\u0835\u013d\u0003\u0002\u0002\u0002\u0836",
    "\u0838\u0005\u00bc_\u0002\u0837\u0836\u0003\u0002\u0002\u0002\u0837",
    "\u0838\u0003\u0002\u0002\u0002\u0838\u0839\u0003\u0002\u0002\u0002\u0839",
    "\u083a\u0005\u0140\u00a1\u0002\u083a\u013f\u0003\u0002\u0002\u0002\u083b",
    "\u083c\u0005\u0128\u0095\u0002\u083c\u083d\u0007P\u0002\u0002\u083d",
    "\u083e\u0005\u0136\u009c\u0002\u083e\u083f\u0007Q\u0002\u0002\u083f",
    "\u0141\u0003\u0002\u0002\u0002\u0840\u0842\u0005\u0180\u00c1\u0002\u0841",
    "\u0840\u0003\u0002\u0002\u0002\u0841\u0842\u0003\u0002\u0002\u0002\u0842",
    "\u0843\u0003\u0002\u0002\u0002\u0843\u084c\u0005j6\u0002\u0844\u084c",
    "\u0005\u01a6\u00d4\u0002\u0845\u0846\u0007`\u0002\u0002\u0846\u0847",
    "\u0007\u0015\u0002\u0002\u0847\u084c\u0007{\u0002\u0002\u0848\u0849",
    "\u0007`\u0002\u0002\u0849\u084a\u0007\u0016\u0002\u0002\u084a\u084c",
    "\u0007{\u0002\u0002\u084b\u0841\u0003\u0002\u0002\u0002\u084b\u0844",
    "\u0003\u0002\u0002\u0002\u084b\u0845\u0003\u0002\u0002\u0002\u084b\u0848",
    "\u0003\u0002\u0002\u0002\u084c\u0143\u0003\u0002\u0002\u0002\u084d\u0853",
    "\u0005\u0146\u00a4\u0002\u084e\u084f\u0007P\u0002\u0002\u084f\u0850",
    "\u0005&\u0014\u0002\u0850\u0851\u0007Q\u0002\u0002\u0851\u0853\u0003",
    "\u0002\u0002\u0002\u0852\u084d\u0003\u0002\u0002\u0002\u0852\u084e\u0003",
    "\u0002\u0002\u0002\u0853\u0145\u0003\u0002\u0002\u0002\u0854\u0855\u0007",
    "`\u0002\u0002\u0855\u0858\u0005\u0148\u00a5\u0002\u0856\u0858\u0005",
    "\u014c\u00a7\u0002\u0857\u0854\u0003\u0002\u0002\u0002\u0857\u0856\u0003",
    "\u0002\u0002\u0002\u0858\u0147\u0003\u0002\u0002\u0002\u0859\u085c\u0005",
    "\\/\u0002\u085a\u085c\u0005\u014c\u00a7\u0002\u085b\u0859\u0003\u0002",
    "\u0002\u0002\u085b\u085a\u0003\u0002\u0002\u0002\u085c\u0149\u0003\u0002",
    "\u0002\u0002\u085d\u0862\u0005\u0148\u00a5\u0002\u085e\u085f\u0007u",
    "\u0002\u0002\u085f\u0861\u0005\u0148\u00a5\u0002\u0860\u085e\u0003\u0002",
    "\u0002\u0002\u0861\u0864\u0003\u0002\u0002\u0002\u0862\u0860\u0003\u0002",
    "\u0002\u0002\u0862\u0863\u0003\u0002\u0002\u0002\u0863\u014b\u0003\u0002",
    "\u0002\u0002\u0864\u0862\u0003\u0002\u0002\u0002\u0865\u0866\u0007T",
    "\u0002\u0002\u0866\u0868\u0005\u014a\u00a6\u0002\u0867\u0869\u0007u",
    "\u0002\u0002\u0868\u0867\u0003\u0002\u0002\u0002\u0868\u0869\u0003\u0002",
    "\u0002\u0002\u0869\u086a\u0003\u0002\u0002\u0002\u086a\u086b\u0007U",
    "\u0002\u0002\u086b\u086f\u0003\u0002\u0002\u0002\u086c\u086d\u0007T",
    "\u0002\u0002\u086d\u086f\u0007U\u0002\u0002\u086e\u0865\u0003\u0002",
    "\u0002\u0002\u086e\u086c\u0003\u0002\u0002\u0002\u086f\u014d\u0003\u0002",
    "\u0002\u0002\u0870\u0873\u0007\u007f\u0002\u0002\u0871\u0873\u0005\u0194",
    "\u00cb\u0002\u0872\u0870\u0003\u0002\u0002\u0002\u0872\u0871\u0003\u0002",
    "\u0002\u0002\u0873\u014f\u0003\u0002\u0002\u0002\u0874\u0875\u0005\u0154",
    "\u00ab\u0002\u0875\u0876\u0005\u0152\u00aa\u0002\u0876\u0151\u0003\u0002",
    "\u0002\u0002\u0877\u0879\u0007T\u0002\u0002\u0878\u087a\u0005\u015c",
    "\u00af\u0002\u0879\u0878\u0003\u0002\u0002\u0002\u0879\u087a\u0003\u0002",
    "\u0002\u0002\u087a\u087b\u0003\u0002\u0002\u0002\u087b\u087c\u0007U",
    "\u0002\u0002\u087c\u0153\u0003\u0002\u0002\u0002\u087d\u087f\u0005\u015a",
    "\u00ae\u0002\u087e\u0880\u0005\u00fc\u007f\u0002\u087f\u087e\u0003\u0002",
    "\u0002\u0002\u087f\u0880\u0003\u0002\u0002\u0002\u0880\u0882\u0003\u0002",
    "\u0002\u0002\u0881\u0883\u0005\u000e\b\u0002\u0882\u0881\u0003\u0002",
    "\u0002\u0002\u0882\u0883\u0003\u0002\u0002\u0002\u0883\u0884\u0003\u0002",
    "\u0002\u0002\u0884\u0886\u0005\u0156\u00ac\u0002\u0885\u0887\u0005\u0158",
    "\u00ad\u0002\u0886\u0885\u0003\u0002\u0002\u0002\u0886\u0887\u0003\u0002",
    "\u0002\u0002\u0887\u0889\u0003\u0002\u0002\u0002\u0888\u088a\u0005\u016e",
    "\u00b8\u0002\u0889\u0888\u0003\u0002\u0002\u0002\u0889\u088a\u0003\u0002",
    "\u0002\u0002\u088a\u0893\u0003\u0002\u0002\u0002\u088b\u088d\u0005\u015a",
    "\u00ae\u0002\u088c\u088e\u0005\u00fc\u007f\u0002\u088d\u088c\u0003\u0002",
    "\u0002\u0002\u088d\u088e\u0003\u0002\u0002\u0002\u088e\u0890\u0003\u0002",
    "\u0002\u0002\u088f\u0891\u0005\u016e\u00b8\u0002\u0890\u088f\u0003\u0002",
    "\u0002\u0002\u0890\u0891\u0003\u0002\u0002\u0002\u0891\u0893\u0003\u0002",
    "\u0002\u0002\u0892\u087d\u0003\u0002\u0002\u0002\u0892\u088b\u0003\u0002",
    "\u0002\u0002\u0893\u0155\u0003\u0002\u0002\u0002\u0894\u0896\u0005\u000e",
    "\b\u0002\u0895\u0894\u0003\u0002\u0002\u0002\u0895\u0896\u0003\u0002",
    "\u0002\u0002\u0896\u0897\u0003\u0002\u0002\u0002\u0897\u0898\u0005\u014e",
    "\u00a8\u0002\u0898\u0157\u0003\u0002\u0002\u0002\u0899\u089a\u0007!",
    "\u0002\u0002\u089a\u0159\u0003\u0002\u0002\u0002\u089b\u089c\t\b\u0002",
    "\u0002\u089c\u015b\u0003\u0002\u0002\u0002\u089d\u089f\u0005\u015e\u00b0",
    "\u0002\u089e\u08a0\u0005\u015c\u00af\u0002\u089f\u089e\u0003\u0002\u0002",
    "\u0002\u089f\u08a0\u0003\u0002\u0002\u0002\u08a0\u08a7\u0003\u0002\u0002",
    "\u0002\u08a1\u08a2\u0005\u0178\u00bd\u0002\u08a2\u08a4\u0007y\u0002",
    "\u0002\u08a3\u08a5\u0005\u015c\u00af\u0002\u08a4\u08a3\u0003\u0002\u0002",
    "\u0002\u08a4\u08a5\u0003\u0002\u0002\u0002\u08a5\u08a7\u0003\u0002\u0002",
    "\u0002\u08a6\u089d\u0003\u0002\u0002\u0002\u08a6\u08a1\u0003\u0002\u0002",
    "\u0002\u08a7\u015d\u0003\u0002\u0002\u0002\u08a8\u08b0\u0005\u0160\u00b1",
    "\u0002\u08a9\u08b0\u0005\u013c\u009f\u0002\u08aa\u08b0\u0005\u00f4{",
    "\u0002\u08ab\u08b0\u0005\u00a8U\u0002\u08ac\u08b0\u0005\u018c\u00c7",
    "\u0002\u08ad\u08b0\u0005\u009aN\u0002\u08ae\u08b0\u0005\u00aaV\u0002",
    "\u08af\u08a8\u0003\u0002\u0002\u0002\u08af\u08a9\u0003\u0002\u0002\u0002",
    "\u08af\u08aa\u0003\u0002\u0002\u0002\u08af\u08ab\u0003\u0002\u0002\u0002",
    "\u08af\u08ac\u0003\u0002\u0002\u0002\u08af\u08ad\u0003\u0002\u0002\u0002",
    "\u08af\u08ae\u0003\u0002\u0002\u0002\u08b0\u015f\u0003\u0002\u0002\u0002",
    "\u08b1\u08b2\u0005\u0162\u00b2\u0002\u08b2\u08b3\u0007{\u0002\u0002",
    "\u08b3\u0161\u0003\u0002\u0002\u0002\u08b4\u08b6\u0005\u00fc\u007f\u0002",
    "\u08b5\u08b4\u0003\u0002\u0002\u0002\u08b5\u08b6\u0003\u0002\u0002\u0002",
    "\u08b6\u08b8\u0003\u0002\u0002\u0002\u08b7\u08b9\u0005\u00b4[\u0002",
    "\u08b8\u08b7\u0003\u0002\u0002\u0002\u08b8\u08b9\u0003\u0002\u0002\u0002",
    "\u08b9\u08ba\u0003\u0002\u0002\u0002\u08ba\u08be\u0005\u00bc_\u0002",
    "\u08bb\u08bd\u0005\u0120\u0091\u0002\u08bc\u08bb\u0003\u0002\u0002\u0002",
    "\u08bd\u08c0\u0003\u0002\u0002\u0002\u08be\u08bc\u0003\u0002\u0002\u0002",
    "\u08be\u08bf\u0003\u0002\u0002\u0002\u08bf\u08c2\u0003\u0002\u0002\u0002",
    "\u08c0\u08be\u0003\u0002\u0002\u0002\u08c1\u08c3\u0005\u0164\u00b3\u0002",
    "\u08c2\u08c1\u0003\u0002\u0002\u0002\u08c2\u08c3\u0003\u0002\u0002\u0002",
    "\u08c3\u0163\u0003\u0002\u0002\u0002\u08c4\u08c5\b\u00b3\u0001\u0002",
    "\u08c5\u08c6\u0005\u0166\u00b4\u0002\u08c6\u08cc\u0003\u0002\u0002\u0002",
    "\u08c7\u08c8\f\u0003\u0002\u0002\u08c8\u08c9\u0007u\u0002\u0002\u08c9",
    "\u08cb\u0005\u0166\u00b4\u0002\u08ca\u08c7\u0003\u0002\u0002\u0002\u08cb",
    "\u08ce\u0003\u0002\u0002\u0002\u08cc\u08ca\u0003\u0002\u0002\u0002\u08cc",
    "\u08cd\u0003\u0002\u0002\u0002\u08cd\u0165\u0003\u0002\u0002\u0002\u08ce",
    "\u08cc\u0003\u0002\u0002\u0002\u08cf\u08d1\u0005\u0128\u0095\u0002\u08d0",
    "\u08d2\u0005\u0168\u00b5\u0002\u08d1\u08d0\u0003\u0002\u0002\u0002\u08d1",
    "\u08d2\u0003\u0002\u0002\u0002\u08d2\u08d4\u0003\u0002\u0002\u0002\u08d3",
    "\u08d5\u0005\u016c\u00b7\u0002\u08d4\u08d3\u0003\u0002\u0002\u0002\u08d4",
    "\u08d5\u0003\u0002\u0002\u0002\u08d5\u08e8\u0003\u0002\u0002\u0002\u08d6",
    "\u08d9\u0005\u0128\u0095\u0002\u08d7\u08d8\u0007`\u0002\u0002\u08d8",
    "\u08da\u0005\u0148\u00a5\u0002\u08d9\u08d7\u0003\u0002\u0002\u0002\u08d9",
    "\u08da\u0003\u0002\u0002\u0002\u08da\u08e8\u0003\u0002\u0002\u0002\u08db",
    "\u08dd\u0005\u0128\u0095\u0002\u08dc\u08de\u0005\u014c\u00a7\u0002\u08dd",
    "\u08dc\u0003\u0002\u0002\u0002\u08dd\u08de\u0003\u0002\u0002\u0002\u08de",
    "\u08e8\u0003\u0002\u0002\u0002\u08df\u08e1\u0007\u007f\u0002\u0002\u08e0",
    "\u08df\u0003\u0002\u0002\u0002\u08e0\u08e1\u0003\u0002\u0002\u0002\u08e1",
    "\u08e3\u0003\u0002\u0002\u0002\u08e2\u08e4\u0005\u00fc\u007f\u0002\u08e3",
    "\u08e2\u0003\u0002\u0002\u0002\u08e3\u08e4\u0003\u0002\u0002\u0002\u08e4",
    "\u08e5\u0003\u0002\u0002\u0002\u08e5\u08e6\u0007y\u0002\u0002\u08e6",
    "\u08e8\u0005b2\u0002\u08e7\u08cf\u0003\u0002\u0002\u0002\u08e7\u08d6",
    "\u0003\u0002\u0002\u0002\u08e7\u08db\u0003\u0002\u0002\u0002\u08e7\u08e0",
    "\u0003\u0002\u0002\u0002\u08e8\u0167\u0003\u0002\u0002\u0002\u08e9\u08ea",
    "\b\u00b5\u0001\u0002\u08ea\u08eb\u0005\u016a\u00b6\u0002\u08eb\u08f0",
    "\u0003\u0002\u0002\u0002\u08ec\u08ed\f\u0003\u0002\u0002\u08ed\u08ef",
    "\u0005\u016a\u00b6\u0002\u08ee\u08ec\u0003\u0002\u0002\u0002\u08ef\u08f2",
    "\u0003\u0002\u0002\u0002\u08f0\u08ee\u0003\u0002\u0002\u0002\u08f0\u08f1",
    "\u0003\u0002\u0002\u0002\u08f1\u0169\u0003\u0002\u0002\u0002\u08f2\u08f0",
    "\u0003\u0002\u0002\u0002\u08f3\u08f4\t\t\u0002\u0002\u08f4\u016b\u0003",
    "\u0002\u0002\u0002\u08f5\u08f6\u0007`\u0002\u0002\u08f6\u08f7\u0007",
    "\u0082\u0002\u0002\u08f7\u016d\u0003\u0002\u0002\u0002\u08f8\u08f9\u0007",
    "y\u0002\u0002\u08f9\u08fa\u0005\u0170\u00b9\u0002\u08fa\u016f\u0003",
    "\u0002\u0002\u0002\u08fb\u08fc\b\u00b9\u0001\u0002\u08fc\u08fe\u0005",
    "\u0172\u00ba\u0002\u08fd\u08ff\u0007~\u0002\u0002\u08fe\u08fd\u0003",
    "\u0002\u0002\u0002\u08fe\u08ff\u0003\u0002\u0002\u0002\u08ff\u0908\u0003",
    "\u0002\u0002\u0002\u0900\u0901\f\u0003\u0002\u0002\u0901\u0902\u0007",
    "u\u0002\u0002\u0902\u0904\u0005\u0172\u00ba\u0002\u0903\u0905\u0007",
    "~\u0002\u0002\u0904\u0903\u0003\u0002\u0002\u0002\u0904\u0905\u0003",
    "\u0002\u0002\u0002\u0905\u0907\u0003\u0002\u0002\u0002\u0906\u0900\u0003",
    "\u0002\u0002\u0002\u0907\u090a\u0003\u0002\u0002\u0002\u0908\u0906\u0003",
    "\u0002\u0002\u0002\u0908\u0909\u0003\u0002\u0002\u0002\u0909\u0171\u0003",
    "\u0002\u0002\u0002\u090a\u0908\u0003\u0002\u0002\u0002\u090b\u090d\u0005",
    "\u00fc\u007f\u0002\u090c\u090b\u0003\u0002\u0002\u0002\u090c\u090d\u0003",
    "\u0002\u0002\u0002\u090d\u090e\u0003\u0002\u0002\u0002\u090e\u0921\u0005",
    "\u0176\u00bc\u0002\u090f\u0911\u0005\u00fc\u007f\u0002\u0910\u090f\u0003",
    "\u0002\u0002\u0002\u0910\u0911\u0003\u0002\u0002\u0002\u0911\u0912\u0003",
    "\u0002\u0002\u0002\u0912\u0914\u0007K\u0002\u0002\u0913\u0915\u0005",
    "\u0178\u00bd\u0002\u0914\u0913\u0003\u0002\u0002\u0002\u0914\u0915\u0003",
    "\u0002\u0002\u0002\u0915\u0916\u0003\u0002\u0002\u0002\u0916\u0921\u0005",
    "\u0176\u00bc\u0002\u0917\u0919\u0005\u00fc\u007f\u0002\u0918\u0917\u0003",
    "\u0002\u0002\u0002\u0918\u0919\u0003\u0002\u0002\u0002\u0919\u091a\u0003",
    "\u0002\u0002\u0002\u091a\u091c\u0005\u0178\u00bd\u0002\u091b\u091d\u0007",
    "K\u0002\u0002\u091c\u091b\u0003\u0002\u0002\u0002\u091c\u091d\u0003",
    "\u0002\u0002\u0002\u091d\u091e\u0003\u0002\u0002\u0002\u091e\u091f\u0005",
    "\u0176\u00bc\u0002\u091f\u0921\u0003\u0002\u0002\u0002\u0920\u090c\u0003",
    "\u0002\u0002\u0002\u0920\u0910\u0003\u0002\u0002\u0002\u0920\u0918\u0003",
    "\u0002\u0002\u0002\u0921\u0173\u0003\u0002\u0002\u0002\u0922\u0924\u0005",
    "\u000e\b\u0002\u0923\u0922\u0003\u0002\u0002\u0002\u0923\u0924\u0003",
    "\u0002\u0002\u0002\u0924\u0925\u0003\u0002\u0002\u0002\u0925\u0928\u0005",
    "\u014e\u00a8\u0002\u0926\u0928\u0005\u00c8e\u0002\u0927\u0923\u0003",
    "\u0002\u0002\u0002\u0927\u0926\u0003\u0002\u0002\u0002\u0928\u0175\u0003",
    "\u0002\u0002\u0002\u0929\u092a\u0005\u0174\u00bb\u0002\u092a\u0177\u0003",
    "\u0002\u0002\u0002\u092b\u092c\t\n\u0002\u0002\u092c\u0179\u0003\u0002",
    "\u0002\u0002\u092d\u092e\u0007/\u0002\u0002\u092e\u092f\u0005\u017c",
    "\u00bf\u0002\u092f\u017b\u0003\u0002\u0002\u0002\u0930\u0932\u0005\u00c0",
    "a\u0002\u0931\u0933\u0005\u017e\u00c0\u0002\u0932\u0931\u0003\u0002",
    "\u0002\u0002\u0932\u0933\u0003\u0002\u0002\u0002\u0933\u017d\u0003\u0002",
    "\u0002\u0002\u0934\u0936\u0005\u0120\u0091\u0002\u0935\u0937\u0005\u017e",
    "\u00c0\u0002\u0936\u0935\u0003\u0002\u0002\u0002\u0936\u0937\u0003\u0002",
    "\u0002\u0002\u0937\u017f\u0003\u0002\u0002\u0002\u0938\u0939\u0007y",
    "\u0002\u0002\u0939\u093a\u0005\u0182\u00c2\u0002\u093a\u0181\u0003\u0002",
    "\u0002\u0002\u093b\u093d\u0005\u0184\u00c3\u0002\u093c\u093e\u0007~",
    "\u0002\u0002\u093d\u093c\u0003\u0002\u0002\u0002\u093d\u093e\u0003\u0002",
    "\u0002\u0002\u093e\u0947\u0003\u0002\u0002\u0002\u093f\u0941\u0005\u0184",
    "\u00c3\u0002\u0940\u0942\u0007~\u0002\u0002\u0941\u0940\u0003\u0002",
    "\u0002\u0002\u0941\u0942\u0003\u0002\u0002\u0002\u0942\u0943\u0003\u0002",
    "\u0002\u0002\u0943\u0944\u0007u\u0002\u0002\u0944\u0945\u0005\u0182",
    "\u00c2\u0002\u0945\u0947\u0003\u0002\u0002\u0002\u0946\u093b\u0003\u0002",
    "\u0002\u0002\u0946\u093f\u0003\u0002\u0002\u0002\u0947\u0183\u0003\u0002",
    "\u0002\u0002\u0948\u0949\u0005\u0186\u00c4\u0002\u0949\u094b\u0007P",
    "\u0002\u0002\u094a\u094c\u0005&\u0014\u0002\u094b\u094a\u0003\u0002",
    "\u0002\u0002\u094b\u094c\u0003\u0002\u0002\u0002\u094c\u094d\u0003\u0002",
    "\u0002\u0002\u094d\u094e\u0007Q\u0002\u0002\u094e\u0953\u0003\u0002",
    "\u0002\u0002\u094f\u0950\u0005\u0186\u00c4\u0002\u0950\u0951\u0005\u014c",
    "\u00a7\u0002\u0951\u0953\u0003\u0002\u0002\u0002\u0952\u0948\u0003\u0002",
    "\u0002\u0002\u0952\u094f\u0003\u0002\u0002\u0002\u0953\u0185\u0003\u0002",
    "\u0002\u0002\u0954\u0957\u0005\u0174\u00bb\u0002\u0955\u0957\u0007\u007f",
    "\u0002\u0002\u0956\u0954\u0003\u0002\u0002\u0002\u0956\u0955\u0003\u0002",
    "\u0002\u0002\u0957\u0187\u0003\u0002\u0002\u0002\u0958\u0959\u0007/",
    "\u0002\u0002\u0959\u095a\u0005\u01bc\u00df\u0002\u095a\u0189\u0003\u0002",
    "\u0002\u0002\u095b\u095c\u0007/\u0002\u0002\u095c\u095d\u0007\u0088",
    "\u0002\u0002\u095d\u0961\u0007\u007f\u0002\u0002\u095e\u095f\u0007/",
    "\u0002\u0002\u095f\u0961\u0007\u008c\u0002\u0002\u0960\u095b\u0003\u0002",
    "\u0002\u0002\u0960\u095e\u0003\u0002\u0002\u0002\u0961\u018b\u0003\u0002",
    "\u0002\u0002\u0962\u0963\u0007?\u0002\u0002\u0963\u0964\u0007a\u0002",
    "\u0002\u0964\u0965\u0005\u018e\u00c8\u0002\u0965\u0966\u0007b\u0002",
    "\u0002\u0966\u0967\u0005\u0094K\u0002\u0967\u018d\u0003\u0002\u0002",
    "\u0002\u0968\u0969\b\u00c8\u0001\u0002\u0969\u096a\u0005\u0190\u00c9",
    "\u0002\u096a\u0970\u0003\u0002\u0002\u0002\u096b\u096c\f\u0003\u0002",
    "\u0002\u096c\u096d\u0007u\u0002\u0002\u096d\u096f\u0005\u0190\u00c9",
    "\u0002\u096e\u096b\u0003\u0002\u0002\u0002\u096f\u0972\u0003\u0002\u0002",
    "\u0002\u0970\u096e\u0003\u0002\u0002\u0002\u0970\u0971\u0003\u0002\u0002",
    "\u0002\u0971\u018f\u0003\u0002\u0002\u0002\u0972\u0970\u0003\u0002\u0002",
    "\u0002\u0973\u0976\u0005\u0192\u00ca\u0002\u0974\u0976\u0005\u013a\u009e",
    "\u0002\u0975\u0973\u0003\u0002\u0002\u0002\u0975\u0974\u0003\u0002\u0002",
    "\u0002\u0976\u0191\u0003\u0002\u0002\u0002\u0977\u0979\u0007\u000f\u0002",
    "\u0002\u0978\u097a\u0007~\u0002\u0002\u0979\u0978\u0003\u0002\u0002",
    "\u0002\u0979\u097a\u0003\u0002\u0002\u0002\u097a\u097c\u0003\u0002\u0002",
    "\u0002\u097b\u097d\u0007\u007f\u0002\u0002\u097c\u097b\u0003\u0002\u0002",
    "\u0002\u097c\u097d\u0003\u0002\u0002\u0002\u097d\u09a8\u0003\u0002\u0002",
    "\u0002\u097e\u0980\u0007\u000f\u0002\u0002\u097f\u0981\u0007\u007f\u0002",
    "\u0002\u0980\u097f\u0003\u0002\u0002\u0002\u0980\u0981\u0003\u0002\u0002",
    "\u0002\u0981\u0982\u0003\u0002\u0002\u0002\u0982\u0983\u0007`\u0002",
    "\u0002\u0983\u09a8\u0005\u012a\u0096\u0002\u0984\u0986\u0007G\u0002",
    "\u0002\u0985\u0987\u0007~\u0002\u0002\u0986\u0985\u0003\u0002\u0002",
    "\u0002\u0986\u0987\u0003\u0002\u0002\u0002\u0987\u0989\u0003\u0002\u0002",
    "\u0002\u0988\u098a\u0007\u007f\u0002\u0002\u0989\u0988\u0003\u0002\u0002",
    "\u0002\u0989\u098a\u0003\u0002\u0002\u0002\u098a\u09a8\u0003\u0002\u0002",
    "\u0002\u098b\u098d\u0007G\u0002\u0002\u098c\u098e\u0007\u007f\u0002",
    "\u0002\u098d\u098c\u0003\u0002\u0002\u0002\u098d\u098e\u0003\u0002\u0002",
    "\u0002\u098e\u098f\u0003\u0002\u0002\u0002\u098f\u0990\u0007`\u0002",
    "\u0002\u0990\u09a8\u0005\u012a\u0096\u0002\u0991\u0992\u0007?\u0002",
    "\u0002\u0992\u0993\u0007a\u0002\u0002\u0993\u0994\u0005\u018e\u00c8",
    "\u0002\u0994\u0995\u0007b\u0002\u0002\u0995\u0997\u0007\u000f\u0002",
    "\u0002\u0996\u0998\u0007~\u0002\u0002\u0997\u0996\u0003\u0002\u0002",
    "\u0002\u0997\u0998\u0003\u0002\u0002\u0002\u0998\u099a\u0003\u0002\u0002",
    "\u0002\u0999\u099b\u0007\u007f\u0002\u0002\u099a\u0999\u0003\u0002\u0002",
    "\u0002\u099a\u099b\u0003\u0002\u0002\u0002\u099b\u09a8\u0003\u0002\u0002",
    "\u0002\u099c\u099d\u0007?\u0002\u0002\u099d\u099e\u0007a\u0002\u0002",
    "\u099e\u099f\u0005\u018e\u00c8\u0002\u099f\u09a0\u0007b\u0002\u0002",
    "\u09a0\u09a2\u0007\u000f\u0002\u0002\u09a1\u09a3\u0007\u007f\u0002\u0002",
    "\u09a2\u09a1\u0003\u0002\u0002\u0002\u09a2\u09a3\u0003\u0002\u0002\u0002",
    "\u09a3\u09a4\u0003\u0002\u0002\u0002\u09a4\u09a5\u0007`\u0002\u0002",
    "\u09a5\u09a6\u0005\u0006\u0004\u0002\u09a6\u09a8\u0003\u0002\u0002\u0002",
    "\u09a7\u0977\u0003\u0002\u0002\u0002\u09a7\u097e\u0003\u0002\u0002\u0002",
    "\u09a7\u0984\u0003\u0002\u0002\u0002\u09a7\u098b\u0003\u0002\u0002\u0002",
    "\u09a7\u0991\u0003\u0002\u0002\u0002\u09a7\u099c\u0003\u0002\u0002\u0002",
    "\u09a8\u0193\u0003\u0002\u0002\u0002\u09a9\u09aa\u0005\u0198\u00cd\u0002",
    "\u09aa\u09ac\u0007a\u0002\u0002\u09ab\u09ad\u0005\u019a\u00ce\u0002",
    "\u09ac\u09ab\u0003\u0002\u0002\u0002\u09ac\u09ad\u0003\u0002\u0002\u0002",
    "\u09ad\u09ae\u0003\u0002\u0002\u0002\u09ae\u09af\u0007b\u0002\u0002",
    "\u09af\u0195\u0003\u0002\u0002\u0002\u09b0\u09c0\u0005\u0194\u00cb\u0002",
    "\u09b1\u09b2\u0005\u0188\u00c5\u0002\u09b2\u09b4\u0007a\u0002\u0002",
    "\u09b3\u09b5\u0005\u019a\u00ce\u0002\u09b4\u09b3\u0003\u0002\u0002\u0002",
    "\u09b4\u09b5\u0003\u0002\u0002\u0002\u09b5\u09b6\u0003\u0002\u0002\u0002",
    "\u09b6\u09b7\u0007b\u0002\u0002\u09b7\u09c0\u0003\u0002\u0002\u0002",
    "\u09b8\u09b9\u0005\u018a\u00c6\u0002\u09b9\u09bb\u0007a\u0002\u0002",
    "\u09ba\u09bc\u0005\u019a\u00ce\u0002\u09bb\u09ba\u0003\u0002\u0002\u0002",
    "\u09bb\u09bc\u0003\u0002\u0002\u0002\u09bc\u09bd\u0003\u0002\u0002\u0002",
    "\u09bd\u09be\u0007b\u0002\u0002\u09be\u09c0\u0003\u0002\u0002\u0002",
    "\u09bf\u09b0\u0003\u0002\u0002\u0002\u09bf\u09b1\u0003\u0002\u0002\u0002",
    "\u09bf\u09b8\u0003\u0002\u0002\u0002\u09c0\u0197\u0003\u0002\u0002\u0002",
    "\u09c1\u09c2\u0007\u007f\u0002\u0002\u09c2\u0199\u0003\u0002\u0002\u0002",
    "\u09c3\u09c4\b\u00ce\u0001\u0002\u09c4\u09c6\u0005\u019c\u00cf\u0002",
    "\u09c5\u09c7\u0007~\u0002\u0002\u09c6\u09c5\u0003\u0002\u0002\u0002",
    "\u09c6\u09c7\u0003\u0002\u0002\u0002\u09c7\u09d0\u0003\u0002\u0002\u0002",
    "\u09c8\u09c9\f\u0003\u0002\u0002\u09c9\u09ca\u0007u\u0002\u0002\u09ca",
    "\u09cc\u0005\u019c\u00cf\u0002\u09cb\u09cd\u0007~\u0002\u0002\u09cc",
    "\u09cb\u0003\u0002\u0002\u0002\u09cc\u09cd\u0003\u0002\u0002\u0002\u09cd",
    "\u09cf\u0003\u0002\u0002\u0002\u09ce\u09c8\u0003\u0002\u0002\u0002\u09cf",
    "\u09d2\u0003\u0002\u0002\u0002\u09d0\u09ce\u0003\u0002\u0002\u0002\u09d0",
    "\u09d1\u0003\u0002\u0002\u0002\u09d1\u019b\u0003\u0002\u0002\u0002\u09d2",
    "\u09d0\u0003\u0002\u0002\u0002\u09d3\u09d7\u0005b2\u0002\u09d4\u09d7",
    "\u0005\u012a\u0096\u0002\u09d5\u09d7\u0005\u0006\u0004\u0002\u09d6\u09d3",
    "\u0003\u0002\u0002\u0002\u09d6\u09d4\u0003\u0002\u0002\u0002\u09d6\u09d5",
    "\u0003\u0002\u0002\u0002\u09d7\u019d\u0003\u0002\u0002\u0002\u09d8\u09d9",
    "\u0007G\u0002\u0002\u09d9\u09da\u0005\u000e\b\u0002\u09da\u09db\u0007",
    "\u007f\u0002\u0002\u09db\u09e4\u0003\u0002\u0002\u0002\u09dc\u09dd\u0007",
    "G\u0002\u0002\u09dd\u09df\u0005\u000e\b\u0002\u09de\u09e0\u0007?\u0002",
    "\u0002\u09df\u09de\u0003\u0002\u0002\u0002\u09df\u09e0\u0003\u0002\u0002",
    "\u0002\u09e0\u09e1\u0003\u0002\u0002\u0002\u09e1\u09e2\u0005\u0194\u00cb",
    "\u0002\u09e2\u09e4\u0003\u0002\u0002\u0002\u09e3\u09d8\u0003\u0002\u0002",
    "\u0002\u09e3\u09dc\u0003\u0002\u0002\u0002\u09e4\u019f\u0003\u0002\u0002",
    "\u0002\u09e5\u09e7\u0007\u001f\u0002\u0002\u09e6\u09e5\u0003\u0002\u0002",
    "\u0002\u09e6\u09e7\u0003\u0002\u0002\u0002\u09e7\u09e8\u0003\u0002\u0002",
    "\u0002\u09e8\u09e9\u0007?\u0002\u0002\u09e9\u09ea\u0005\u0094K\u0002",
    "\u09ea\u01a1\u0003\u0002\u0002\u0002\u09eb\u09ec\u0007?\u0002\u0002",
    "\u09ec\u09ed\u0007a\u0002\u0002\u09ed\u09ee\u0007b\u0002\u0002\u09ee",
    "\u09ef\u0005\u0094K\u0002\u09ef\u01a3\u0003\u0002\u0002\u0002\u09f0",
    "\u09f1\u0007D\u0002\u0002\u09f1\u09f2\u0005j6\u0002\u09f2\u09f3\u0005",
    "\u01a8\u00d5\u0002\u09f3\u01a5\u0003\u0002\u0002\u0002\u09f4\u09f6\u0007",
    "D\u0002\u0002\u09f5\u09f7\u0005\u0180\u00c1\u0002\u09f6\u09f5\u0003",
    "\u0002\u0002\u0002\u09f6\u09f7\u0003\u0002\u0002\u0002\u09f7\u09f8\u0003",
    "\u0002\u0002\u0002\u09f8\u09f9\u0005j6\u0002\u09f9\u09fa\u0005\u01a8",
    "\u00d5\u0002\u09fa\u01a7\u0003\u0002\u0002\u0002\u09fb\u09fd\u0005\u01aa",
    "\u00d6\u0002\u09fc\u09fe\u0005\u01a8\u00d5\u0002\u09fd\u09fc\u0003\u0002",
    "\u0002\u0002\u09fd\u09fe\u0003\u0002\u0002\u0002\u09fe\u01a9\u0003\u0002",
    "\u0002\u0002\u09ff\u0a00\u0007\u000b\u0002\u0002\u0a00\u0a01\u0007P",
    "\u0002\u0002\u0a01\u0a02\u0005\u01ac\u00d7\u0002\u0a02\u0a03\u0007Q",
    "\u0002\u0002\u0a03\u0a04\u0005j6\u0002\u0a04\u01ab\u0003\u0002\u0002",
    "\u0002\u0a05\u0a07\u0005\u00fc\u007f\u0002\u0a06\u0a05\u0003\u0002\u0002",
    "\u0002\u0a06\u0a07\u0003\u0002\u0002\u0002\u0a07\u0a08\u0003\u0002\u0002",
    "\u0002\u0a08\u0a09\u0005\u00c0a\u0002\u0a09\u0a0a\u0005\u0116\u008c",
    "\u0002\u0a0a\u0a14\u0003\u0002\u0002\u0002\u0a0b\u0a0d\u0005\u00fc\u007f",
    "\u0002\u0a0c\u0a0b\u0003\u0002\u0002\u0002\u0a0c\u0a0d\u0003\u0002\u0002",
    "\u0002\u0a0d\u0a0e\u0003\u0002\u0002\u0002\u0a0e\u0a10\u0005\u00c0a",
    "\u0002\u0a0f\u0a11\u0005\u012c\u0097\u0002\u0a10\u0a0f\u0003\u0002\u0002",
    "\u0002\u0a10\u0a11\u0003\u0002\u0002\u0002\u0a11\u0a14\u0003\u0002\u0002",
    "\u0002\u0a12\u0a14\u0007~\u0002\u0002\u0a13\u0a06\u0003\u0002\u0002",
    "\u0002\u0a13\u0a0c\u0003\u0002\u0002\u0002\u0a13\u0a12\u0003\u0002\u0002",
    "\u0002\u0a14\u01ad\u0003\u0002\u0002\u0002\u0a15\u0a17\u0007B\u0002",
    "\u0002\u0a16\u0a18\u0005\\/\u0002\u0a17\u0a16\u0003\u0002\u0002\u0002",
    "\u0a17\u0a18\u0003\u0002\u0002\u0002\u0a18\u01af\u0003\u0002\u0002\u0002",
    "\u0a19\u0a1c\u0005\u01b2\u00da\u0002\u0a1a\u0a1c\u0005\u01b6\u00dc\u0002",
    "\u0a1b\u0a19\u0003\u0002\u0002\u0002\u0a1b\u0a1a\u0003\u0002\u0002\u0002",
    "\u0a1c\u01b1\u0003\u0002\u0002\u0002\u0a1d\u0a1e\u0007B\u0002\u0002",
    "\u0a1e\u0a20\u0007P\u0002\u0002\u0a1f\u0a21\u0005\u01b4\u00db\u0002",
    "\u0a20\u0a1f\u0003\u0002\u0002\u0002\u0a20\u0a21\u0003\u0002\u0002\u0002",
    "\u0a21\u0a22\u0003\u0002\u0002\u0002\u0a22\u0a23\u0007Q\u0002\u0002",
    "\u0a23\u01b3\u0003\u0002\u0002\u0002\u0a24\u0a25\b\u00db\u0001\u0002",
    "\u0a25\u0a27\u0005\u012a\u0096\u0002\u0a26\u0a28\u0007~\u0002\u0002",
    "\u0a27\u0a26\u0003\u0002\u0002\u0002\u0a27\u0a28\u0003\u0002\u0002\u0002",
    "\u0a28\u0a31\u0003\u0002\u0002\u0002\u0a29\u0a2a\f\u0003\u0002\u0002",
    "\u0a2a\u0a2b\u0007u\u0002\u0002\u0a2b\u0a2d\u0005\u012a\u0096\u0002",
    "\u0a2c\u0a2e\u0007~\u0002\u0002\u0a2d\u0a2c\u0003\u0002\u0002\u0002",
    "\u0a2d\u0a2e\u0003\u0002\u0002\u0002\u0a2e\u0a30\u0003\u0002\u0002\u0002",
    "\u0a2f\u0a29\u0003\u0002\u0002\u0002\u0a30\u0a33\u0003\u0002\u0002\u0002",
    "\u0a31\u0a2f\u0003\u0002\u0002\u0002\u0a31\u0a32\u0003\u0002\u0002\u0002",
    "\u0a32\u01b5\u0003\u0002\u0002\u0002\u0a33\u0a31\u0003\u0002\u0002\u0002",
    "\u0a34\u0a35\u0007-\u0002\u0002\u0a35\u0a36\u0007P\u0002\u0002\u0a36",
    "\u0a37\u0005b2\u0002\u0a37\u0a38\u0007Q\u0002\u0002\u0a38\u0a3b\u0003",
    "\u0002\u0002\u0002\u0a39\u0a3b\u0007-\u0002\u0002\u0a3a\u0a34\u0003",
    "\u0002\u0002\u0002\u0a3a\u0a39\u0003\u0002\u0002\u0002\u0a3b\u01b7\u0003",
    "\u0002\u0002\u0002\u0a3c\u0a3d\u0007b\u0002\u0002\u0a3d\u0a3e\u0007",
    "b\u0002\u0002\u0a3e\u01b9\u0003\u0002\u0002\u0002\u0a3f\u0a40\u0007",
    "b\u0002\u0002\u0a40\u0a41\u0007b\u0002\u0002\u0a41\u0a42\u0007`\u0002",
    "\u0002\u0a42\u01bb\u0003\u0002\u0002\u0002\u0a43\u0a74\u0007,\u0002",
    "\u0002\u0a44\u0a74\u0007\u0016\u0002\u0002\u0a45\u0a46\u0007,\u0002",
    "\u0002\u0a46\u0a47\u0007R\u0002\u0002\u0a47\u0a74\u0007S\u0002\u0002",
    "\u0a48\u0a49\u0007\u0016\u0002\u0002\u0a49\u0a4a\u0007R\u0002\u0002",
    "\u0a4a\u0a74\u0007S\u0002\u0002\u0a4b\u0a74\u0007V\u0002\u0002\u0a4c",
    "\u0a74\u0007W\u0002\u0002\u0a4d\u0a74\u0007X\u0002\u0002\u0a4e\u0a74",
    "\u0007Y\u0002\u0002\u0a4f\u0a74\u0007Z\u0002\u0002\u0a50\u0a74\u0007",
    "[\u0002\u0002\u0a51\u0a74\u0007\\\u0002\u0002\u0a52\u0a74\u0007]\u0002",
    "\u0002\u0a53\u0a74\u0007^\u0002\u0002\u0a54\u0a74\u0007_\u0002\u0002",
    "\u0a55\u0a74\u0007`\u0002\u0002\u0a56\u0a74\u0007a\u0002\u0002\u0a57",
    "\u0a74\u0007b\u0002\u0002\u0a58\u0a74\u0007c\u0002\u0002\u0a59\u0a74",
    "\u0007d\u0002\u0002\u0a5a\u0a74\u0007e\u0002\u0002\u0a5b\u0a74\u0007",
    "f\u0002\u0002\u0a5c\u0a74\u0007g\u0002\u0002\u0a5d\u0a74\u0007h\u0002",
    "\u0002\u0a5e\u0a74\u0007i\u0002\u0002\u0a5f\u0a74\u0007j\u0002\u0002",
    "\u0a60\u0a74\u0007k\u0002\u0002\u0a61\u0a74\u0005\u01b8\u00dd\u0002",
    "\u0a62\u0a74\u0005\u01ba\u00de\u0002\u0a63\u0a74\u0007l\u0002\u0002",
    "\u0a64\u0a74\u0007m\u0002\u0002\u0a65\u0a74\u0007n\u0002\u0002\u0a66",
    "\u0a74\u0007o\u0002\u0002\u0a67\u0a74\u0007p\u0002\u0002\u0a68\u0a74",
    "\u0007q\u0002\u0002\u0a69\u0a74\u0007r\u0002\u0002\u0a6a\u0a74\u0007",
    "s\u0002\u0002\u0a6b\u0a74\u0007t\u0002\u0002\u0a6c\u0a74\u0007u\u0002",
    "\u0002\u0a6d\u0a74\u0007v\u0002\u0002\u0a6e\u0a74\u0007w\u0002\u0002",
    "\u0a6f\u0a70\u0007P\u0002\u0002\u0a70\u0a74\u0007Q\u0002\u0002\u0a71",
    "\u0a72\u0007R\u0002\u0002\u0a72\u0a74\u0007S\u0002\u0002\u0a73\u0a43",
    "\u0003\u0002\u0002\u0002\u0a73\u0a44\u0003\u0002\u0002\u0002\u0a73\u0a45",
    "\u0003\u0002\u0002\u0002\u0a73\u0a48\u0003\u0002\u0002\u0002\u0a73\u0a4b",
    "\u0003\u0002\u0002\u0002\u0a73\u0a4c\u0003\u0002\u0002\u0002\u0a73\u0a4d",
    "\u0003\u0002\u0002\u0002\u0a73\u0a4e\u0003\u0002\u0002\u0002\u0a73\u0a4f",
    "\u0003\u0002\u0002\u0002\u0a73\u0a50\u0003\u0002\u0002\u0002\u0a73\u0a51",
    "\u0003\u0002\u0002\u0002\u0a73\u0a52\u0003\u0002\u0002\u0002\u0a73\u0a53",
    "\u0003\u0002\u0002\u0002\u0a73\u0a54\u0003\u0002\u0002\u0002\u0a73\u0a55",
    "\u0003\u0002\u0002\u0002\u0a73\u0a56\u0003\u0002\u0002\u0002\u0a73\u0a57",
    "\u0003\u0002\u0002\u0002\u0a73\u0a58\u0003\u0002\u0002\u0002\u0a73\u0a59",
    "\u0003\u0002\u0002\u0002\u0a73\u0a5a\u0003\u0002\u0002\u0002\u0a73\u0a5b",
    "\u0003\u0002\u0002\u0002\u0a73\u0a5c\u0003\u0002\u0002\u0002\u0a73\u0a5d",
    "\u0003\u0002\u0002\u0002\u0a73\u0a5e\u0003\u0002\u0002\u0002\u0a73\u0a5f",
    "\u0003\u0002\u0002\u0002\u0a73\u0a60\u0003\u0002\u0002\u0002\u0a73\u0a61",
    "\u0003\u0002\u0002\u0002\u0a73\u0a62\u0003\u0002\u0002\u0002\u0a73\u0a63",
    "\u0003\u0002\u0002\u0002\u0a73\u0a64\u0003\u0002\u0002\u0002\u0a73\u0a65",
    "\u0003\u0002\u0002\u0002\u0a73\u0a66\u0003\u0002\u0002\u0002\u0a73\u0a67",
    "\u0003\u0002\u0002\u0002\u0a73\u0a68\u0003\u0002\u0002\u0002\u0a73\u0a69",
    "\u0003\u0002\u0002\u0002\u0a73\u0a6a\u0003\u0002\u0002\u0002\u0a73\u0a6b",
    "\u0003\u0002\u0002\u0002\u0a73\u0a6c\u0003\u0002\u0002\u0002\u0a73\u0a6d",
    "\u0003\u0002\u0002\u0002\u0a73\u0a6e\u0003\u0002\u0002\u0002\u0a73\u0a6f",
    "\u0003\u0002\u0002\u0002\u0a73\u0a71\u0003\u0002\u0002\u0002\u0a74\u01bd",
    "\u0003\u0002\u0002\u0002\u0a75\u0a7d\u0005\u01c0\u00e1\u0002\u0a76\u0a7d",
    "\u0005\u01c2\u00e2\u0002\u0a77\u0a7d\u0005\u01c4\u00e3\u0002\u0a78\u0a7d",
    "\u0005\u01c6\u00e4\u0002\u0a79\u0a7d\u0005\u01c8\u00e5\u0002\u0a7a\u0a7d",
    "\u0005\u01ca\u00e6\u0002\u0a7b\u0a7d\u0005\u01cc\u00e7\u0002\u0a7c\u0a75",
    "\u0003\u0002\u0002\u0002\u0a7c\u0a76\u0003\u0002\u0002\u0002\u0a7c\u0a77",
    "\u0003\u0002\u0002\u0002\u0a7c\u0a78\u0003\u0002\u0002\u0002\u0a7c\u0a79",
    "\u0003\u0002\u0002\u0002\u0a7c\u0a7a\u0003\u0002\u0002\u0002\u0a7c\u0a7b",
    "\u0003\u0002\u0002\u0002\u0a7d\u01bf\u0003\u0002\u0002\u0002\u0a7e\u0a7f",
    "\u0007\u0080\u0002\u0002\u0a7f\u01c1\u0003\u0002\u0002\u0002\u0a80\u0a81",
    "\u0007\u0086\u0002\u0002\u0a81\u01c3\u0003\u0002\u0002\u0002\u0a82\u0a83",
    "\u0007\u0087\u0002\u0002\u0a83\u01c5\u0003\u0002\u0002\u0002\u0a84\u0a85",
    "\u0007\u0088\u0002\u0002\u0a85\u01c7\u0003\u0002\u0002\u0002\u0a86\u0a87",
    "\u0007\u0089\u0002\u0002\u0a87\u01c9\u0003\u0002\u0002\u0002\u0a88\u0a89",
    "\u0007.\u0002\u0002\u0a89\u01cb\u0003\u0002\u0002\u0002\u0a8a\u0a8b",
    "\t\u000b\u0002\u0002\u0a8b\u01cd\u0003\u0002\u0002\u0002\u015d\u01cf",
    "\u01d9\u01dd\u01e1\u01ec\u01f0\u01ff\u0206\u020b\u020d\u0212\u0218\u0222",
    "\u0229\u022f\u0233\u0238\u023e\u0245\u024b\u024e\u0251\u0254\u025d\u0264",
    "\u0298\u02a7\u02ad\u02b3\u02c0\u02c2\u02c8\u02d7\u02dd\u02e3\u0303\u030a",
    "\u030e\u0312\u0315\u0319\u031f\u0321\u0329\u032d\u0330\u0337\u033e\u0342",
    "\u0347\u034b\u034e\u0353\u0359\u0366\u0371\u0373\u0382\u0384\u0390\u0392",
    "\u039f\u03a1\u03b3\u03b5\u03c1\u03c3\u03ce\u03d9\u03e4\u03ef\u03fa\u0404",
    "\u040c\u0419\u0423\u042a\u042e\u0432\u0436\u043a\u043e\u0442\u0446\u044a",
    "\u044e\u0452\u0458\u045b\u045e\u0464\u046c\u0471\u0474\u047a\u0482\u0493",
    "\u049d\u04a5\u04ab\u04bf\u04c3\u04d3\u04d6\u04dd\u04eb\u04f2\u04f6\u04ff",
    "\u0503\u050d\u0510\u0514\u0517\u051b\u051e\u0520\u052d\u0536\u053a\u053f",
    "\u0549\u054c\u0550\u0558\u055b\u0560\u0566\u056b\u0570\u0576\u0579\u057e",
    "\u0583\u0594\u0598\u059d\u05a4\u05a8\u05ad\u05b8\u05be\u05c2\u05c7\u05cb",
    "\u05d0\u05d3\u05e5\u05ed\u05f3\u05fe\u0602\u0605\u060f\u0615\u0618\u061f",
    "\u0629\u062d\u0630\u0633\u0637\u063c\u063e\u0642\u0646\u064f\u065c\u0664",
    "\u066a\u0670\u0674\u0677\u0680\u0689\u0691\u069c\u06a2\u06ad\u06b0\u06b5",
    "\u06c4\u06ca\u06d3\u06dd\u06e3\u06eb\u06ef\u06f3\u06f8\u06fd\u0704\u0706",
    "\u070b\u070f\u071d\u0723\u0732\u0739\u073e\u0745\u074a\u0752\u0758\u075f",
    "\u0763\u0765\u0767\u076e\u0771\u0774\u0777\u077c\u0780\u0783\u0787\u078b",
    "\u0790\u0793\u0795\u0799\u07a0\u07a6\u07aa\u07b0\u07b5\u07b7\u07bd\u07c1",
    "\u07c7\u07ce\u07d2\u07d4\u07d6\u07dd\u07e7\u07eb\u07ed\u07ef\u07f3\u07f6",
    "\u07fc\u0806\u080a\u0810\u0818\u081c\u081f\u0823\u0828\u082b\u082e\u0832",
    "\u0837\u0841\u084b\u0852\u0857\u085b\u0862\u0868\u086e\u0872\u0879\u087f",
    "\u0882\u0886\u0889\u088d\u0890\u0892\u0895\u089f\u08a4\u08a6\u08af\u08b5",
    "\u08b8\u08be\u08c2\u08cc\u08d1\u08d4\u08d9\u08dd\u08e0\u08e3\u08e7\u08f0",
    "\u08fe\u0904\u0908\u090c\u0910\u0914\u0918\u091c\u0920\u0923\u0927\u0932",
    "\u0936\u093d\u0941\u0946\u094b\u0952\u0956\u0960\u0970\u0975\u0979\u097c",
    "\u0980\u0986\u0989\u098d\u0997\u099a\u09a2\u09a7\u09ac\u09b4\u09bb\u09bf",
    "\u09c6\u09cc\u09d0\u09d6\u09df\u09e3\u09e6\u09f6\u09fd\u0a06\u0a0c\u0a10",
    "\u0a13\u0a17\u0a1b\u0a20\u0a27\u0a2d\u0a31\u0a3a\u0a73\u0a7c"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, "'alignas'", "'alignof'", "'asm'", "'auto'", 
                     "'bool'", "'break'", "'case'", "'catch'", "'char'", 
                     "'char16_t'", "'char32_t'", "'class'", "'const'", "'constexpr'", 
                     "'const_cast'", "'continue'", "'decltype'", "'default'", 
                     "'delete'", "'do'", "'double'", "'FILE'", "'dynamic_cast'", 
                     "'else'", "'enum'", "'explicit'", "'export'", "'extern'", 
                     "'false'", "'final'", "'float'", "'for'", "'friend'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                     "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                     "'operator'", "'override'", "'private'", "'protected'", 
                     "'public'", "'register'", "'reinterpret_cast'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", 
                     "'static_cast'", "'struct'", "'switch'", "'template'", 
                     "'this'", "'thread_local'", "'throw'", "'true'", "'try'", 
                     "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
                     "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", 
                     "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
                     "'~'", "'!'", "'='", "'<'", "'>'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<'", 
                     "'<<='", "'=='", "'!='", "'<='", "'>='", "'&&'", "'||'", 
                     "'++'", "'--'", "','", "'->*'", "'->'", "'?'", "':'", 
                     "'::'", "';'", "'.'", "'.*'", "'...'" ];

var symbolicNames = [ null, "Directive", "Alignas", "Alignof", "Asm", "Auto", 
                      "Bool", "Break", "Case", "Catch", "Char", "Char16", 
                      "Char32", "Class", "Const", "Constexpr", "Const_cast", 
                      "Continue", "Decltype", "Default", "Delete", "Do", 
                      "Double", "File", "Dynamic_cast", "Else", "Enum", 
                      "Explicit", "Export", "Extern", "False", "Final", 
                      "Float", "For", "Friend", "Goto", "If", "Inline", 
                      "Int", "Long", "Mutable", "Namespace", "New", "Noexcept", 
                      "Nullptr", "Operator", "Override", "Private", "Protected", 
                      "Public", "Register", "Reinterpret_cast", "Return", 
                      "Short", "Signed", "Sizeof", "Static", "Static_assert", 
                      "Static_cast", "Struct", "Switch", "Template", "This", 
                      "Thread_local", "Throw", "True", "Try", "Typedef", 
                      "Typeid", "Typename", "Union", "Unsigned", "Using", 
                      "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", 
                      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
                      "RightBrace", "Plus", "Minus", "Star", "Div", "Mod", 
                      "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", 
                      "Greater", "PlusAssign", "MinusAssign", "StarAssign", 
                      "DivAssign", "ModAssign", "XorAssign", "AndAssign", 
                      "OrAssign", "LeftShift", "LeftShiftAssign", "Equal", 
                      "NotEqual", "LessEqual", "GreaterEqual", "AndAnd", 
                      "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", 
                      "Arrow", "Question", "Colon", "Doublecolon", "Semi", 
                      "Dot", "DotStar", "Ellipsis", "Identifier", "Integerliteral", 
                      "Decimalliteral", "Octalliteral", "Hexadecimalliteral", 
                      "Binaryliteral", "Integersuffix", "Characterliteral", 
                      "Floatingliteral", "Stringliteral", "Booleanliteral", 
                      "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
                      "Userdefinedstringliteral", "Userdefinedcharacterliteral", 
                      "Whitespace", "Newline", "BlockComment", "LineComment" ];

var ruleNames =  [ "translationunit", "primaryexpression", "idexpression", 
                   "identexpression", "unqualifiedid", "qualifiedid", "nestednamespecifier", 
                   "lambdaexpression", "lambdaintroducer", "lambdacapture", 
                   "capturedefault", "capturelist", "capture", "simplecapture", 
                   "initcapture", "lambdadeclarator", "idexpressionlapper", 
                   "postfixexpression", "expressionlist", "pseudodestructorname", 
                   "binaryexpression", "unaryexpression", "typeidlapper", 
                   "unaryoperator", "newexpression", "newplacement", "newtypeid", 
                   "newdeclarator", "noptrnewdeclarator", "newinitializer", 
                   "deleteexpression", "noexceptexpression", "castexpression", 
                   "pmexpression", "multiplicativeexpression", "additiveexpression", 
                   "shiftexpression", "relationalexpression", "equalityexpression", 
                   "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
                   "logicalandexpression", "logicalorexpression", "conditionalexpression", 
                   "assignmentexpression", "assignmentoperator", "expression", 
                   "constantexpression", "statement", "labeledstatement", 
                   "expressionstatement", "compoundstatement", "statementseq", 
                   "selectionstatement", "switchstatement", "condition", 
                   "whilestatement", "dowhilestatement", "iterationstatement", 
                   "enhancedForStatement", "forinitstatement", "forrangedeclaration", 
                   "forrangeinitializer", "jumpstatement", "breakStatement", 
                   "continueStatement", "returnStatement", "declarationstatement", 
                   "declarationseq", "myclassbody", "myclassspecifier", 
                   "myclasshead", "declaration", "blockdeclarationwithoutsimpledeclaration", 
                   "blockdeclaration", "aliasdeclaration", "variabledeclarationstatement", 
                   "variabledeclaration", "variableDeclaratorList", "variableDeclarator", 
                   "dims", "simpledeclaration", "static_assertdeclaration", 
                   "emptydeclaration", "attributedeclaration", "declspecifier", 
                   "declspecifierseq", "declspecifierwithouttype", "declspecifierseqwithouttype", 
                   "storageclassspecifier", "functionspecifier", "typedefname", 
                   "typespecifier", "trailingtypespecifier", "typespecifierseq", 
                   "trailingtypespecifierseq", "simpletypespecifier", "typename", 
                   "decltypespecifier", "elaboratedtypespecifier", "enumname", 
                   "enumspecifier", "enumhead", "opaqueenumdeclaration", 
                   "enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", 
                   "enumerator", "namespacename", "originalnamespacename", 
                   "namespacedefinition", "namednamespacedefinition", "originalnamespacedefinition", 
                   "extensionnamespacedefinition", "unnamednamespacedefinition", 
                   "namespacebody", "namespacealias", "namespacealiasdefinition", 
                   "qualifiednamespacespecifier", "usingdeclaration", "usingdirective", 
                   "asmdefinition", "linkagespecification", "attributespecifierseq", 
                   "attributespecifier", "alignmentspecifier", "attributelist", 
                   "attribute", "attributetoken", "attributescopedtoken", 
                   "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
                   "balancedtoken", "initdeclaratorlist", "initdeclarator", 
                   "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
                   "trailingreturntype", "ptroperator", "cvqualifierseq", 
                   "cvqualifier", "refqualifier", "declaratorid", "typeid", 
                   "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
                   "abstractpackdeclarator", "noptrabstractpackdeclarator", 
                   "parameterdeclarationclause", "parameterdeclarationlist", 
                   "parameterdeclaration", "functiondefinition", "functionheader", 
                   "functiondeclarator", "functionbody", "initializer", 
                   "braceorequalinitializer", "initializerclause", "initializerlist", 
                   "bracedinitlist", "myclassname", "classspecifier", "classbody", 
                   "classhead", "classheadname", "classvirtspecifier", "classkey", 
                   "memberspecification", "memberdeclaration", "membervariabledeclarationstatement", 
                   "membervariabledeclaration", "memberdeclaratorlist", 
                   "memberdeclarator", "virtspecifierseq", "virtspecifier", 
                   "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
                   "classordecltype", "basetypespecifier", "accessspecifier", 
                   "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
                   "ctorinitializer", "meminitializerlist", "meminitializer", 
                   "meminitializerid", "operatorfunctionid", "literaloperatorid", 
                   "templatedeclaration", "templateparameterlist", "templateparameter", 
                   "typeparameter", "simpletemplateid", "templateid", "templatename", 
                   "templateargumentlist", "templateargument", "typenamespecifier", 
                   "explicitinstantiation", "explicitspecialization", "tryblock", 
                   "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
                   "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
                   "typeidlist", "noexceptspecification", "rightShift", 
                   "rightShiftAssign", "operator", "literal", "integerliteral", 
                   "characterliteral", "floatingliteral", "stringliteral", 
                   "booleanliteral", "pointerliteral", "userdefinedliteral" ];

function CPP14Parser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CPP14Parser.prototype = Object.create(antlr4.Parser.prototype);
CPP14Parser.prototype.constructor = CPP14Parser;

Object.defineProperty(CPP14Parser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CPP14Parser.EOF = antlr4.Token.EOF;
CPP14Parser.Directive = 1;
CPP14Parser.Alignas = 2;
CPP14Parser.Alignof = 3;
CPP14Parser.Asm = 4;
CPP14Parser.Auto = 5;
CPP14Parser.Bool = 6;
CPP14Parser.Break = 7;
CPP14Parser.Case = 8;
CPP14Parser.Catch = 9;
CPP14Parser.Char = 10;
CPP14Parser.Char16 = 11;
CPP14Parser.Char32 = 12;
CPP14Parser.Class = 13;
CPP14Parser.Const = 14;
CPP14Parser.Constexpr = 15;
CPP14Parser.Const_cast = 16;
CPP14Parser.Continue = 17;
CPP14Parser.Decltype = 18;
CPP14Parser.Default = 19;
CPP14Parser.Delete = 20;
CPP14Parser.Do = 21;
CPP14Parser.Double = 22;
CPP14Parser.File = 23;
CPP14Parser.Dynamic_cast = 24;
CPP14Parser.Else = 25;
CPP14Parser.Enum = 26;
CPP14Parser.Explicit = 27;
CPP14Parser.Export = 28;
CPP14Parser.Extern = 29;
CPP14Parser.False = 30;
CPP14Parser.Final = 31;
CPP14Parser.Float = 32;
CPP14Parser.For = 33;
CPP14Parser.Friend = 34;
CPP14Parser.Goto = 35;
CPP14Parser.If = 36;
CPP14Parser.Inline = 37;
CPP14Parser.Int = 38;
CPP14Parser.Long = 39;
CPP14Parser.Mutable = 40;
CPP14Parser.Namespace = 41;
CPP14Parser.New = 42;
CPP14Parser.Noexcept = 43;
CPP14Parser.Nullptr = 44;
CPP14Parser.Operator = 45;
CPP14Parser.Override = 46;
CPP14Parser.Private = 47;
CPP14Parser.Protected = 48;
CPP14Parser.Public = 49;
CPP14Parser.Register = 50;
CPP14Parser.Reinterpret_cast = 51;
CPP14Parser.Return = 52;
CPP14Parser.Short = 53;
CPP14Parser.Signed = 54;
CPP14Parser.Sizeof = 55;
CPP14Parser.Static = 56;
CPP14Parser.Static_assert = 57;
CPP14Parser.Static_cast = 58;
CPP14Parser.Struct = 59;
CPP14Parser.Switch = 60;
CPP14Parser.Template = 61;
CPP14Parser.This = 62;
CPP14Parser.Thread_local = 63;
CPP14Parser.Throw = 64;
CPP14Parser.True = 65;
CPP14Parser.Try = 66;
CPP14Parser.Typedef = 67;
CPP14Parser.Typeid = 68;
CPP14Parser.Typename = 69;
CPP14Parser.Union = 70;
CPP14Parser.Unsigned = 71;
CPP14Parser.Using = 72;
CPP14Parser.Virtual = 73;
CPP14Parser.Void = 74;
CPP14Parser.Volatile = 75;
CPP14Parser.Wchar = 76;
CPP14Parser.While = 77;
CPP14Parser.LeftParen = 78;
CPP14Parser.RightParen = 79;
CPP14Parser.LeftBracket = 80;
CPP14Parser.RightBracket = 81;
CPP14Parser.LeftBrace = 82;
CPP14Parser.RightBrace = 83;
CPP14Parser.Plus = 84;
CPP14Parser.Minus = 85;
CPP14Parser.Star = 86;
CPP14Parser.Div = 87;
CPP14Parser.Mod = 88;
CPP14Parser.Caret = 89;
CPP14Parser.And = 90;
CPP14Parser.Or = 91;
CPP14Parser.Tilde = 92;
CPP14Parser.Not = 93;
CPP14Parser.Assign = 94;
CPP14Parser.Less = 95;
CPP14Parser.Greater = 96;
CPP14Parser.PlusAssign = 97;
CPP14Parser.MinusAssign = 98;
CPP14Parser.StarAssign = 99;
CPP14Parser.DivAssign = 100;
CPP14Parser.ModAssign = 101;
CPP14Parser.XorAssign = 102;
CPP14Parser.AndAssign = 103;
CPP14Parser.OrAssign = 104;
CPP14Parser.LeftShift = 105;
CPP14Parser.LeftShiftAssign = 106;
CPP14Parser.Equal = 107;
CPP14Parser.NotEqual = 108;
CPP14Parser.LessEqual = 109;
CPP14Parser.GreaterEqual = 110;
CPP14Parser.AndAnd = 111;
CPP14Parser.OrOr = 112;
CPP14Parser.PlusPlus = 113;
CPP14Parser.MinusMinus = 114;
CPP14Parser.Comma = 115;
CPP14Parser.ArrowStar = 116;
CPP14Parser.Arrow = 117;
CPP14Parser.Question = 118;
CPP14Parser.Colon = 119;
CPP14Parser.Doublecolon = 120;
CPP14Parser.Semi = 121;
CPP14Parser.Dot = 122;
CPP14Parser.DotStar = 123;
CPP14Parser.Ellipsis = 124;
CPP14Parser.Identifier = 125;
CPP14Parser.Integerliteral = 126;
CPP14Parser.Decimalliteral = 127;
CPP14Parser.Octalliteral = 128;
CPP14Parser.Hexadecimalliteral = 129;
CPP14Parser.Binaryliteral = 130;
CPP14Parser.Integersuffix = 131;
CPP14Parser.Characterliteral = 132;
CPP14Parser.Floatingliteral = 133;
CPP14Parser.Stringliteral = 134;
CPP14Parser.Booleanliteral = 135;
CPP14Parser.Userdefinedintegerliteral = 136;
CPP14Parser.Userdefinedfloatingliteral = 137;
CPP14Parser.Userdefinedstringliteral = 138;
CPP14Parser.Userdefinedcharacterliteral = 139;
CPP14Parser.Whitespace = 140;
CPP14Parser.Newline = 141;
CPP14Parser.BlockComment = 142;
CPP14Parser.LineComment = 143;

CPP14Parser.RULE_translationunit = 0;
CPP14Parser.RULE_primaryexpression = 1;
CPP14Parser.RULE_idexpression = 2;
CPP14Parser.RULE_identexpression = 3;
CPP14Parser.RULE_unqualifiedid = 4;
CPP14Parser.RULE_qualifiedid = 5;
CPP14Parser.RULE_nestednamespecifier = 6;
CPP14Parser.RULE_lambdaexpression = 7;
CPP14Parser.RULE_lambdaintroducer = 8;
CPP14Parser.RULE_lambdacapture = 9;
CPP14Parser.RULE_capturedefault = 10;
CPP14Parser.RULE_capturelist = 11;
CPP14Parser.RULE_capture = 12;
CPP14Parser.RULE_simplecapture = 13;
CPP14Parser.RULE_initcapture = 14;
CPP14Parser.RULE_lambdadeclarator = 15;
CPP14Parser.RULE_idexpressionlapper = 16;
CPP14Parser.RULE_postfixexpression = 17;
CPP14Parser.RULE_expressionlist = 18;
CPP14Parser.RULE_pseudodestructorname = 19;
CPP14Parser.RULE_binaryexpression = 20;
CPP14Parser.RULE_unaryexpression = 21;
CPP14Parser.RULE_typeidlapper = 22;
CPP14Parser.RULE_unaryoperator = 23;
CPP14Parser.RULE_newexpression = 24;
CPP14Parser.RULE_newplacement = 25;
CPP14Parser.RULE_newtypeid = 26;
CPP14Parser.RULE_newdeclarator = 27;
CPP14Parser.RULE_noptrnewdeclarator = 28;
CPP14Parser.RULE_newinitializer = 29;
CPP14Parser.RULE_deleteexpression = 30;
CPP14Parser.RULE_noexceptexpression = 31;
CPP14Parser.RULE_castexpression = 32;
CPP14Parser.RULE_pmexpression = 33;
CPP14Parser.RULE_multiplicativeexpression = 34;
CPP14Parser.RULE_additiveexpression = 35;
CPP14Parser.RULE_shiftexpression = 36;
CPP14Parser.RULE_relationalexpression = 37;
CPP14Parser.RULE_equalityexpression = 38;
CPP14Parser.RULE_andexpression = 39;
CPP14Parser.RULE_exclusiveorexpression = 40;
CPP14Parser.RULE_inclusiveorexpression = 41;
CPP14Parser.RULE_logicalandexpression = 42;
CPP14Parser.RULE_logicalorexpression = 43;
CPP14Parser.RULE_conditionalexpression = 44;
CPP14Parser.RULE_assignmentexpression = 45;
CPP14Parser.RULE_assignmentoperator = 46;
CPP14Parser.RULE_expression = 47;
CPP14Parser.RULE_constantexpression = 48;
CPP14Parser.RULE_statement = 49;
CPP14Parser.RULE_labeledstatement = 50;
CPP14Parser.RULE_expressionstatement = 51;
CPP14Parser.RULE_compoundstatement = 52;
CPP14Parser.RULE_statementseq = 53;
CPP14Parser.RULE_selectionstatement = 54;
CPP14Parser.RULE_switchstatement = 55;
CPP14Parser.RULE_condition = 56;
CPP14Parser.RULE_whilestatement = 57;
CPP14Parser.RULE_dowhilestatement = 58;
CPP14Parser.RULE_iterationstatement = 59;
CPP14Parser.RULE_enhancedForStatement = 60;
CPP14Parser.RULE_forinitstatement = 61;
CPP14Parser.RULE_forrangedeclaration = 62;
CPP14Parser.RULE_forrangeinitializer = 63;
CPP14Parser.RULE_jumpstatement = 64;
CPP14Parser.RULE_breakStatement = 65;
CPP14Parser.RULE_continueStatement = 66;
CPP14Parser.RULE_returnStatement = 67;
CPP14Parser.RULE_declarationstatement = 68;
CPP14Parser.RULE_declarationseq = 69;
CPP14Parser.RULE_myclassbody = 70;
CPP14Parser.RULE_myclassspecifier = 71;
CPP14Parser.RULE_myclasshead = 72;
CPP14Parser.RULE_declaration = 73;
CPP14Parser.RULE_blockdeclarationwithoutsimpledeclaration = 74;
CPP14Parser.RULE_blockdeclaration = 75;
CPP14Parser.RULE_aliasdeclaration = 76;
CPP14Parser.RULE_variabledeclarationstatement = 77;
CPP14Parser.RULE_variabledeclaration = 78;
CPP14Parser.RULE_variableDeclaratorList = 79;
CPP14Parser.RULE_variableDeclarator = 80;
CPP14Parser.RULE_dims = 81;
CPP14Parser.RULE_simpledeclaration = 82;
CPP14Parser.RULE_static_assertdeclaration = 83;
CPP14Parser.RULE_emptydeclaration = 84;
CPP14Parser.RULE_attributedeclaration = 85;
CPP14Parser.RULE_declspecifier = 86;
CPP14Parser.RULE_declspecifierseq = 87;
CPP14Parser.RULE_declspecifierwithouttype = 88;
CPP14Parser.RULE_declspecifierseqwithouttype = 89;
CPP14Parser.RULE_storageclassspecifier = 90;
CPP14Parser.RULE_functionspecifier = 91;
CPP14Parser.RULE_typedefname = 92;
CPP14Parser.RULE_typespecifier = 93;
CPP14Parser.RULE_trailingtypespecifier = 94;
CPP14Parser.RULE_typespecifierseq = 95;
CPP14Parser.RULE_trailingtypespecifierseq = 96;
CPP14Parser.RULE_simpletypespecifier = 97;
CPP14Parser.RULE_typename = 98;
CPP14Parser.RULE_decltypespecifier = 99;
CPP14Parser.RULE_elaboratedtypespecifier = 100;
CPP14Parser.RULE_enumname = 101;
CPP14Parser.RULE_enumspecifier = 102;
CPP14Parser.RULE_enumhead = 103;
CPP14Parser.RULE_opaqueenumdeclaration = 104;
CPP14Parser.RULE_enumkey = 105;
CPP14Parser.RULE_enumbase = 106;
CPP14Parser.RULE_enumeratorlist = 107;
CPP14Parser.RULE_enumeratordefinition = 108;
CPP14Parser.RULE_enumerator = 109;
CPP14Parser.RULE_namespacename = 110;
CPP14Parser.RULE_originalnamespacename = 111;
CPP14Parser.RULE_namespacedefinition = 112;
CPP14Parser.RULE_namednamespacedefinition = 113;
CPP14Parser.RULE_originalnamespacedefinition = 114;
CPP14Parser.RULE_extensionnamespacedefinition = 115;
CPP14Parser.RULE_unnamednamespacedefinition = 116;
CPP14Parser.RULE_namespacebody = 117;
CPP14Parser.RULE_namespacealias = 118;
CPP14Parser.RULE_namespacealiasdefinition = 119;
CPP14Parser.RULE_qualifiednamespacespecifier = 120;
CPP14Parser.RULE_usingdeclaration = 121;
CPP14Parser.RULE_usingdirective = 122;
CPP14Parser.RULE_asmdefinition = 123;
CPP14Parser.RULE_linkagespecification = 124;
CPP14Parser.RULE_attributespecifierseq = 125;
CPP14Parser.RULE_attributespecifier = 126;
CPP14Parser.RULE_alignmentspecifier = 127;
CPP14Parser.RULE_attributelist = 128;
CPP14Parser.RULE_attribute = 129;
CPP14Parser.RULE_attributetoken = 130;
CPP14Parser.RULE_attributescopedtoken = 131;
CPP14Parser.RULE_attributenamespace = 132;
CPP14Parser.RULE_attributeargumentclause = 133;
CPP14Parser.RULE_balancedtokenseq = 134;
CPP14Parser.RULE_balancedtoken = 135;
CPP14Parser.RULE_initdeclaratorlist = 136;
CPP14Parser.RULE_initdeclarator = 137;
CPP14Parser.RULE_declarator = 138;
CPP14Parser.RULE_ptrdeclarator = 139;
CPP14Parser.RULE_noptrdeclarator = 140;
CPP14Parser.RULE_parametersandqualifiers = 141;
CPP14Parser.RULE_trailingreturntype = 142;
CPP14Parser.RULE_ptroperator = 143;
CPP14Parser.RULE_cvqualifierseq = 144;
CPP14Parser.RULE_cvqualifier = 145;
CPP14Parser.RULE_refqualifier = 146;
CPP14Parser.RULE_declaratorid = 147;
CPP14Parser.RULE_typeid = 148;
CPP14Parser.RULE_abstractdeclarator = 149;
CPP14Parser.RULE_ptrabstractdeclarator = 150;
CPP14Parser.RULE_noptrabstractdeclarator = 151;
CPP14Parser.RULE_abstractpackdeclarator = 152;
CPP14Parser.RULE_noptrabstractpackdeclarator = 153;
CPP14Parser.RULE_parameterdeclarationclause = 154;
CPP14Parser.RULE_parameterdeclarationlist = 155;
CPP14Parser.RULE_parameterdeclaration = 156;
CPP14Parser.RULE_functiondefinition = 157;
CPP14Parser.RULE_functionheader = 158;
CPP14Parser.RULE_functiondeclarator = 159;
CPP14Parser.RULE_functionbody = 160;
CPP14Parser.RULE_initializer = 161;
CPP14Parser.RULE_braceorequalinitializer = 162;
CPP14Parser.RULE_initializerclause = 163;
CPP14Parser.RULE_initializerlist = 164;
CPP14Parser.RULE_bracedinitlist = 165;
CPP14Parser.RULE_myclassname = 166;
CPP14Parser.RULE_classspecifier = 167;
CPP14Parser.RULE_classbody = 168;
CPP14Parser.RULE_classhead = 169;
CPP14Parser.RULE_classheadname = 170;
CPP14Parser.RULE_classvirtspecifier = 171;
CPP14Parser.RULE_classkey = 172;
CPP14Parser.RULE_memberspecification = 173;
CPP14Parser.RULE_memberdeclaration = 174;
CPP14Parser.RULE_membervariabledeclarationstatement = 175;
CPP14Parser.RULE_membervariabledeclaration = 176;
CPP14Parser.RULE_memberdeclaratorlist = 177;
CPP14Parser.RULE_memberdeclarator = 178;
CPP14Parser.RULE_virtspecifierseq = 179;
CPP14Parser.RULE_virtspecifier = 180;
CPP14Parser.RULE_purespecifier = 181;
CPP14Parser.RULE_baseclause = 182;
CPP14Parser.RULE_basespecifierlist = 183;
CPP14Parser.RULE_basespecifier = 184;
CPP14Parser.RULE_classordecltype = 185;
CPP14Parser.RULE_basetypespecifier = 186;
CPP14Parser.RULE_accessspecifier = 187;
CPP14Parser.RULE_conversionfunctionid = 188;
CPP14Parser.RULE_conversiontypeid = 189;
CPP14Parser.RULE_conversiondeclarator = 190;
CPP14Parser.RULE_ctorinitializer = 191;
CPP14Parser.RULE_meminitializerlist = 192;
CPP14Parser.RULE_meminitializer = 193;
CPP14Parser.RULE_meminitializerid = 194;
CPP14Parser.RULE_operatorfunctionid = 195;
CPP14Parser.RULE_literaloperatorid = 196;
CPP14Parser.RULE_templatedeclaration = 197;
CPP14Parser.RULE_templateparameterlist = 198;
CPP14Parser.RULE_templateparameter = 199;
CPP14Parser.RULE_typeparameter = 200;
CPP14Parser.RULE_simpletemplateid = 201;
CPP14Parser.RULE_templateid = 202;
CPP14Parser.RULE_templatename = 203;
CPP14Parser.RULE_templateargumentlist = 204;
CPP14Parser.RULE_templateargument = 205;
CPP14Parser.RULE_typenamespecifier = 206;
CPP14Parser.RULE_explicitinstantiation = 207;
CPP14Parser.RULE_explicitspecialization = 208;
CPP14Parser.RULE_tryblock = 209;
CPP14Parser.RULE_functiontryblock = 210;
CPP14Parser.RULE_handlerseq = 211;
CPP14Parser.RULE_handler = 212;
CPP14Parser.RULE_exceptiondeclaration = 213;
CPP14Parser.RULE_throwexpression = 214;
CPP14Parser.RULE_exceptionspecification = 215;
CPP14Parser.RULE_dynamicexceptionspecification = 216;
CPP14Parser.RULE_typeidlist = 217;
CPP14Parser.RULE_noexceptspecification = 218;
CPP14Parser.RULE_rightShift = 219;
CPP14Parser.RULE_rightShiftAssign = 220;
CPP14Parser.RULE_operator = 221;
CPP14Parser.RULE_literal = 222;
CPP14Parser.RULE_integerliteral = 223;
CPP14Parser.RULE_characterliteral = 224;
CPP14Parser.RULE_floatingliteral = 225;
CPP14Parser.RULE_stringliteral = 226;
CPP14Parser.RULE_booleanliteral = 227;
CPP14Parser.RULE_pointerliteral = 228;
CPP14Parser.RULE_userdefinedliteral = 229;

function TranslationunitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_translationunit;
    return this;
}

TranslationunitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TranslationunitContext.prototype.constructor = TranslationunitContext;

TranslationunitContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

TranslationunitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTranslationunit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TranslationunitContext = TranslationunitContext;

CPP14Parser.prototype.translationunit = function() {

    var localctx = new TranslationunitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CPP14Parser.RULE_translationunit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 461;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Semi - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
            this.state = 460;
            this.declarationseq(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_primaryexpression;
    return this;
}

PrimaryexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryexpressionContext.prototype.constructor = PrimaryexpressionContext;

PrimaryexpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryexpressionContext.prototype.This = function() {
    return this.getToken(CPP14Parser.This, 0);
};

PrimaryexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryexpressionContext.prototype.identexpression = function() {
    return this.getTypedRuleContext(IdentexpressionContext,0);
};

PrimaryexpressionContext.prototype.lambdaexpression = function() {
    return this.getTypedRuleContext(LambdaexpressionContext,0);
};

PrimaryexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPrimaryexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PrimaryexpressionContext = PrimaryexpressionContext;

CPP14Parser.prototype.primaryexpression = function() {

    var localctx = new PrimaryexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CPP14Parser.RULE_primaryexpression);
    try {
        this.state = 471;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Nullptr:
        case CPP14Parser.Integerliteral:
        case CPP14Parser.Characterliteral:
        case CPP14Parser.Floatingliteral:
        case CPP14Parser.Stringliteral:
        case CPP14Parser.Booleanliteral:
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 463;
            this.literal();
            break;
        case CPP14Parser.This:
            this.enterOuterAlt(localctx, 2);
            this.state = 464;
            this.match(CPP14Parser.This);
            break;
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 3);
            this.state = 465;
            this.match(CPP14Parser.LeftParen);
            this.state = 466;
            this.expression(0);
            this.state = 467;
            this.match(CPP14Parser.RightParen);
            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Operator:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 4);
            this.state = 469;
            this.identexpression();
            break;
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 5);
            this.state = 470;
            this.lambdaexpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_idexpression;
    return this;
}

IdexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdexpressionContext.prototype.constructor = IdexpressionContext;

IdexpressionContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

IdexpressionContext.prototype.qualifiedid = function() {
    return this.getTypedRuleContext(QualifiedidContext,0);
};

IdexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitIdexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.IdexpressionContext = IdexpressionContext;

CPP14Parser.prototype.idexpression = function() {

    var localctx = new IdexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CPP14Parser.RULE_idexpression);
    try {
        this.state = 475;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 473;
            this.unqualifiedid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 474;
            this.qualifiedid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_identexpression;
    return this;
}

IdentexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentexpressionContext.prototype.constructor = IdentexpressionContext;

IdentexpressionContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

IdentexpressionContext.prototype.qualifiedid = function() {
    return this.getTypedRuleContext(QualifiedidContext,0);
};

IdentexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitIdentexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.IdentexpressionContext = IdentexpressionContext;

CPP14Parser.prototype.identexpression = function() {

    var localctx = new IdentexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CPP14Parser.RULE_identexpression);
    try {
        this.state = 479;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 477;
            this.unqualifiedid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 478;
            this.qualifiedid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnqualifiedidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unqualifiedid;
    return this;
}

UnqualifiedidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnqualifiedidContext.prototype.constructor = UnqualifiedidContext;

UnqualifiedidContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

UnqualifiedidContext.prototype.operatorfunctionid = function() {
    return this.getTypedRuleContext(OperatorfunctionidContext,0);
};

UnqualifiedidContext.prototype.conversionfunctionid = function() {
    return this.getTypedRuleContext(ConversionfunctionidContext,0);
};

UnqualifiedidContext.prototype.literaloperatorid = function() {
    return this.getTypedRuleContext(LiteraloperatoridContext,0);
};

UnqualifiedidContext.prototype.myclassname = function() {
    return this.getTypedRuleContext(MyclassnameContext,0);
};

UnqualifiedidContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

UnqualifiedidContext.prototype.templateid = function() {
    return this.getTypedRuleContext(TemplateidContext,0);
};

UnqualifiedidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUnqualifiedid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UnqualifiedidContext = UnqualifiedidContext;

CPP14Parser.prototype.unqualifiedid = function() {

    var localctx = new UnqualifiedidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CPP14Parser.RULE_unqualifiedid);
    try {
        this.state = 490;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 481;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 482;
            this.operatorfunctionid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 483;
            this.conversionfunctionid();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 484;
            this.literaloperatorid();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 485;
            this.match(CPP14Parser.Tilde);
            this.state = 486;
            this.myclassname();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 487;
            this.match(CPP14Parser.Tilde);
            this.state = 488;
            this.decltypespecifier();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 489;
            this.templateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_qualifiedid;
    return this;
}

QualifiedidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedidContext.prototype.constructor = QualifiedidContext;

QualifiedidContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

QualifiedidContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

QualifiedidContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

QualifiedidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitQualifiedid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.QualifiedidContext = QualifiedidContext;

CPP14Parser.prototype.qualifiedid = function() {

    var localctx = new QualifiedidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CPP14Parser.RULE_qualifiedid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 492;
        this.nestednamespecifier(0);
        this.state = 494;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Template) {
            this.state = 493;
            this.match(CPP14Parser.Template);
        }

        this.state = 496;
        this.unqualifiedid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NestednamespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_nestednamespecifier;
    return this;
}

NestednamespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NestednamespecifierContext.prototype.constructor = NestednamespecifierContext;

NestednamespecifierContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

NestednamespecifierContext.prototype.namespacename = function() {
    return this.getTypedRuleContext(NamespacenameContext,0);
};

NestednamespecifierContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

NestednamespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

NestednamespecifierContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

NestednamespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

NestednamespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

NestednamespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNestednamespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.nestednamespecifier = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NestednamespecifierContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 12;
    this.enterRecursionRule(localctx, 12, CPP14Parser.RULE_nestednamespecifier, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.state = 499;
            this.match(CPP14Parser.Doublecolon);
            break;

        case 2:
            this.state = 500;
            this.typename();
            this.state = 501;
            this.match(CPP14Parser.Doublecolon);
            break;

        case 3:
            this.state = 503;
            this.namespacename();
            this.state = 504;
            this.match(CPP14Parser.Doublecolon);
            break;

        case 4:
            this.state = 506;
            this.decltypespecifier();
            this.state = 507;
            this.match(CPP14Parser.Doublecolon);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 523;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 521;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NestednamespecifierContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_nestednamespecifier);
                    this.state = 511;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 512;
                    this.match(CPP14Parser.Identifier);
                    this.state = 513;
                    this.match(CPP14Parser.Doublecolon);
                    break;

                case 2:
                    localctx = new NestednamespecifierContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_nestednamespecifier);
                    this.state = 514;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 516;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CPP14Parser.Template) {
                        this.state = 515;
                        this.match(CPP14Parser.Template);
                    }

                    this.state = 518;
                    this.simpletemplateid();
                    this.state = 519;
                    this.match(CPP14Parser.Doublecolon);
                    break;

                } 
            }
            this.state = 525;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LambdaexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdaexpression;
    return this;
}

LambdaexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaexpressionContext.prototype.constructor = LambdaexpressionContext;

LambdaexpressionContext.prototype.lambdaintroducer = function() {
    return this.getTypedRuleContext(LambdaintroducerContext,0);
};

LambdaexpressionContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

LambdaexpressionContext.prototype.lambdadeclarator = function() {
    return this.getTypedRuleContext(LambdadeclaratorContext,0);
};

LambdaexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLambdaexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LambdaexpressionContext = LambdaexpressionContext;

CPP14Parser.prototype.lambdaexpression = function() {

    var localctx = new LambdaexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CPP14Parser.RULE_lambdaexpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this.lambdaintroducer();
        this.state = 528;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.LeftParen) {
            this.state = 527;
            this.lambdadeclarator();
        }

        this.state = 530;
        this.compoundstatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdaintroducerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdaintroducer;
    return this;
}

LambdaintroducerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaintroducerContext.prototype.constructor = LambdaintroducerContext;

LambdaintroducerContext.prototype.lambdacapture = function() {
    return this.getTypedRuleContext(LambdacaptureContext,0);
};

LambdaintroducerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLambdaintroducer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LambdaintroducerContext = LambdaintroducerContext;

CPP14Parser.prototype.lambdaintroducer = function() {

    var localctx = new LambdaintroducerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CPP14Parser.RULE_lambdaintroducer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 532;
        this.match(CPP14Parser.LeftBracket);
        this.state = 534;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.This || _la===CPP14Parser.And || _la===CPP14Parser.Assign || _la===CPP14Parser.Identifier) {
            this.state = 533;
            this.lambdacapture();
        }

        this.state = 536;
        this.match(CPP14Parser.RightBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdacaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdacapture;
    return this;
}

LambdacaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdacaptureContext.prototype.constructor = LambdacaptureContext;

LambdacaptureContext.prototype.capturedefault = function() {
    return this.getTypedRuleContext(CapturedefaultContext,0);
};

LambdacaptureContext.prototype.capturelist = function() {
    return this.getTypedRuleContext(CapturelistContext,0);
};

LambdacaptureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLambdacapture(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LambdacaptureContext = LambdacaptureContext;

CPP14Parser.prototype.lambdacapture = function() {

    var localctx = new LambdacaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CPP14Parser.RULE_lambdacapture);
    try {
        this.state = 544;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 538;
            this.capturedefault();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 539;
            this.capturelist(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 540;
            this.capturedefault();
            this.state = 541;
            this.match(CPP14Parser.Comma);
            this.state = 542;
            this.capturelist(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CapturedefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_capturedefault;
    return this;
}

CapturedefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CapturedefaultContext.prototype.constructor = CapturedefaultContext;


CapturedefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCapturedefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CapturedefaultContext = CapturedefaultContext;

CPP14Parser.prototype.capturedefault = function() {

    var localctx = new CapturedefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CPP14Parser.RULE_capturedefault);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.And || _la===CPP14Parser.Assign)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CapturelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_capturelist;
    return this;
}

CapturelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CapturelistContext.prototype.constructor = CapturelistContext;

CapturelistContext.prototype.capture = function() {
    return this.getTypedRuleContext(CaptureContext,0);
};

CapturelistContext.prototype.capturelist = function() {
    return this.getTypedRuleContext(CapturelistContext,0);
};

CapturelistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCapturelist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.capturelist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new CapturelistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 22;
    this.enterRecursionRule(localctx, 22, CPP14Parser.RULE_capturelist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 549;
        this.capture();
        this.state = 551;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        if(la_===1) {
            this.state = 550;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 561;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new CapturelistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_capturelist);
                this.state = 553;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 554;
                this.match(CPP14Parser.Comma);
                this.state = 555;
                this.capture();
                this.state = 557;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
                if(la_===1) {
                    this.state = 556;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 563;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_capture;
    return this;
}

CaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaptureContext.prototype.constructor = CaptureContext;

CaptureContext.prototype.simplecapture = function() {
    return this.getTypedRuleContext(SimplecaptureContext,0);
};

CaptureContext.prototype.initcapture = function() {
    return this.getTypedRuleContext(InitcaptureContext,0);
};

CaptureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCapture(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CaptureContext = CaptureContext;

CPP14Parser.prototype.capture = function() {

    var localctx = new CaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CPP14Parser.RULE_capture);
    try {
        this.state = 566;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 564;
            this.simplecapture();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 565;
            this.initcapture();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimplecaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simplecapture;
    return this;
}

SimplecaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimplecaptureContext.prototype.constructor = SimplecaptureContext;

SimplecaptureContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

SimplecaptureContext.prototype.This = function() {
    return this.getToken(CPP14Parser.This, 0);
};

SimplecaptureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSimplecapture(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SimplecaptureContext = SimplecaptureContext;

CPP14Parser.prototype.simplecapture = function() {

    var localctx = new SimplecaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CPP14Parser.RULE_simplecapture);
    try {
        this.state = 572;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 568;
            this.match(CPP14Parser.Identifier);
            break;
        case CPP14Parser.And:
            this.enterOuterAlt(localctx, 2);
            this.state = 569;
            this.match(CPP14Parser.And);
            this.state = 570;
            this.match(CPP14Parser.Identifier);
            break;
        case CPP14Parser.This:
            this.enterOuterAlt(localctx, 3);
            this.state = 571;
            this.match(CPP14Parser.This);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitcaptureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initcapture;
    return this;
}

InitcaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitcaptureContext.prototype.constructor = InitcaptureContext;

InitcaptureContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

InitcaptureContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitcaptureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitcapture(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitcaptureContext = InitcaptureContext;

CPP14Parser.prototype.initcapture = function() {

    var localctx = new InitcaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CPP14Parser.RULE_initcapture);
    try {
        this.state = 579;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 574;
            this.match(CPP14Parser.Identifier);
            this.state = 575;
            this.initializer();
            break;
        case CPP14Parser.And:
            this.enterOuterAlt(localctx, 2);
            this.state = 576;
            this.match(CPP14Parser.And);
            this.state = 577;
            this.match(CPP14Parser.Identifier);
            this.state = 578;
            this.initializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdadeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_lambdadeclarator;
    return this;
}

LambdadeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdadeclaratorContext.prototype.constructor = LambdadeclaratorContext;

LambdadeclaratorContext.prototype.parameterdeclarationclause = function() {
    return this.getTypedRuleContext(ParameterdeclarationclauseContext,0);
};

LambdadeclaratorContext.prototype.Mutable = function() {
    return this.getToken(CPP14Parser.Mutable, 0);
};

LambdadeclaratorContext.prototype.exceptionspecification = function() {
    return this.getTypedRuleContext(ExceptionspecificationContext,0);
};

LambdadeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

LambdadeclaratorContext.prototype.trailingreturntype = function() {
    return this.getTypedRuleContext(TrailingreturntypeContext,0);
};

LambdadeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLambdadeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LambdadeclaratorContext = LambdadeclaratorContext;

CPP14Parser.prototype.lambdadeclarator = function() {

    var localctx = new LambdadeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CPP14Parser.RULE_lambdadeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 581;
        this.match(CPP14Parser.LeftParen);
        this.state = 582;
        this.parameterdeclarationclause();
        this.state = 583;
        this.match(CPP14Parser.RightParen);
        this.state = 585;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Mutable) {
            this.state = 584;
            this.match(CPP14Parser.Mutable);
        }

        this.state = 588;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Noexcept || _la===CPP14Parser.Throw) {
            this.state = 587;
            this.exceptionspecification();
        }

        this.state = 591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 590;
            this.attributespecifierseq(0);
        }

        this.state = 594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Arrow) {
            this.state = 593;
            this.trailingreturntype();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdexpressionlapperContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_idexpressionlapper;
    return this;
}

IdexpressionlapperContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdexpressionlapperContext.prototype.constructor = IdexpressionlapperContext;

IdexpressionlapperContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

IdexpressionlapperContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitIdexpressionlapper(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.IdexpressionlapperContext = IdexpressionlapperContext;

CPP14Parser.prototype.idexpressionlapper = function() {

    var localctx = new IdexpressionlapperContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CPP14Parser.RULE_idexpressionlapper);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this.idexpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostfixexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_postfixexpression;
    return this;
}

PostfixexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixexpressionContext.prototype.constructor = PostfixexpressionContext;

PostfixexpressionContext.prototype.primaryexpression = function() {
    return this.getTypedRuleContext(PrimaryexpressionContext,0);
};

PostfixexpressionContext.prototype.simpletypespecifier = function() {
    return this.getTypedRuleContext(SimpletypespecifierContext,0);
};

PostfixexpressionContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

PostfixexpressionContext.prototype.typenamespecifier = function() {
    return this.getTypedRuleContext(TypenamespecifierContext,0);
};

PostfixexpressionContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

PostfixexpressionContext.prototype.Dynamic_cast = function() {
    return this.getToken(CPP14Parser.Dynamic_cast, 0);
};

PostfixexpressionContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

PostfixexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PostfixexpressionContext.prototype.Static_cast = function() {
    return this.getToken(CPP14Parser.Static_cast, 0);
};

PostfixexpressionContext.prototype.Reinterpret_cast = function() {
    return this.getToken(CPP14Parser.Reinterpret_cast, 0);
};

PostfixexpressionContext.prototype.Const_cast = function() {
    return this.getToken(CPP14Parser.Const_cast, 0);
};

PostfixexpressionContext.prototype.Typeid = function() {
    return this.getToken(CPP14Parser.Typeid, 0);
};

PostfixexpressionContext.prototype.postfixexpression = function() {
    return this.getTypedRuleContext(PostfixexpressionContext,0);
};

PostfixexpressionContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

PostfixexpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

PostfixexpressionContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

PostfixexpressionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

PostfixexpressionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

PostfixexpressionContext.prototype.Dot = function() {
    return this.getToken(CPP14Parser.Dot, 0);
};

PostfixexpressionContext.prototype.idexpressionlapper = function() {
    return this.getTypedRuleContext(IdexpressionlapperContext,0);
};

PostfixexpressionContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

PostfixexpressionContext.prototype.Arrow = function() {
    return this.getToken(CPP14Parser.Arrow, 0);
};

PostfixexpressionContext.prototype.pseudodestructorname = function() {
    return this.getTypedRuleContext(PseudodestructornameContext,0);
};

PostfixexpressionContext.prototype.PlusPlus = function() {
    return this.getToken(CPP14Parser.PlusPlus, 0);
};

PostfixexpressionContext.prototype.MinusMinus = function() {
    return this.getToken(CPP14Parser.MinusMinus, 0);
};

PostfixexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPostfixexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.postfixexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PostfixexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 34;
    this.enterRecursionRule(localctx, 34, CPP14Parser.RULE_postfixexpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 662;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.state = 599;
            this.primaryexpression();
            break;

        case 2:
            this.state = 600;
            this.simpletypespecifier();
            this.state = 601;
            this.match(CPP14Parser.LeftParen);
            this.state = 603;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 602;
                this.expressionlist();
            }

            this.state = 605;
            this.match(CPP14Parser.RightParen);
            break;

        case 3:
            this.state = 607;
            this.typenamespecifier();
            this.state = 608;
            this.match(CPP14Parser.LeftParen);
            this.state = 610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 609;
                this.expressionlist();
            }

            this.state = 612;
            this.match(CPP14Parser.RightParen);
            break;

        case 4:
            this.state = 614;
            this.simpletypespecifier();
            this.state = 615;
            this.bracedinitlist();
            break;

        case 5:
            this.state = 617;
            this.typenamespecifier();
            this.state = 618;
            this.bracedinitlist();
            break;

        case 6:
            this.state = 620;
            this.match(CPP14Parser.Dynamic_cast);
            this.state = 621;
            this.match(CPP14Parser.Less);
            this.state = 622;
            this.typeid();
            this.state = 623;
            this.match(CPP14Parser.Greater);
            this.state = 624;
            this.match(CPP14Parser.LeftParen);
            this.state = 625;
            this.expression(0);
            this.state = 626;
            this.match(CPP14Parser.RightParen);
            break;

        case 7:
            this.state = 628;
            this.match(CPP14Parser.Static_cast);
            this.state = 629;
            this.match(CPP14Parser.Less);
            this.state = 630;
            this.typeid();
            this.state = 631;
            this.match(CPP14Parser.Greater);
            this.state = 632;
            this.match(CPP14Parser.LeftParen);
            this.state = 633;
            this.expression(0);
            this.state = 634;
            this.match(CPP14Parser.RightParen);
            break;

        case 8:
            this.state = 636;
            this.match(CPP14Parser.Reinterpret_cast);
            this.state = 637;
            this.match(CPP14Parser.Less);
            this.state = 638;
            this.typeid();
            this.state = 639;
            this.match(CPP14Parser.Greater);
            this.state = 640;
            this.match(CPP14Parser.LeftParen);
            this.state = 641;
            this.expression(0);
            this.state = 642;
            this.match(CPP14Parser.RightParen);
            break;

        case 9:
            this.state = 644;
            this.match(CPP14Parser.Const_cast);
            this.state = 645;
            this.match(CPP14Parser.Less);
            this.state = 646;
            this.typeid();
            this.state = 647;
            this.match(CPP14Parser.Greater);
            this.state = 648;
            this.match(CPP14Parser.LeftParen);
            this.state = 649;
            this.expression(0);
            this.state = 650;
            this.match(CPP14Parser.RightParen);
            break;

        case 10:
            this.state = 652;
            this.match(CPP14Parser.Typeid);
            this.state = 653;
            this.match(CPP14Parser.LeftParen);
            this.state = 654;
            this.expression(0);
            this.state = 655;
            this.match(CPP14Parser.RightParen);
            break;

        case 11:
            this.state = 657;
            this.match(CPP14Parser.Typeid);
            this.state = 658;
            this.match(CPP14Parser.LeftParen);
            this.state = 659;
            this.typeid();
            this.state = 660;
            this.match(CPP14Parser.RightParen);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 704;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 702;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 664;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 665;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 666;
                    this.assignmentexpression();
                    this.state = 667;
                    this.match(CPP14Parser.RightBracket);
                    break;

                case 2:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 669;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 670;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 671;
                    this.bracedinitlist();
                    this.state = 672;
                    this.match(CPP14Parser.RightBracket);
                    break;

                case 3:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 674;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 675;
                    this.match(CPP14Parser.LeftParen);
                    this.state = 677;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                        this.state = 676;
                        this.expressionlist();
                    }

                    this.state = 679;
                    this.match(CPP14Parser.RightParen);
                    break;

                case 4:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 680;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 681;
                    this.match(CPP14Parser.Dot);
                    this.state = 683;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CPP14Parser.Template) {
                        this.state = 682;
                        this.match(CPP14Parser.Template);
                    }

                    this.state = 685;
                    this.idexpressionlapper();
                    break;

                case 5:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 686;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 687;
                    this.match(CPP14Parser.Arrow);
                    this.state = 689;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CPP14Parser.Template) {
                        this.state = 688;
                        this.match(CPP14Parser.Template);
                    }

                    this.state = 691;
                    this.idexpressionlapper();
                    break;

                case 6:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 692;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 693;
                    this.match(CPP14Parser.Dot);
                    this.state = 694;
                    this.pseudodestructorname();
                    break;

                case 7:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 695;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 696;
                    this.match(CPP14Parser.Arrow);
                    this.state = 697;
                    this.pseudodestructorname();
                    break;

                case 8:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 698;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 699;
                    this.match(CPP14Parser.PlusPlus);
                    break;

                case 9:
                    localctx = new PostfixexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixexpression);
                    this.state = 700;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 701;
                    this.match(CPP14Parser.MinusMinus);
                    break;

                } 
            }
            this.state = 706;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExpressionlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expressionlist;
    return this;
}

ExpressionlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionlistContext.prototype.constructor = ExpressionlistContext;

ExpressionlistContext.prototype.initializerlist = function() {
    return this.getTypedRuleContext(InitializerlistContext,0);
};

ExpressionlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExpressionlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExpressionlistContext = ExpressionlistContext;

CPP14Parser.prototype.expressionlist = function() {

    var localctx = new ExpressionlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CPP14Parser.RULE_expressionlist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 707;
        this.initializerlist();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PseudodestructornameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pseudodestructorname;
    return this;
}

PseudodestructornameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PseudodestructornameContext.prototype.constructor = PseudodestructornameContext;

PseudodestructornameContext.prototype.typename = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypenameContext);
    } else {
        return this.getTypedRuleContext(TypenameContext,i);
    }
};

PseudodestructornameContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

PseudodestructornameContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

PseudodestructornameContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

PseudodestructornameContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

PseudodestructornameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPseudodestructorname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PseudodestructornameContext = PseudodestructornameContext;

CPP14Parser.prototype.pseudodestructorname = function() {

    var localctx = new PseudodestructornameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CPP14Parser.RULE_pseudodestructorname);
    var _la = 0; // Token type
    try {
        this.state = 731;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 710;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
            if(la_===1) {
                this.state = 709;
                this.nestednamespecifier(0);

            }
            this.state = 712;
            this.typename();
            this.state = 713;
            this.match(CPP14Parser.Doublecolon);
            this.state = 714;
            this.match(CPP14Parser.Tilde);
            this.state = 715;
            this.typename();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 717;
            this.nestednamespecifier(0);
            this.state = 718;
            this.match(CPP14Parser.Template);
            this.state = 719;
            this.simpletemplateid();
            this.state = 720;
            this.match(CPP14Parser.Doublecolon);
            this.state = 721;
            this.match(CPP14Parser.Tilde);
            this.state = 722;
            this.typename();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 725;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Decltype || _la===CPP14Parser.Doublecolon || _la===CPP14Parser.Identifier) {
                this.state = 724;
                this.nestednamespecifier(0);
            }

            this.state = 727;
            this.match(CPP14Parser.Tilde);
            this.state = 728;
            this.typename();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 729;
            this.match(CPP14Parser.Tilde);
            this.state = 730;
            this.decltypespecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BinaryexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_binaryexpression;
    return this;
}

BinaryexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryexpressionContext.prototype.constructor = BinaryexpressionContext;

BinaryexpressionContext.prototype.postfixexpression = function() {
    return this.getTypedRuleContext(PostfixexpressionContext,0);
};

BinaryexpressionContext.prototype.unaryexpression = function() {
    return this.getTypedRuleContext(UnaryexpressionContext,0);
};

BinaryexpressionContext.prototype.newexpression = function() {
    return this.getTypedRuleContext(NewexpressionContext,0);
};

BinaryexpressionContext.prototype.deleteexpression = function() {
    return this.getTypedRuleContext(DeleteexpressionContext,0);
};

BinaryexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBinaryexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BinaryexpressionContext = BinaryexpressionContext;

CPP14Parser.prototype.binaryexpression = function() {

    var localctx = new BinaryexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CPP14Parser.RULE_binaryexpression);
    try {
        this.state = 737;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 733;
            this.postfixexpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 734;
            this.unaryexpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 735;
            this.newexpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 736;
            this.deleteexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unaryexpression;
    return this;
}

UnaryexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryexpressionContext.prototype.constructor = UnaryexpressionContext;

UnaryexpressionContext.prototype.PlusPlus = function() {
    return this.getToken(CPP14Parser.PlusPlus, 0);
};

UnaryexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

UnaryexpressionContext.prototype.MinusMinus = function() {
    return this.getToken(CPP14Parser.MinusMinus, 0);
};

UnaryexpressionContext.prototype.unaryoperator = function() {
    return this.getTypedRuleContext(UnaryoperatorContext,0);
};

UnaryexpressionContext.prototype.Sizeof = function() {
    return this.getToken(CPP14Parser.Sizeof, 0);
};

UnaryexpressionContext.prototype.binaryexpression = function() {
    return this.getTypedRuleContext(BinaryexpressionContext,0);
};

UnaryexpressionContext.prototype.typeidlapper = function() {
    return this.getTypedRuleContext(TypeidlapperContext,0);
};

UnaryexpressionContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

UnaryexpressionContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

UnaryexpressionContext.prototype.Alignof = function() {
    return this.getToken(CPP14Parser.Alignof, 0);
};

UnaryexpressionContext.prototype.noexceptexpression = function() {
    return this.getTypedRuleContext(NoexceptexpressionContext,0);
};

UnaryexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUnaryexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UnaryexpressionContext = UnaryexpressionContext;

CPP14Parser.prototype.unaryexpression = function() {

    var localctx = new UnaryexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CPP14Parser.RULE_unaryexpression);
    try {
        this.state = 769;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 739;
            this.match(CPP14Parser.PlusPlus);
            this.state = 740;
            this.castexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 741;
            this.match(CPP14Parser.MinusMinus);
            this.state = 742;
            this.castexpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 743;
            this.unaryoperator();
            this.state = 744;
            this.castexpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 746;
            this.match(CPP14Parser.Sizeof);
            this.state = 747;
            this.binaryexpression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 748;
            this.match(CPP14Parser.Sizeof);
            this.state = 749;
            this.match(CPP14Parser.LeftParen);
            this.state = 750;
            this.typeidlapper();
            this.state = 751;
            this.match(CPP14Parser.RightParen);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 753;
            this.match(CPP14Parser.Sizeof);
            this.state = 754;
            this.match(CPP14Parser.LeftParen);
            this.state = 755;
            this.typeid();
            this.state = 756;
            this.match(CPP14Parser.RightParen);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 758;
            this.match(CPP14Parser.Sizeof);
            this.state = 759;
            this.match(CPP14Parser.Ellipsis);
            this.state = 760;
            this.match(CPP14Parser.LeftParen);
            this.state = 761;
            this.match(CPP14Parser.Identifier);
            this.state = 762;
            this.match(CPP14Parser.RightParen);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 763;
            this.match(CPP14Parser.Alignof);
            this.state = 764;
            this.match(CPP14Parser.LeftParen);
            this.state = 765;
            this.typeid();
            this.state = 766;
            this.match(CPP14Parser.RightParen);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 768;
            this.noexceptexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeidlapperContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeidlapper;
    return this;
}

TypeidlapperContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeidlapperContext.prototype.constructor = TypeidlapperContext;

TypeidlapperContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

TypeidlapperContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypeidlapper(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypeidlapperContext = TypeidlapperContext;

CPP14Parser.prototype.typeidlapper = function() {

    var localctx = new TypeidlapperContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CPP14Parser.RULE_typeidlapper);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 771;
        this.typeid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryoperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unaryoperator;
    return this;
}

UnaryoperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryoperatorContext.prototype.constructor = UnaryoperatorContext;


UnaryoperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUnaryoperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UnaryoperatorContext = UnaryoperatorContext;

CPP14Parser.prototype.unaryoperator = function() {

    var localctx = new UnaryoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CPP14Parser.RULE_unaryoperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 773;
        _la = this._input.LA(1);
        if(!(((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (CPP14Parser.Plus - 84)) | (1 << (CPP14Parser.Minus - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (1 << (CPP14Parser.Or - 84)) | (1 << (CPP14Parser.Tilde - 84)) | (1 << (CPP14Parser.Not - 84)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newexpression;
    return this;
}

NewexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewexpressionContext.prototype.constructor = NewexpressionContext;

NewexpressionContext.prototype.New = function() {
    return this.getToken(CPP14Parser.New, 0);
};

NewexpressionContext.prototype.newtypeid = function() {
    return this.getTypedRuleContext(NewtypeidContext,0);
};

NewexpressionContext.prototype.newplacement = function() {
    return this.getTypedRuleContext(NewplacementContext,0);
};

NewexpressionContext.prototype.newinitializer = function() {
    return this.getTypedRuleContext(NewinitializerContext,0);
};

NewexpressionContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

NewexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNewexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NewexpressionContext = NewexpressionContext;

CPP14Parser.prototype.newexpression = function() {

    var localctx = new NewexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CPP14Parser.RULE_newexpression);
    var _la = 0; // Token type
    try {
        this.state = 799;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 776;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 775;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 778;
            this.match(CPP14Parser.New);
            this.state = 780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.LeftParen) {
                this.state = 779;
                this.newplacement();
            }

            this.state = 782;
            this.newtypeid();
            this.state = 784;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 783;
                this.newinitializer();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 787;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 786;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 789;
            this.match(CPP14Parser.New);
            this.state = 791;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            if(la_===1) {
                this.state = 790;
                this.newplacement();

            }
            this.state = 793;
            this.match(CPP14Parser.LeftParen);
            this.state = 794;
            this.typeid();
            this.state = 795;
            this.match(CPP14Parser.RightParen);
            this.state = 797;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
            if(la_===1) {
                this.state = 796;
                this.newinitializer();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewplacementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newplacement;
    return this;
}

NewplacementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewplacementContext.prototype.constructor = NewplacementContext;

NewplacementContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

NewplacementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNewplacement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NewplacementContext = NewplacementContext;

CPP14Parser.prototype.newplacement = function() {

    var localctx = new NewplacementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CPP14Parser.RULE_newplacement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 801;
        this.match(CPP14Parser.LeftParen);
        this.state = 802;
        this.expressionlist();
        this.state = 803;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewtypeidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newtypeid;
    return this;
}

NewtypeidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewtypeidContext.prototype.constructor = NewtypeidContext;

NewtypeidContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

NewtypeidContext.prototype.newdeclarator = function() {
    return this.getTypedRuleContext(NewdeclaratorContext,0);
};

NewtypeidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNewtypeid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NewtypeidContext = NewtypeidContext;

CPP14Parser.prototype.newtypeid = function() {

    var localctx = new NewtypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CPP14Parser.RULE_newtypeid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 805;
        this.typespecifierseq();
        this.state = 807;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 806;
            this.newdeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newdeclarator;
    return this;
}

NewdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewdeclaratorContext.prototype.constructor = NewdeclaratorContext;

NewdeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

NewdeclaratorContext.prototype.newdeclarator = function() {
    return this.getTypedRuleContext(NewdeclaratorContext,0);
};

NewdeclaratorContext.prototype.noptrnewdeclarator = function() {
    return this.getTypedRuleContext(NoptrnewdeclaratorContext,0);
};

NewdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNewdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NewdeclaratorContext = NewdeclaratorContext;

CPP14Parser.prototype.newdeclarator = function() {

    var localctx = new NewdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CPP14Parser.RULE_newdeclarator);
    try {
        this.state = 814;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 809;
            this.ptroperator();
            this.state = 811;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
            if(la_===1) {
                this.state = 810;
                this.newdeclarator();

            }
            break;
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 813;
            this.noptrnewdeclarator(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoptrnewdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrnewdeclarator;
    return this;
}

NoptrnewdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrnewdeclaratorContext.prototype.constructor = NoptrnewdeclaratorContext;

NoptrnewdeclaratorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NoptrnewdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrnewdeclaratorContext.prototype.noptrnewdeclarator = function() {
    return this.getTypedRuleContext(NoptrnewdeclaratorContext,0);
};

NoptrnewdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrnewdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoptrnewdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.noptrnewdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrnewdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 56;
    this.enterRecursionRule(localctx, 56, CPP14Parser.RULE_noptrnewdeclarator, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 817;
        this.match(CPP14Parser.LeftBracket);
        this.state = 818;
        this.expression(0);
        this.state = 819;
        this.match(CPP14Parser.RightBracket);
        this.state = 821;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 820;
            this.attributespecifierseq(0);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 832;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NoptrnewdeclaratorContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrnewdeclarator);
                this.state = 823;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 824;
                this.match(CPP14Parser.LeftBracket);
                this.state = 825;
                this.constantexpression();
                this.state = 826;
                this.match(CPP14Parser.RightBracket);
                this.state = 828;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
                if(la_===1) {
                    this.state = 827;
                    this.attributespecifierseq(0);

                } 
            }
            this.state = 834;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function NewinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_newinitializer;
    return this;
}

NewinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewinitializerContext.prototype.constructor = NewinitializerContext;

NewinitializerContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

NewinitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

NewinitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNewinitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NewinitializerContext = NewinitializerContext;

CPP14Parser.prototype.newinitializer = function() {

    var localctx = new NewinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CPP14Parser.RULE_newinitializer);
    var _la = 0; // Token type
    try {
        this.state = 841;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 1);
            this.state = 835;
            this.match(CPP14Parser.LeftParen);
            this.state = 837;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 836;
                this.expressionlist();
            }

            this.state = 839;
            this.match(CPP14Parser.RightParen);
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 840;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_deleteexpression;
    return this;
}

DeleteexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteexpressionContext.prototype.constructor = DeleteexpressionContext;

DeleteexpressionContext.prototype.Delete = function() {
    return this.getToken(CPP14Parser.Delete, 0);
};

DeleteexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

DeleteexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeleteexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeleteexpressionContext = DeleteexpressionContext;

CPP14Parser.prototype.deleteexpression = function() {

    var localctx = new DeleteexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CPP14Parser.RULE_deleteexpression);
    var _la = 0; // Token type
    try {
        this.state = 855;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 844;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 843;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 846;
            this.match(CPP14Parser.Delete);
            this.state = 847;
            this.castexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 849;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Doublecolon) {
                this.state = 848;
                this.match(CPP14Parser.Doublecolon);
            }

            this.state = 851;
            this.match(CPP14Parser.Delete);
            this.state = 852;
            this.match(CPP14Parser.LeftBracket);
            this.state = 853;
            this.match(CPP14Parser.RightBracket);
            this.state = 854;
            this.castexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoexceptexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noexceptexpression;
    return this;
}

NoexceptexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoexceptexpressionContext.prototype.constructor = NoexceptexpressionContext;

NoexceptexpressionContext.prototype.Noexcept = function() {
    return this.getToken(CPP14Parser.Noexcept, 0);
};

NoexceptexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NoexceptexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoexceptexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NoexceptexpressionContext = NoexceptexpressionContext;

CPP14Parser.prototype.noexceptexpression = function() {

    var localctx = new NoexceptexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CPP14Parser.RULE_noexceptexpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 857;
        this.match(CPP14Parser.Noexcept);
        this.state = 858;
        this.match(CPP14Parser.LeftParen);
        this.state = 859;
        this.expression(0);
        this.state = 860;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CastexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_castexpression;
    return this;
}

CastexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastexpressionContext.prototype.constructor = CastexpressionContext;

CastexpressionContext.prototype.binaryexpression = function() {
    return this.getTypedRuleContext(BinaryexpressionContext,0);
};

CastexpressionContext.prototype.LeftParen = function() {
    return this.getToken(CPP14Parser.LeftParen, 0);
};

CastexpressionContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

CastexpressionContext.prototype.RightParen = function() {
    return this.getToken(CPP14Parser.RightParen, 0);
};

CastexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

CastexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCastexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CastexpressionContext = CastexpressionContext;

CPP14Parser.prototype.castexpression = function() {

    var localctx = new CastexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CPP14Parser.RULE_castexpression);
    try {
        this.state = 868;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 862;
            this.binaryexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 863;
            this.match(CPP14Parser.LeftParen);
            this.state = 864;
            this.typeid();
            this.state = 865;
            this.match(CPP14Parser.RightParen);
            this.state = 866;
            this.castexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PmexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pmexpression;
    return this;
}

PmexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PmexpressionContext.prototype.constructor = PmexpressionContext;

PmexpressionContext.prototype.castexpression = function() {
    return this.getTypedRuleContext(CastexpressionContext,0);
};

PmexpressionContext.prototype.pmexpression = function() {
    return this.getTypedRuleContext(PmexpressionContext,0);
};

PmexpressionContext.prototype.DotStar = function() {
    return this.getToken(CPP14Parser.DotStar, 0);
};

PmexpressionContext.prototype.ArrowStar = function() {
    return this.getToken(CPP14Parser.ArrowStar, 0);
};

PmexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPmexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.pmexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PmexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 66;
    this.enterRecursionRule(localctx, 66, CPP14Parser.RULE_pmexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 871;
        this.castexpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 881;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 879;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PmexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_pmexpression);
                    this.state = 873;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 874;
                    this.match(CPP14Parser.DotStar);
                    this.state = 875;
                    this.castexpression();
                    break;

                case 2:
                    localctx = new PmexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_pmexpression);
                    this.state = 876;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 877;
                    this.match(CPP14Parser.ArrowStar);
                    this.state = 878;
                    this.castexpression();
                    break;

                } 
            }
            this.state = 883;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function MultiplicativeexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_multiplicativeexpression;
    return this;
}

MultiplicativeexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeexpressionContext.prototype.constructor = MultiplicativeexpressionContext;

MultiplicativeexpressionContext.prototype.pmexpression = function() {
    return this.getTypedRuleContext(PmexpressionContext,0);
};

MultiplicativeexpressionContext.prototype.multiplicativeexpression = function() {
    return this.getTypedRuleContext(MultiplicativeexpressionContext,0);
};

MultiplicativeexpressionContext.prototype.Star = function() {
    return this.getToken(CPP14Parser.Star, 0);
};

MultiplicativeexpressionContext.prototype.Div = function() {
    return this.getToken(CPP14Parser.Div, 0);
};

MultiplicativeexpressionContext.prototype.Mod = function() {
    return this.getToken(CPP14Parser.Mod, 0);
};

MultiplicativeexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMultiplicativeexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.multiplicativeexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MultiplicativeexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, CPP14Parser.RULE_multiplicativeexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 885;
        this.pmexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 898;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 896;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplicativeexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);
                    this.state = 887;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 888;
                    this.match(CPP14Parser.Star);
                    this.state = 889;
                    this.pmexpression(0);
                    break;

                case 2:
                    localctx = new MultiplicativeexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);
                    this.state = 890;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 891;
                    this.match(CPP14Parser.Div);
                    this.state = 892;
                    this.pmexpression(0);
                    break;

                case 3:
                    localctx = new MultiplicativeexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);
                    this.state = 893;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 894;
                    this.match(CPP14Parser.Mod);
                    this.state = 895;
                    this.pmexpression(0);
                    break;

                } 
            }
            this.state = 900;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AdditiveexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_additiveexpression;
    return this;
}

AdditiveexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveexpressionContext.prototype.constructor = AdditiveexpressionContext;

AdditiveexpressionContext.prototype.multiplicativeexpression = function() {
    return this.getTypedRuleContext(MultiplicativeexpressionContext,0);
};

AdditiveexpressionContext.prototype.additiveexpression = function() {
    return this.getTypedRuleContext(AdditiveexpressionContext,0);
};

AdditiveexpressionContext.prototype.Plus = function() {
    return this.getToken(CPP14Parser.Plus, 0);
};

AdditiveexpressionContext.prototype.Minus = function() {
    return this.getToken(CPP14Parser.Minus, 0);
};

AdditiveexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAdditiveexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.additiveexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AdditiveexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 70;
    this.enterRecursionRule(localctx, 70, CPP14Parser.RULE_additiveexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 902;
        this.multiplicativeexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 912;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 910;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AdditiveexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_additiveexpression);
                    this.state = 904;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 905;
                    this.match(CPP14Parser.Plus);
                    this.state = 906;
                    this.multiplicativeexpression(0);
                    break;

                case 2:
                    localctx = new AdditiveexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_additiveexpression);
                    this.state = 907;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 908;
                    this.match(CPP14Parser.Minus);
                    this.state = 909;
                    this.multiplicativeexpression(0);
                    break;

                } 
            }
            this.state = 914;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ShiftexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_shiftexpression;
    return this;
}

ShiftexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftexpressionContext.prototype.constructor = ShiftexpressionContext;

ShiftexpressionContext.prototype.additiveexpression = function() {
    return this.getTypedRuleContext(AdditiveexpressionContext,0);
};

ShiftexpressionContext.prototype.shiftexpression = function() {
    return this.getTypedRuleContext(ShiftexpressionContext,0);
};

ShiftexpressionContext.prototype.LeftShift = function() {
    return this.getToken(CPP14Parser.LeftShift, 0);
};

ShiftexpressionContext.prototype.rightShift = function() {
    return this.getTypedRuleContext(RightShiftContext,0);
};

ShiftexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitShiftexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.shiftexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ShiftexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 72;
    this.enterRecursionRule(localctx, 72, CPP14Parser.RULE_shiftexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 916;
        this.additiveexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 927;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 925;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ShiftexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_shiftexpression);
                    this.state = 918;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 919;
                    this.match(CPP14Parser.LeftShift);
                    this.state = 920;
                    this.additiveexpression(0);
                    break;

                case 2:
                    localctx = new ShiftexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_shiftexpression);
                    this.state = 921;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 922;
                    this.rightShift();
                    this.state = 923;
                    this.additiveexpression(0);
                    break;

                } 
            }
            this.state = 929;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function RelationalexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_relationalexpression;
    return this;
}

RelationalexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalexpressionContext.prototype.constructor = RelationalexpressionContext;

RelationalexpressionContext.prototype.shiftexpression = function() {
    return this.getTypedRuleContext(ShiftexpressionContext,0);
};

RelationalexpressionContext.prototype.relationalexpression = function() {
    return this.getTypedRuleContext(RelationalexpressionContext,0);
};

RelationalexpressionContext.prototype.Less = function() {
    return this.getToken(CPP14Parser.Less, 0);
};

RelationalexpressionContext.prototype.Greater = function() {
    return this.getToken(CPP14Parser.Greater, 0);
};

RelationalexpressionContext.prototype.LessEqual = function() {
    return this.getToken(CPP14Parser.LessEqual, 0);
};

RelationalexpressionContext.prototype.GreaterEqual = function() {
    return this.getToken(CPP14Parser.GreaterEqual, 0);
};

RelationalexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitRelationalexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.relationalexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationalexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, CPP14Parser.RULE_relationalexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.shiftexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 947;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 945;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 933;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 934;
                    this.match(CPP14Parser.Less);
                    this.state = 935;
                    this.shiftexpression(0);
                    break;

                case 2:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 936;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 937;
                    this.match(CPP14Parser.Greater);
                    this.state = 938;
                    this.shiftexpression(0);
                    break;

                case 3:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 939;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 940;
                    this.match(CPP14Parser.LessEqual);
                    this.state = 941;
                    this.shiftexpression(0);
                    break;

                case 4:
                    localctx = new RelationalexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_relationalexpression);
                    this.state = 942;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 943;
                    this.match(CPP14Parser.GreaterEqual);
                    this.state = 944;
                    this.shiftexpression(0);
                    break;

                } 
            }
            this.state = 949;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function EqualityexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_equalityexpression;
    return this;
}

EqualityexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityexpressionContext.prototype.constructor = EqualityexpressionContext;

EqualityexpressionContext.prototype.relationalexpression = function() {
    return this.getTypedRuleContext(RelationalexpressionContext,0);
};

EqualityexpressionContext.prototype.equalityexpression = function() {
    return this.getTypedRuleContext(EqualityexpressionContext,0);
};

EqualityexpressionContext.prototype.Equal = function() {
    return this.getToken(CPP14Parser.Equal, 0);
};

EqualityexpressionContext.prototype.NotEqual = function() {
    return this.getToken(CPP14Parser.NotEqual, 0);
};

EqualityexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEqualityexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.equalityexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EqualityexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, CPP14Parser.RULE_equalityexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 951;
        this.relationalexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 961;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 959;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new EqualityexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_equalityexpression);
                    this.state = 953;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 954;
                    this.match(CPP14Parser.Equal);
                    this.state = 955;
                    this.relationalexpression(0);
                    break;

                case 2:
                    localctx = new EqualityexpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_equalityexpression);
                    this.state = 956;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 957;
                    this.match(CPP14Parser.NotEqual);
                    this.state = 958;
                    this.relationalexpression(0);
                    break;

                } 
            }
            this.state = 963;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AndexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_andexpression;
    return this;
}

AndexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndexpressionContext.prototype.constructor = AndexpressionContext;

AndexpressionContext.prototype.equalityexpression = function() {
    return this.getTypedRuleContext(EqualityexpressionContext,0);
};

AndexpressionContext.prototype.andexpression = function() {
    return this.getTypedRuleContext(AndexpressionContext,0);
};

AndexpressionContext.prototype.And = function() {
    return this.getToken(CPP14Parser.And, 0);
};

AndexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAndexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.andexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AndexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, CPP14Parser.RULE_andexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 965;
        this.equalityexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 972;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AndexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_andexpression);
                this.state = 967;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 968;
                this.match(CPP14Parser.And);
                this.state = 969;
                this.equalityexpression(0); 
            }
            this.state = 974;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExclusiveorexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exclusiveorexpression;
    return this;
}

ExclusiveorexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExclusiveorexpressionContext.prototype.constructor = ExclusiveorexpressionContext;

ExclusiveorexpressionContext.prototype.andexpression = function() {
    return this.getTypedRuleContext(AndexpressionContext,0);
};

ExclusiveorexpressionContext.prototype.exclusiveorexpression = function() {
    return this.getTypedRuleContext(ExclusiveorexpressionContext,0);
};

ExclusiveorexpressionContext.prototype.Caret = function() {
    return this.getToken(CPP14Parser.Caret, 0);
};

ExclusiveorexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExclusiveorexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.exclusiveorexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExclusiveorexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, CPP14Parser.RULE_exclusiveorexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 976;
        this.andexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 983;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExclusiveorexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_exclusiveorexpression);
                this.state = 978;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 979;
                this.match(CPP14Parser.Caret);
                this.state = 980;
                this.andexpression(0); 
            }
            this.state = 985;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InclusiveorexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_inclusiveorexpression;
    return this;
}

InclusiveorexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InclusiveorexpressionContext.prototype.constructor = InclusiveorexpressionContext;

InclusiveorexpressionContext.prototype.exclusiveorexpression = function() {
    return this.getTypedRuleContext(ExclusiveorexpressionContext,0);
};

InclusiveorexpressionContext.prototype.inclusiveorexpression = function() {
    return this.getTypedRuleContext(InclusiveorexpressionContext,0);
};

InclusiveorexpressionContext.prototype.Or = function() {
    return this.getToken(CPP14Parser.Or, 0);
};

InclusiveorexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInclusiveorexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.inclusiveorexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InclusiveorexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, CPP14Parser.RULE_inclusiveorexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 987;
        this.exclusiveorexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 994;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InclusiveorexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_inclusiveorexpression);
                this.state = 989;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 990;
                this.match(CPP14Parser.Or);
                this.state = 991;
                this.exclusiveorexpression(0); 
            }
            this.state = 996;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LogicalandexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_logicalandexpression;
    return this;
}

LogicalandexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalandexpressionContext.prototype.constructor = LogicalandexpressionContext;

LogicalandexpressionContext.prototype.inclusiveorexpression = function() {
    return this.getTypedRuleContext(InclusiveorexpressionContext,0);
};

LogicalandexpressionContext.prototype.logicalandexpression = function() {
    return this.getTypedRuleContext(LogicalandexpressionContext,0);
};

LogicalandexpressionContext.prototype.AndAnd = function() {
    return this.getToken(CPP14Parser.AndAnd, 0);
};

LogicalandexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLogicalandexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.logicalandexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LogicalandexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 84;
    this.enterRecursionRule(localctx, 84, CPP14Parser.RULE_logicalandexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 998;
        this.inclusiveorexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1005;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LogicalandexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_logicalandexpression);
                this.state = 1000;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1001;
                this.match(CPP14Parser.AndAnd);
                this.state = 1002;
                this.inclusiveorexpression(0); 
            }
            this.state = 1007;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LogicalorexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_logicalorexpression;
    return this;
}

LogicalorexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalorexpressionContext.prototype.constructor = LogicalorexpressionContext;

LogicalorexpressionContext.prototype.logicalandexpression = function() {
    return this.getTypedRuleContext(LogicalandexpressionContext,0);
};

LogicalorexpressionContext.prototype.logicalorexpression = function() {
    return this.getTypedRuleContext(LogicalorexpressionContext,0);
};

LogicalorexpressionContext.prototype.OrOr = function() {
    return this.getToken(CPP14Parser.OrOr, 0);
};

LogicalorexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLogicalorexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.logicalorexpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LogicalorexpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 86;
    this.enterRecursionRule(localctx, 86, CPP14Parser.RULE_logicalorexpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1009;
        this.logicalandexpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 1016;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LogicalorexpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_logicalorexpression);
                this.state = 1011;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1012;
                this.match(CPP14Parser.OrOr);
                this.state = 1013;
                this.logicalandexpression(0); 
            }
            this.state = 1018;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConditionalexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conditionalexpression;
    return this;
}

ConditionalexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalexpressionContext.prototype.constructor = ConditionalexpressionContext;

ConditionalexpressionContext.prototype.logicalorexpression = function() {
    return this.getTypedRuleContext(LogicalorexpressionContext,0);
};

ConditionalexpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionalexpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

ConditionalexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitConditionalexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConditionalexpressionContext = ConditionalexpressionContext;

CPP14Parser.prototype.conditionalexpression = function() {

    var localctx = new ConditionalexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CPP14Parser.RULE_conditionalexpression);
    try {
        this.state = 1026;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1019;
            this.logicalorexpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1020;
            this.logicalorexpression(0);
            this.state = 1021;
            this.match(CPP14Parser.Question);
            this.state = 1022;
            this.expression(0);
            this.state = 1023;
            this.match(CPP14Parser.Colon);
            this.state = 1024;
            this.assignmentexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_assignmentexpression;
    return this;
}

AssignmentexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentexpressionContext.prototype.constructor = AssignmentexpressionContext;

AssignmentexpressionContext.prototype.conditionalexpression = function() {
    return this.getTypedRuleContext(ConditionalexpressionContext,0);
};

AssignmentexpressionContext.prototype.logicalorexpression = function() {
    return this.getTypedRuleContext(LogicalorexpressionContext,0);
};

AssignmentexpressionContext.prototype.assignmentoperator = function() {
    return this.getTypedRuleContext(AssignmentoperatorContext,0);
};

AssignmentexpressionContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

AssignmentexpressionContext.prototype.throwexpression = function() {
    return this.getTypedRuleContext(ThrowexpressionContext,0);
};

AssignmentexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAssignmentexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AssignmentexpressionContext = AssignmentexpressionContext;

CPP14Parser.prototype.assignmentexpression = function() {

    var localctx = new AssignmentexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CPP14Parser.RULE_assignmentexpression);
    try {
        this.state = 1034;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1028;
            this.conditionalexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1029;
            this.logicalorexpression(0);
            this.state = 1030;
            this.assignmentoperator();
            this.state = 1031;
            this.initializerclause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1033;
            this.throwexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentoperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_assignmentoperator;
    return this;
}

AssignmentoperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentoperatorContext.prototype.constructor = AssignmentoperatorContext;

AssignmentoperatorContext.prototype.rightShiftAssign = function() {
    return this.getTypedRuleContext(RightShiftAssignContext,0);
};

AssignmentoperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAssignmentoperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AssignmentoperatorContext = AssignmentoperatorContext;

CPP14Parser.prototype.assignmentoperator = function() {

    var localctx = new AssignmentoperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CPP14Parser.RULE_assignmentoperator);
    try {
        this.state = 1047;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Assign:
            this.enterOuterAlt(localctx, 1);
            this.state = 1036;
            this.match(CPP14Parser.Assign);
            break;
        case CPP14Parser.StarAssign:
            this.enterOuterAlt(localctx, 2);
            this.state = 1037;
            this.match(CPP14Parser.StarAssign);
            break;
        case CPP14Parser.DivAssign:
            this.enterOuterAlt(localctx, 3);
            this.state = 1038;
            this.match(CPP14Parser.DivAssign);
            break;
        case CPP14Parser.ModAssign:
            this.enterOuterAlt(localctx, 4);
            this.state = 1039;
            this.match(CPP14Parser.ModAssign);
            break;
        case CPP14Parser.PlusAssign:
            this.enterOuterAlt(localctx, 5);
            this.state = 1040;
            this.match(CPP14Parser.PlusAssign);
            break;
        case CPP14Parser.MinusAssign:
            this.enterOuterAlt(localctx, 6);
            this.state = 1041;
            this.match(CPP14Parser.MinusAssign);
            break;
        case CPP14Parser.Greater:
            this.enterOuterAlt(localctx, 7);
            this.state = 1042;
            this.rightShiftAssign();
            break;
        case CPP14Parser.LeftShiftAssign:
            this.enterOuterAlt(localctx, 8);
            this.state = 1043;
            this.match(CPP14Parser.LeftShiftAssign);
            break;
        case CPP14Parser.AndAssign:
            this.enterOuterAlt(localctx, 9);
            this.state = 1044;
            this.match(CPP14Parser.AndAssign);
            break;
        case CPP14Parser.XorAssign:
            this.enterOuterAlt(localctx, 10);
            this.state = 1045;
            this.match(CPP14Parser.XorAssign);
            break;
        case CPP14Parser.OrAssign:
            this.enterOuterAlt(localctx, 11);
            this.state = 1046;
            this.match(CPP14Parser.OrAssign);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

ExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 94;
    this.enterRecursionRule(localctx, 94, CPP14Parser.RULE_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1050;
        this.assignmentexpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1057;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_expression);
                this.state = 1052;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1053;
                this.match(CPP14Parser.Comma);
                this.state = 1054;
                this.assignmentexpression(); 
            }
            this.state = 1059;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstantexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_constantexpression;
    return this;
}

ConstantexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantexpressionContext.prototype.constructor = ConstantexpressionContext;

ConstantexpressionContext.prototype.conditionalexpression = function() {
    return this.getTypedRuleContext(ConditionalexpressionContext,0);
};

ConstantexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitConstantexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConstantexpressionContext = ConstantexpressionContext;

CPP14Parser.prototype.constantexpression = function() {

    var localctx = new ConstantexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CPP14Parser.RULE_constantexpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1060;
        this.conditionalexpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.labeledstatement = function() {
    return this.getTypedRuleContext(LabeledstatementContext,0);
};

StatementContext.prototype.expressionstatement = function() {
    return this.getTypedRuleContext(ExpressionstatementContext,0);
};

StatementContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

StatementContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

StatementContext.prototype.selectionstatement = function() {
    return this.getTypedRuleContext(SelectionstatementContext,0);
};

StatementContext.prototype.switchstatement = function() {
    return this.getTypedRuleContext(SwitchstatementContext,0);
};

StatementContext.prototype.iterationstatement = function() {
    return this.getTypedRuleContext(IterationstatementContext,0);
};

StatementContext.prototype.whilestatement = function() {
    return this.getTypedRuleContext(WhilestatementContext,0);
};

StatementContext.prototype.dowhilestatement = function() {
    return this.getTypedRuleContext(DowhilestatementContext,0);
};

StatementContext.prototype.jumpstatement = function() {
    return this.getTypedRuleContext(JumpstatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.variabledeclarationstatement = function() {
    return this.getTypedRuleContext(VariabledeclarationstatementContext,0);
};

StatementContext.prototype.declarationstatement = function() {
    return this.getTypedRuleContext(DeclarationstatementContext,0);
};

StatementContext.prototype.tryblock = function() {
    return this.getTypedRuleContext(TryblockContext,0);
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.StatementContext = StatementContext;

CPP14Parser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CPP14Parser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 1113;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1062;
            this.labeledstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1064;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
            if(la_===1) {
                this.state = 1063;
                this.attributespecifierseq(0);

            }
            this.state = 1066;
            this.expressionstatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1068;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1067;
                this.attributespecifierseq(0);
            }

            this.state = 1070;
            this.compoundstatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1072;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1071;
                this.attributespecifierseq(0);
            }

            this.state = 1074;
            this.selectionstatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1076;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1075;
                this.attributespecifierseq(0);
            }

            this.state = 1078;
            this.switchstatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1080;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1079;
                this.attributespecifierseq(0);
            }

            this.state = 1082;
            this.iterationstatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1084;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1083;
                this.attributespecifierseq(0);
            }

            this.state = 1086;
            this.whilestatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1088;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1087;
                this.attributespecifierseq(0);
            }

            this.state = 1090;
            this.dowhilestatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1092;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1091;
                this.attributespecifierseq(0);
            }

            this.state = 1094;
            this.jumpstatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1096;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1095;
                this.attributespecifierseq(0);
            }

            this.state = 1098;
            this.breakStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1099;
                this.attributespecifierseq(0);
            }

            this.state = 1102;
            this.continueStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1104;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1103;
                this.attributespecifierseq(0);
            }

            this.state = 1106;
            this.returnStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1107;
            this.variabledeclarationstatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1108;
            this.declarationstatement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1110;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1109;
                this.attributespecifierseq(0);
            }

            this.state = 1112;
            this.tryblock();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabeledstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_labeledstatement;
    return this;
}

LabeledstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledstatementContext.prototype.constructor = LabeledstatementContext;

LabeledstatementContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

LabeledstatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabeledstatementContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

LabeledstatementContext.prototype.Case = function() {
    return this.getToken(CPP14Parser.Case, 0);
};

LabeledstatementContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

LabeledstatementContext.prototype.Default = function() {
    return this.getToken(CPP14Parser.Default, 0);
};

LabeledstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLabeledstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LabeledstatementContext = LabeledstatementContext;

CPP14Parser.prototype.labeledstatement = function() {

    var localctx = new LabeledstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CPP14Parser.RULE_labeledstatement);
    var _la = 0; // Token type
    try {
        this.state = 1135;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1115;
                this.attributespecifierseq(0);
            }

            this.state = 1118;
            this.match(CPP14Parser.Identifier);
            this.state = 1119;
            this.match(CPP14Parser.Colon);
            this.state = 1120;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1122;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1121;
                this.attributespecifierseq(0);
            }

            this.state = 1124;
            this.match(CPP14Parser.Case);
            this.state = 1125;
            this.constantexpression();
            this.state = 1126;
            this.match(CPP14Parser.Colon);
            this.state = 1127;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1130;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1129;
                this.attributespecifierseq(0);
            }

            this.state = 1132;
            this.match(CPP14Parser.Default);
            this.state = 1133;
            this.match(CPP14Parser.Colon);
            this.state = 1134;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_expressionstatement;
    return this;
}

ExpressionstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionstatementContext.prototype.constructor = ExpressionstatementContext;

ExpressionstatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExpressionstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExpressionstatementContext = ExpressionstatementContext;

CPP14Parser.prototype.expressionstatement = function() {

    var localctx = new ExpressionstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CPP14Parser.RULE_expressionstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1138;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
            this.state = 1137;
            this.expression(0);
        }

        this.state = 1140;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CompoundstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_compoundstatement;
    return this;
}

CompoundstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundstatementContext.prototype.constructor = CompoundstatementContext;

CompoundstatementContext.prototype.statementseq = function() {
    return this.getTypedRuleContext(StatementseqContext,0);
};

CompoundstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCompoundstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CompoundstatementContext = CompoundstatementContext;

CPP14Parser.prototype.compoundstatement = function() {

    var localctx = new CompoundstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CPP14Parser.RULE_compoundstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1142;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1144;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.For - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Goto - 32)) | (1 << (CPP14Parser.If - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Return - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Switch - 32)) | (1 << (CPP14Parser.This - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.PlusPlus - 111)) | (1 << (CPP14Parser.MinusMinus - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Semi - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)) | (1 << (CPP14Parser.Integerliteral - 111)) | (1 << (CPP14Parser.Characterliteral - 111)) | (1 << (CPP14Parser.Floatingliteral - 111)) | (1 << (CPP14Parser.Stringliteral - 111)) | (1 << (CPP14Parser.Booleanliteral - 111)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 111)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 111)) | (1 << (CPP14Parser.Userdefinedstringliteral - 111)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 111)))) !== 0)) {
            this.state = 1143;
            this.statementseq();
        }

        this.state = 1146;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_statementseq;
    return this;
}

StatementseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementseqContext.prototype.constructor = StatementseqContext;

StatementseqContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitStatementseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.StatementseqContext = StatementseqContext;

CPP14Parser.prototype.statementseq = function() {

    var localctx = new StatementseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CPP14Parser.RULE_statementseq);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1148;
        this.statement();
        this.state = 1152;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.For - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Goto - 32)) | (1 << (CPP14Parser.If - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Return - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Switch - 32)) | (1 << (CPP14Parser.This - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.PlusPlus - 111)) | (1 << (CPP14Parser.MinusMinus - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Semi - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)) | (1 << (CPP14Parser.Integerliteral - 111)) | (1 << (CPP14Parser.Characterliteral - 111)) | (1 << (CPP14Parser.Floatingliteral - 111)) | (1 << (CPP14Parser.Stringliteral - 111)) | (1 << (CPP14Parser.Booleanliteral - 111)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 111)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 111)) | (1 << (CPP14Parser.Userdefinedstringliteral - 111)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 111)))) !== 0)) {
            this.state = 1149;
            this.statement();
            this.state = 1154;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectionstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_selectionstatement;
    return this;
}

SelectionstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectionstatementContext.prototype.constructor = SelectionstatementContext;

SelectionstatementContext.prototype.If = function() {
    return this.getToken(CPP14Parser.If, 0);
};

SelectionstatementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

SelectionstatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

SelectionstatementContext.prototype.Else = function() {
    return this.getToken(CPP14Parser.Else, 0);
};

SelectionstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSelectionstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SelectionstatementContext = SelectionstatementContext;

CPP14Parser.prototype.selectionstatement = function() {

    var localctx = new SelectionstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CPP14Parser.RULE_selectionstatement);
    try {
        this.state = 1169;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1155;
            this.match(CPP14Parser.If);
            this.state = 1156;
            this.match(CPP14Parser.LeftParen);
            this.state = 1157;
            this.condition();
            this.state = 1158;
            this.match(CPP14Parser.RightParen);
            this.state = 1159;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1161;
            this.match(CPP14Parser.If);
            this.state = 1162;
            this.match(CPP14Parser.LeftParen);
            this.state = 1163;
            this.condition();
            this.state = 1164;
            this.match(CPP14Parser.RightParen);
            this.state = 1165;
            this.statement();
            this.state = 1166;
            this.match(CPP14Parser.Else);
            this.state = 1167;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_switchstatement;
    return this;
}

SwitchstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchstatementContext.prototype.constructor = SwitchstatementContext;

SwitchstatementContext.prototype.Switch = function() {
    return this.getToken(CPP14Parser.Switch, 0);
};

SwitchstatementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

SwitchstatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SwitchstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSwitchstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SwitchstatementContext = SwitchstatementContext;

CPP14Parser.prototype.switchstatement = function() {

    var localctx = new SwitchstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CPP14Parser.RULE_switchstatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1171;
        this.match(CPP14Parser.Switch);
        this.state = 1172;
        this.match(CPP14Parser.LeftParen);
        this.state = 1173;
        this.condition();
        this.state = 1174;
        this.match(CPP14Parser.RightParen);
        this.state = 1175;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_condition;
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

ConditionContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ConditionContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

ConditionContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ConditionContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

ConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConditionContext = ConditionContext;

CPP14Parser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CPP14Parser.RULE_condition);
    var _la = 0; // Token type
    try {
        this.state = 1193;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1177;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1179;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1178;
                this.attributespecifierseq(0);
            }

            this.state = 1181;
            this.declspecifierseq();
            this.state = 1182;
            this.declarator();
            this.state = 1183;
            this.match(CPP14Parser.Assign);
            this.state = 1184;
            this.initializerclause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1186;
                this.attributespecifierseq(0);
            }

            this.state = 1189;
            this.declspecifierseq();
            this.state = 1190;
            this.declarator();
            this.state = 1191;
            this.bracedinitlist();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhilestatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_whilestatement;
    return this;
}

WhilestatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhilestatementContext.prototype.constructor = WhilestatementContext;

WhilestatementContext.prototype.While = function() {
    return this.getToken(CPP14Parser.While, 0);
};

WhilestatementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

WhilestatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhilestatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitWhilestatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.WhilestatementContext = WhilestatementContext;

CPP14Parser.prototype.whilestatement = function() {

    var localctx = new WhilestatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CPP14Parser.RULE_whilestatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1195;
        this.match(CPP14Parser.While);
        this.state = 1196;
        this.match(CPP14Parser.LeftParen);
        this.state = 1197;
        this.condition();
        this.state = 1198;
        this.match(CPP14Parser.RightParen);
        this.state = 1199;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DowhilestatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_dowhilestatement;
    return this;
}

DowhilestatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DowhilestatementContext.prototype.constructor = DowhilestatementContext;

DowhilestatementContext.prototype.Do = function() {
    return this.getToken(CPP14Parser.Do, 0);
};

DowhilestatementContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

DowhilestatementContext.prototype.While = function() {
    return this.getToken(CPP14Parser.While, 0);
};

DowhilestatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DowhilestatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDowhilestatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DowhilestatementContext = DowhilestatementContext;

CPP14Parser.prototype.dowhilestatement = function() {

    var localctx = new DowhilestatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CPP14Parser.RULE_dowhilestatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1201;
        this.match(CPP14Parser.Do);
        this.state = 1202;
        this.compoundstatement();
        this.state = 1203;
        this.match(CPP14Parser.While);
        this.state = 1204;
        this.match(CPP14Parser.LeftParen);
        this.state = 1205;
        this.expression(0);
        this.state = 1206;
        this.match(CPP14Parser.RightParen);
        this.state = 1207;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IterationstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_iterationstatement;
    return this;
}

IterationstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationstatementContext.prototype.constructor = IterationstatementContext;

IterationstatementContext.prototype.For = function() {
    return this.getToken(CPP14Parser.For, 0);
};

IterationstatementContext.prototype.forinitstatement = function() {
    return this.getTypedRuleContext(ForinitstatementContext,0);
};

IterationstatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IterationstatementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

IterationstatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IterationstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitIterationstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.IterationstatementContext = IterationstatementContext;

CPP14Parser.prototype.iterationstatement = function() {

    var localctx = new IterationstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CPP14Parser.RULE_iterationstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1209;
        this.match(CPP14Parser.For);
        this.state = 1210;
        this.match(CPP14Parser.LeftParen);
        this.state = 1211;
        this.forinitstatement();
        this.state = 1213;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.This - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
            this.state = 1212;
            this.condition();
        }

        this.state = 1215;
        this.match(CPP14Parser.Semi);
        this.state = 1217;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
            this.state = 1216;
            this.expression(0);
        }

        this.state = 1219;
        this.match(CPP14Parser.RightParen);
        this.state = 1220;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnhancedForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enhancedForStatement;
    return this;
}

EnhancedForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForStatementContext.prototype.constructor = EnhancedForStatementContext;

EnhancedForStatementContext.prototype.For = function() {
    return this.getToken(CPP14Parser.For, 0);
};

EnhancedForStatementContext.prototype.forrangedeclaration = function() {
    return this.getTypedRuleContext(ForrangedeclarationContext,0);
};

EnhancedForStatementContext.prototype.forrangeinitializer = function() {
    return this.getTypedRuleContext(ForrangeinitializerContext,0);
};

EnhancedForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

EnhancedForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnhancedForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnhancedForStatementContext = EnhancedForStatementContext;

CPP14Parser.prototype.enhancedForStatement = function() {

    var localctx = new EnhancedForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CPP14Parser.RULE_enhancedForStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1222;
        this.match(CPP14Parser.For);
        this.state = 1223;
        this.match(CPP14Parser.LeftParen);
        this.state = 1224;
        this.forrangedeclaration();
        this.state = 1225;
        this.match(CPP14Parser.Colon);
        this.state = 1226;
        this.forrangeinitializer();
        this.state = 1227;
        this.match(CPP14Parser.RightParen);
        this.state = 1228;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForinitstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forinitstatement;
    return this;
}

ForinitstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForinitstatementContext.prototype.constructor = ForinitstatementContext;

ForinitstatementContext.prototype.expressionstatement = function() {
    return this.getTypedRuleContext(ExpressionstatementContext,0);
};

ForinitstatementContext.prototype.variabledeclarationstatement = function() {
    return this.getTypedRuleContext(VariabledeclarationstatementContext,0);
};

ForinitstatementContext.prototype.simpledeclaration = function() {
    return this.getTypedRuleContext(SimpledeclarationContext,0);
};

ForinitstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitForinitstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ForinitstatementContext = ForinitstatementContext;

CPP14Parser.prototype.forinitstatement = function() {

    var localctx = new ForinitstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CPP14Parser.RULE_forinitstatement);
    try {
        this.state = 1233;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1230;
            this.expressionstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1231;
            this.variabledeclarationstatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1232;
            this.simpledeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForrangedeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forrangedeclaration;
    return this;
}

ForrangedeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForrangedeclarationContext.prototype.constructor = ForrangedeclarationContext;

ForrangedeclarationContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

ForrangedeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ForrangedeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ForrangedeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitForrangedeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ForrangedeclarationContext = ForrangedeclarationContext;

CPP14Parser.prototype.forrangedeclaration = function() {

    var localctx = new ForrangedeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CPP14Parser.RULE_forrangedeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1236;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1235;
            this.attributespecifierseq(0);
        }

        this.state = 1238;
        this.declspecifierseq();
        this.state = 1239;
        this.declarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForrangeinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_forrangeinitializer;
    return this;
}

ForrangeinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForrangeinitializerContext.prototype.constructor = ForrangeinitializerContext;

ForrangeinitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForrangeinitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

ForrangeinitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitForrangeinitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ForrangeinitializerContext = ForrangeinitializerContext;

CPP14Parser.prototype.forrangeinitializer = function() {

    var localctx = new ForrangeinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CPP14Parser.RULE_forrangeinitializer);
    try {
        this.state = 1243;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Alignof:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Const_cast:
        case CPP14Parser.Decltype:
        case CPP14Parser.Delete:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Dynamic_cast:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.New:
        case CPP14Parser.Noexcept:
        case CPP14Parser.Nullptr:
        case CPP14Parser.Operator:
        case CPP14Parser.Reinterpret_cast:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Sizeof:
        case CPP14Parser.Static_cast:
        case CPP14Parser.This:
        case CPP14Parser.Throw:
        case CPP14Parser.Typeid:
        case CPP14Parser.Typename:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Plus:
        case CPP14Parser.Minus:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Or:
        case CPP14Parser.Tilde:
        case CPP14Parser.Not:
        case CPP14Parser.PlusPlus:
        case CPP14Parser.MinusMinus:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
        case CPP14Parser.Integerliteral:
        case CPP14Parser.Characterliteral:
        case CPP14Parser.Floatingliteral:
        case CPP14Parser.Stringliteral:
        case CPP14Parser.Booleanliteral:
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 1241;
            this.expression(0);
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 1242;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JumpstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_jumpstatement;
    return this;
}

JumpstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JumpstatementContext.prototype.constructor = JumpstatementContext;

JumpstatementContext.prototype.Goto = function() {
    return this.getToken(CPP14Parser.Goto, 0);
};

JumpstatementContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

JumpstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitJumpstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.JumpstatementContext = JumpstatementContext;

CPP14Parser.prototype.jumpstatement = function() {

    var localctx = new JumpstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CPP14Parser.RULE_jumpstatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1245;
        this.match(CPP14Parser.Goto);
        this.state = 1246;
        this.match(CPP14Parser.Identifier);
        this.state = 1247;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(CPP14Parser.Break, 0);
};

BreakStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBreakStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BreakStatementContext = BreakStatementContext;

CPP14Parser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CPP14Parser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1249;
        this.match(CPP14Parser.Break);
        this.state = 1250;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(CPP14Parser.Continue, 0);
};

ContinueStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitContinueStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ContinueStatementContext = ContinueStatementContext;

CPP14Parser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CPP14Parser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1252;
        this.match(CPP14Parser.Continue);
        this.state = 1253;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(CPP14Parser.Return, 0);
};

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ReturnStatementContext = ReturnStatementContext;

CPP14Parser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CPP14Parser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.state = 1264;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1255;
            this.match(CPP14Parser.Return);
            this.state = 1257;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 1256;
                this.expression(0);
            }

            this.state = 1259;
            this.match(CPP14Parser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1260;
            this.match(CPP14Parser.Return);
            this.state = 1261;
            this.bracedinitlist();
            this.state = 1262;
            this.match(CPP14Parser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarationstatement;
    return this;
}

DeclarationstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationstatementContext.prototype.constructor = DeclarationstatementContext;

DeclarationstatementContext.prototype.simpledeclaration = function() {
    return this.getTypedRuleContext(SimpledeclarationContext,0);
};

DeclarationstatementContext.prototype.blockdeclarationwithoutsimpledeclaration = function() {
    return this.getTypedRuleContext(BlockdeclarationwithoutsimpledeclarationContext,0);
};

DeclarationstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclarationstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclarationstatementContext = DeclarationstatementContext;

CPP14Parser.prototype.declarationstatement = function() {

    var localctx = new DeclarationstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CPP14Parser.RULE_declarationstatement);
    try {
        this.state = 1268;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1266;
            this.simpledeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1267;
            this.blockdeclarationwithoutsimpledeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarationseq;
    return this;
}

DeclarationseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationseqContext.prototype.constructor = DeclarationseqContext;

DeclarationseqContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

DeclarationseqContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

DeclarationseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclarationseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.declarationseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 138;
    this.enterRecursionRule(localctx, 138, CPP14Parser.RULE_declarationseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1271;
        this.declaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1277;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DeclarationseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_declarationseq);
                this.state = 1273;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1274;
                this.declaration(); 
            }
            this.state = 1279;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function MyclassbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_myclassbody;
    return this;
}

MyclassbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MyclassbodyContext.prototype.constructor = MyclassbodyContext;

MyclassbodyContext.prototype.memberspecification = function() {
    return this.getTypedRuleContext(MemberspecificationContext,0);
};

MyclassbodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMyclassbody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MyclassbodyContext = MyclassbodyContext;

CPP14Parser.prototype.myclassbody = function() {

    var localctx = new MyclassbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CPP14Parser.RULE_myclassbody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Private - 32)) | (1 << (CPP14Parser.Protected - 32)) | (1 << (CPP14Parser.Public - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (CPP14Parser.Doublecolon - 120)) | (1 << (CPP14Parser.Semi - 120)) | (1 << (CPP14Parser.Ellipsis - 120)) | (1 << (CPP14Parser.Identifier - 120)))) !== 0)) {
            this.state = 1280;
            this.memberspecification();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MyclassspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_myclassspecifier;
    return this;
}

MyclassspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MyclassspecifierContext.prototype.constructor = MyclassspecifierContext;

MyclassspecifierContext.prototype.myclasshead = function() {
    return this.getTypedRuleContext(MyclassheadContext,0);
};

MyclassspecifierContext.prototype.myclassbody = function() {
    return this.getTypedRuleContext(MyclassbodyContext,0);
};

MyclassspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMyclassspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MyclassspecifierContext = MyclassspecifierContext;

CPP14Parser.prototype.myclassspecifier = function() {

    var localctx = new MyclassspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CPP14Parser.RULE_myclassspecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1283;
        this.myclasshead();
        this.state = 1284;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1285;
        this.myclassbody();
        this.state = 1286;
        this.match(CPP14Parser.RightBrace);
        this.state = 1287;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MyclassheadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_myclasshead;
    return this;
}

MyclassheadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MyclassheadContext.prototype.constructor = MyclassheadContext;

MyclassheadContext.prototype.classkey = function() {
    return this.getTypedRuleContext(ClasskeyContext,0);
};

MyclassheadContext.prototype.classheadname = function() {
    return this.getTypedRuleContext(ClassheadnameContext,0);
};

MyclassheadContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

MyclassheadContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

MyclassheadContext.prototype.classvirtspecifier = function() {
    return this.getTypedRuleContext(ClassvirtspecifierContext,0);
};

MyclassheadContext.prototype.baseclause = function() {
    return this.getTypedRuleContext(BaseclauseContext,0);
};

MyclassheadContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMyclasshead(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MyclassheadContext = MyclassheadContext;

CPP14Parser.prototype.myclasshead = function() {

    var localctx = new MyclassheadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CPP14Parser.RULE_myclasshead);
    var _la = 0; // Token type
    try {
        this.state = 1310;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1289;
            this.classkey();
            this.state = 1291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1290;
                this.attributespecifierseq(0);
            }

            this.state = 1294;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
            if(la_===1) {
                this.state = 1293;
                this.nestednamespecifier(0);

            }
            this.state = 1296;
            this.classheadname();
            this.state = 1298;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Final) {
                this.state = 1297;
                this.classvirtspecifier();
            }

            this.state = 1301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1300;
                this.baseclause();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1303;
            this.classkey();
            this.state = 1305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1304;
                this.attributespecifierseq(0);
            }

            this.state = 1308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1307;
                this.baseclause();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.variabledeclarationstatement = function() {
    return this.getTypedRuleContext(VariabledeclarationstatementContext,0);
};

DeclarationContext.prototype.blockdeclaration = function() {
    return this.getTypedRuleContext(BlockdeclarationContext,0);
};

DeclarationContext.prototype.myclassspecifier = function() {
    return this.getTypedRuleContext(MyclassspecifierContext,0);
};

DeclarationContext.prototype.functiondefinition = function() {
    return this.getTypedRuleContext(FunctiondefinitionContext,0);
};

DeclarationContext.prototype.templatedeclaration = function() {
    return this.getTypedRuleContext(TemplatedeclarationContext,0);
};

DeclarationContext.prototype.explicitinstantiation = function() {
    return this.getTypedRuleContext(ExplicitinstantiationContext,0);
};

DeclarationContext.prototype.explicitspecialization = function() {
    return this.getTypedRuleContext(ExplicitspecializationContext,0);
};

DeclarationContext.prototype.linkagespecification = function() {
    return this.getTypedRuleContext(LinkagespecificationContext,0);
};

DeclarationContext.prototype.namespacedefinition = function() {
    return this.getTypedRuleContext(NamespacedefinitionContext,0);
};

DeclarationContext.prototype.emptydeclaration = function() {
    return this.getTypedRuleContext(EmptydeclarationContext,0);
};

DeclarationContext.prototype.attributedeclaration = function() {
    return this.getTypedRuleContext(AttributedeclarationContext,0);
};

DeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclarationContext = DeclarationContext;

CPP14Parser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CPP14Parser.RULE_declaration);
    try {
        this.state = 1323;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1312;
            this.variabledeclarationstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1313;
            this.blockdeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1314;
            this.myclassspecifier();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1315;
            this.functiondefinition();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1316;
            this.templatedeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1317;
            this.explicitinstantiation();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1318;
            this.explicitspecialization();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1319;
            this.linkagespecification();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1320;
            this.namespacedefinition();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1321;
            this.emptydeclaration();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1322;
            this.attributedeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockdeclarationwithoutsimpledeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_blockdeclarationwithoutsimpledeclaration;
    return this;
}

BlockdeclarationwithoutsimpledeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockdeclarationwithoutsimpledeclarationContext.prototype.constructor = BlockdeclarationwithoutsimpledeclarationContext;

BlockdeclarationwithoutsimpledeclarationContext.prototype.asmdefinition = function() {
    return this.getTypedRuleContext(AsmdefinitionContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.namespacealiasdefinition = function() {
    return this.getTypedRuleContext(NamespacealiasdefinitionContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.usingdeclaration = function() {
    return this.getTypedRuleContext(UsingdeclarationContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.usingdirective = function() {
    return this.getTypedRuleContext(UsingdirectiveContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.static_assertdeclaration = function() {
    return this.getTypedRuleContext(Static_assertdeclarationContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.aliasdeclaration = function() {
    return this.getTypedRuleContext(AliasdeclarationContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.opaqueenumdeclaration = function() {
    return this.getTypedRuleContext(OpaqueenumdeclarationContext,0);
};

BlockdeclarationwithoutsimpledeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBlockdeclarationwithoutsimpledeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BlockdeclarationwithoutsimpledeclarationContext = BlockdeclarationwithoutsimpledeclarationContext;

CPP14Parser.prototype.blockdeclarationwithoutsimpledeclaration = function() {

    var localctx = new BlockdeclarationwithoutsimpledeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CPP14Parser.RULE_blockdeclarationwithoutsimpledeclaration);
    try {
        this.state = 1332;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1325;
            this.asmdefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1326;
            this.namespacealiasdefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1327;
            this.usingdeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1328;
            this.usingdirective();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1329;
            this.static_assertdeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1330;
            this.aliasdeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1331;
            this.opaqueenumdeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_blockdeclaration;
    return this;
}

BlockdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockdeclarationContext.prototype.constructor = BlockdeclarationContext;

BlockdeclarationContext.prototype.simpledeclaration = function() {
    return this.getTypedRuleContext(SimpledeclarationContext,0);
};

BlockdeclarationContext.prototype.blockdeclarationwithoutsimpledeclaration = function() {
    return this.getTypedRuleContext(BlockdeclarationwithoutsimpledeclarationContext,0);
};

BlockdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBlockdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BlockdeclarationContext = BlockdeclarationContext;

CPP14Parser.prototype.blockdeclaration = function() {

    var localctx = new BlockdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CPP14Parser.RULE_blockdeclaration);
    try {
        this.state = 1336;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1334;
            this.simpledeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1335;
            this.blockdeclarationwithoutsimpledeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AliasdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_aliasdeclaration;
    return this;
}

AliasdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasdeclarationContext.prototype.constructor = AliasdeclarationContext;

AliasdeclarationContext.prototype.Using = function() {
    return this.getToken(CPP14Parser.Using, 0);
};

AliasdeclarationContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AliasdeclarationContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

AliasdeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

AliasdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAliasdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AliasdeclarationContext = AliasdeclarationContext;

CPP14Parser.prototype.aliasdeclaration = function() {

    var localctx = new AliasdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CPP14Parser.RULE_aliasdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1338;
        this.match(CPP14Parser.Using);
        this.state = 1339;
        this.match(CPP14Parser.Identifier);
        this.state = 1341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1340;
            this.attributespecifierseq(0);
        }

        this.state = 1343;
        this.match(CPP14Parser.Assign);
        this.state = 1344;
        this.typeid();
        this.state = 1345;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariabledeclarationstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_variabledeclarationstatement;
    return this;
}

VariabledeclarationstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariabledeclarationstatementContext.prototype.constructor = VariabledeclarationstatementContext;

VariabledeclarationstatementContext.prototype.variabledeclaration = function() {
    return this.getTypedRuleContext(VariabledeclarationContext,0);
};

VariabledeclarationstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVariabledeclarationstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.VariabledeclarationstatementContext = VariabledeclarationstatementContext;

CPP14Parser.prototype.variabledeclarationstatement = function() {

    var localctx = new VariabledeclarationstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CPP14Parser.RULE_variabledeclarationstatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1347;
        this.variabledeclaration();
        this.state = 1348;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariabledeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_variabledeclaration;
    return this;
}

VariabledeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariabledeclarationContext.prototype.constructor = VariabledeclarationContext;

VariabledeclarationContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

VariabledeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

VariabledeclarationContext.prototype.declspecifierseqwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierseqwithouttypeContext,0);
};

VariabledeclarationContext.prototype.variableDeclaratorList = function() {
    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
};

VariabledeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVariabledeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.VariabledeclarationContext = VariabledeclarationContext;

CPP14Parser.prototype.variabledeclaration = function() {

    var localctx = new VariabledeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CPP14Parser.RULE_variabledeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1350;
            this.attributespecifierseq(0);
        }

        this.state = 1354;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 15)) & ~0x1f) == 0 && ((1 << (_la - 15)) & ((1 << (CPP14Parser.Constexpr - 15)) | (1 << (CPP14Parser.Explicit - 15)) | (1 << (CPP14Parser.Extern - 15)) | (1 << (CPP14Parser.Friend - 15)) | (1 << (CPP14Parser.Inline - 15)) | (1 << (CPP14Parser.Mutable - 15)))) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CPP14Parser.Register - 50)) | (1 << (CPP14Parser.Static - 50)) | (1 << (CPP14Parser.Thread_local - 50)) | (1 << (CPP14Parser.Typedef - 50)) | (1 << (CPP14Parser.Virtual - 50)))) !== 0)) {
            this.state = 1353;
            this.declspecifierseqwithouttype();
        }

        this.state = 1356;
        this.typespecifier();
        this.state = 1358;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
        if(la_===1) {
            this.state = 1357;
            this.variableDeclaratorList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_variableDeclaratorList;
    return this;
}

VariableDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorListContext.prototype.constructor = VariableDeclaratorListContext;

VariableDeclaratorListContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVariableDeclaratorList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.VariableDeclaratorListContext = VariableDeclaratorListContext;

CPP14Parser.prototype.variableDeclaratorList = function() {

    var localctx = new VariableDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CPP14Parser.RULE_variableDeclaratorList);
    var _la = 0; // Token type
    try {
        this.state = 1369;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Semi:
            this.enterOuterAlt(localctx, 1);

            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Operator:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Tilde:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1361;
            this.variableDeclarator();
            this.state = 1366;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CPP14Parser.Comma) {
                this.state = 1362;
                this.match(CPP14Parser.Comma);
                this.state = 1363;
                this.variableDeclarator();
                this.state = 1368;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.declaratorid = function() {
    return this.getTypedRuleContext(DeclaratoridContext,0);
};

VariableDeclaratorContext.prototype.ptroperator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PtroperatorContext);
    } else {
        return this.getTypedRuleContext(PtroperatorContext,i);
    }
};

VariableDeclaratorContext.prototype.LeftBracket = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.LeftBracket);
    } else {
        return this.getToken(CPP14Parser.LeftBracket, i);
    }
};


VariableDeclaratorContext.prototype.RightBracket = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.RightBracket);
    } else {
        return this.getToken(CPP14Parser.RightBracket, i);
    }
};


VariableDeclaratorContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

VariableDeclaratorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

VariableDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVariableDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.VariableDeclaratorContext = VariableDeclaratorContext;

CPP14Parser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CPP14Parser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1374;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,126,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1371;
                this.ptroperator(); 
            }
            this.state = 1376;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,126,this._ctx);
        }

        this.state = 1377;
        this.declaratorid();
        this.state = 1385;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CPP14Parser.LeftBracket) {
            this.state = 1378;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1380;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 1379;
                this.expression(0);
            }

            this.state = 1382;
            this.match(CPP14Parser.RightBracket);
            this.state = 1387;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1390;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Assign) {
            this.state = 1388;
            this.match(CPP14Parser.Assign);
            this.state = 1389;
            this.initializerclause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_dims;
    return this;
}

DimsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimsContext.prototype.constructor = DimsContext;

DimsContext.prototype.LeftBracket = function() {
    return this.getToken(CPP14Parser.LeftBracket, 0);
};

DimsContext.prototype.RightBracket = function() {
    return this.getToken(CPP14Parser.RightBracket, 0);
};

DimsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDims(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DimsContext = DimsContext;

CPP14Parser.prototype.dims = function() {

    var localctx = new DimsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CPP14Parser.RULE_dims);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1392;
        this.match(CPP14Parser.LeftBracket);
        this.state = 1393;
        this.match(CPP14Parser.RightBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpledeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpledeclaration;
    return this;
}

SimpledeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpledeclarationContext.prototype.constructor = SimpledeclarationContext;

SimpledeclarationContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

SimpledeclarationContext.prototype.initdeclaratorlist = function() {
    return this.getTypedRuleContext(InitdeclaratorlistContext,0);
};

SimpledeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

SimpledeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSimpledeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SimpledeclarationContext = SimpledeclarationContext;

CPP14Parser.prototype.simpledeclaration = function() {

    var localctx = new SimpledeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CPP14Parser.RULE_simpledeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1409;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Constexpr:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Enum:
        case CPP14Parser.Explicit:
        case CPP14Parser.Extern:
        case CPP14Parser.Float:
        case CPP14Parser.Friend:
        case CPP14Parser.Inline:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Mutable:
        case CPP14Parser.Operator:
        case CPP14Parser.Register:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Static:
        case CPP14Parser.Struct:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Typedef:
        case CPP14Parser.Typename:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Virtual:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Tilde:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Semi:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1396;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
            if(la_===1) {
                this.state = 1395;
                this.declspecifierseq();

            }
            this.state = 1399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Decltype || _la===CPP14Parser.Operator || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)) | (1 << (CPP14Parser.Tilde - 78)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
                this.state = 1398;
                this.initdeclaratorlist();
            }

            this.state = 1401;
            this.match(CPP14Parser.Semi);
            break;
        case CPP14Parser.Alignas:
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1402;
            this.attributespecifierseq(0);
            this.state = 1404;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
            if(la_===1) {
                this.state = 1403;
                this.declspecifierseq();

            }
            this.state = 1406;
            this.initdeclaratorlist();
            this.state = 1407;
            this.match(CPP14Parser.Semi);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Static_assertdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_static_assertdeclaration;
    return this;
}

Static_assertdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Static_assertdeclarationContext.prototype.constructor = Static_assertdeclarationContext;

Static_assertdeclarationContext.prototype.Static_assert = function() {
    return this.getToken(CPP14Parser.Static_assert, 0);
};

Static_assertdeclarationContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

Static_assertdeclarationContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

Static_assertdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitStatic_assertdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.Static_assertdeclarationContext = Static_assertdeclarationContext;

CPP14Parser.prototype.static_assertdeclaration = function() {

    var localctx = new Static_assertdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CPP14Parser.RULE_static_assertdeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1411;
        this.match(CPP14Parser.Static_assert);
        this.state = 1412;
        this.match(CPP14Parser.LeftParen);
        this.state = 1413;
        this.constantexpression();
        this.state = 1414;
        this.match(CPP14Parser.Comma);
        this.state = 1415;
        this.match(CPP14Parser.Stringliteral);
        this.state = 1416;
        this.match(CPP14Parser.RightParen);
        this.state = 1417;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptydeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_emptydeclaration;
    return this;
}

EmptydeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptydeclarationContext.prototype.constructor = EmptydeclarationContext;


EmptydeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEmptydeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EmptydeclarationContext = EmptydeclarationContext;

CPP14Parser.prototype.emptydeclaration = function() {

    var localctx = new EmptydeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CPP14Parser.RULE_emptydeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1419;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributedeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributedeclaration;
    return this;
}

AttributedeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributedeclarationContext.prototype.constructor = AttributedeclarationContext;

AttributedeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

AttributedeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributedeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributedeclarationContext = AttributedeclarationContext;

CPP14Parser.prototype.attributedeclaration = function() {

    var localctx = new AttributedeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CPP14Parser.RULE_attributedeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1421;
        this.attributespecifierseq(0);
        this.state = 1422;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declspecifier;
    return this;
}

DeclspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclspecifierContext.prototype.constructor = DeclspecifierContext;

DeclspecifierContext.prototype.declspecifierwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierwithouttypeContext,0);
};

DeclspecifierContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

DeclspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclspecifierContext = DeclspecifierContext;

CPP14Parser.prototype.declspecifier = function() {

    var localctx = new DeclspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CPP14Parser.RULE_declspecifier);
    try {
        this.state = 1426;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Constexpr:
        case CPP14Parser.Explicit:
        case CPP14Parser.Extern:
        case CPP14Parser.Friend:
        case CPP14Parser.Inline:
        case CPP14Parser.Mutable:
        case CPP14Parser.Register:
        case CPP14Parser.Static:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Typedef:
        case CPP14Parser.Virtual:
            this.enterOuterAlt(localctx, 1);
            this.state = 1424;
            this.declspecifierwithouttype();
            break;
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Enum:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Struct:
        case CPP14Parser.Typename:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1425;
            this.typespecifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclspecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declspecifierseq;
    return this;
}

DeclspecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclspecifierseqContext.prototype.constructor = DeclspecifierseqContext;

DeclspecifierseqContext.prototype.declspecifier = function() {
    return this.getTypedRuleContext(DeclspecifierContext,0);
};

DeclspecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

DeclspecifierseqContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

DeclspecifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclspecifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclspecifierseqContext = DeclspecifierseqContext;

CPP14Parser.prototype.declspecifierseq = function() {

    var localctx = new DeclspecifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CPP14Parser.RULE_declspecifierseq);
    try {
        this.state = 1435;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1428;
            this.declspecifier();
            this.state = 1430;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
            if(la_===1) {
                this.state = 1429;
                this.attributespecifierseq(0);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1432;
            this.declspecifier();
            this.state = 1433;
            this.declspecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclspecifierwithouttypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declspecifierwithouttype;
    return this;
}

DeclspecifierwithouttypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclspecifierwithouttypeContext.prototype.constructor = DeclspecifierwithouttypeContext;

DeclspecifierwithouttypeContext.prototype.storageclassspecifier = function() {
    return this.getTypedRuleContext(StorageclassspecifierContext,0);
};

DeclspecifierwithouttypeContext.prototype.functionspecifier = function() {
    return this.getTypedRuleContext(FunctionspecifierContext,0);
};

DeclspecifierwithouttypeContext.prototype.Friend = function() {
    return this.getToken(CPP14Parser.Friend, 0);
};

DeclspecifierwithouttypeContext.prototype.Typedef = function() {
    return this.getToken(CPP14Parser.Typedef, 0);
};

DeclspecifierwithouttypeContext.prototype.Constexpr = function() {
    return this.getToken(CPP14Parser.Constexpr, 0);
};

DeclspecifierwithouttypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclspecifierwithouttype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclspecifierwithouttypeContext = DeclspecifierwithouttypeContext;

CPP14Parser.prototype.declspecifierwithouttype = function() {

    var localctx = new DeclspecifierwithouttypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CPP14Parser.RULE_declspecifierwithouttype);
    try {
        this.state = 1442;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Extern:
        case CPP14Parser.Mutable:
        case CPP14Parser.Register:
        case CPP14Parser.Static:
        case CPP14Parser.Thread_local:
            this.enterOuterAlt(localctx, 1);
            this.state = 1437;
            this.storageclassspecifier();
            break;
        case CPP14Parser.Explicit:
        case CPP14Parser.Inline:
        case CPP14Parser.Virtual:
            this.enterOuterAlt(localctx, 2);
            this.state = 1438;
            this.functionspecifier();
            break;
        case CPP14Parser.Friend:
            this.enterOuterAlt(localctx, 3);
            this.state = 1439;
            this.match(CPP14Parser.Friend);
            break;
        case CPP14Parser.Typedef:
            this.enterOuterAlt(localctx, 4);
            this.state = 1440;
            this.match(CPP14Parser.Typedef);
            break;
        case CPP14Parser.Constexpr:
            this.enterOuterAlt(localctx, 5);
            this.state = 1441;
            this.match(CPP14Parser.Constexpr);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclspecifierseqwithouttypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declspecifierseqwithouttype;
    return this;
}

DeclspecifierseqwithouttypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclspecifierseqwithouttypeContext.prototype.constructor = DeclspecifierseqwithouttypeContext;

DeclspecifierseqwithouttypeContext.prototype.declspecifierwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierwithouttypeContext,0);
};

DeclspecifierseqwithouttypeContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

DeclspecifierseqwithouttypeContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

DeclspecifierseqwithouttypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclspecifierseqwithouttype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclspecifierseqwithouttypeContext = DeclspecifierseqwithouttypeContext;

CPP14Parser.prototype.declspecifierseqwithouttype = function() {

    var localctx = new DeclspecifierseqwithouttypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CPP14Parser.RULE_declspecifierseqwithouttype);
    var _la = 0; // Token type
    try {
        this.state = 1451;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1444;
            this.declspecifierwithouttype();
            this.state = 1446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1445;
                this.attributespecifierseq(0);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1448;
            this.declspecifierwithouttype();
            this.state = 1449;
            this.declspecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageclassspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_storageclassspecifier;
    return this;
}

StorageclassspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageclassspecifierContext.prototype.constructor = StorageclassspecifierContext;

StorageclassspecifierContext.prototype.Register = function() {
    return this.getToken(CPP14Parser.Register, 0);
};

StorageclassspecifierContext.prototype.Static = function() {
    return this.getToken(CPP14Parser.Static, 0);
};

StorageclassspecifierContext.prototype.Thread_local = function() {
    return this.getToken(CPP14Parser.Thread_local, 0);
};

StorageclassspecifierContext.prototype.Extern = function() {
    return this.getToken(CPP14Parser.Extern, 0);
};

StorageclassspecifierContext.prototype.Mutable = function() {
    return this.getToken(CPP14Parser.Mutable, 0);
};

StorageclassspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitStorageclassspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.StorageclassspecifierContext = StorageclassspecifierContext;

CPP14Parser.prototype.storageclassspecifier = function() {

    var localctx = new StorageclassspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CPP14Parser.RULE_storageclassspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1453;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Extern || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (CPP14Parser.Mutable - 40)) | (1 << (CPP14Parser.Register - 40)) | (1 << (CPP14Parser.Static - 40)) | (1 << (CPP14Parser.Thread_local - 40)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionspecifier;
    return this;
}

FunctionspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionspecifierContext.prototype.constructor = FunctionspecifierContext;

FunctionspecifierContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

FunctionspecifierContext.prototype.Virtual = function() {
    return this.getToken(CPP14Parser.Virtual, 0);
};

FunctionspecifierContext.prototype.Explicit = function() {
    return this.getToken(CPP14Parser.Explicit, 0);
};

FunctionspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctionspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctionspecifierContext = FunctionspecifierContext;

CPP14Parser.prototype.functionspecifier = function() {

    var localctx = new FunctionspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CPP14Parser.RULE_functionspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1455;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Explicit || _la===CPP14Parser.Inline || _la===CPP14Parser.Virtual)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedefnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typedefname;
    return this;
}

TypedefnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefnameContext.prototype.constructor = TypedefnameContext;

TypedefnameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TypedefnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypedefname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypedefnameContext = TypedefnameContext;

CPP14Parser.prototype.typedefname = function() {

    var localctx = new TypedefnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CPP14Parser.RULE_typedefname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1457;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typespecifier;
    return this;
}

TypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypespecifierContext.prototype.constructor = TypespecifierContext;

TypespecifierContext.prototype.trailingtypespecifier = function() {
    return this.getTypedRuleContext(TrailingtypespecifierContext,0);
};

TypespecifierContext.prototype.myclassspecifier = function() {
    return this.getTypedRuleContext(MyclassspecifierContext,0);
};

TypespecifierContext.prototype.enumspecifier = function() {
    return this.getTypedRuleContext(EnumspecifierContext,0);
};

TypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypespecifierContext = TypespecifierContext;

CPP14Parser.prototype.typespecifier = function() {

    var localctx = new TypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CPP14Parser.RULE_typespecifier);
    try {
        this.state = 1462;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1459;
            this.trailingtypespecifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1460;
            this.myclassspecifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1461;
            this.enumspecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrailingtypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingtypespecifier;
    return this;
}

TrailingtypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailingtypespecifierContext.prototype.constructor = TrailingtypespecifierContext;

TrailingtypespecifierContext.prototype.simpletypespecifier = function() {
    return this.getTypedRuleContext(SimpletypespecifierContext,0);
};

TrailingtypespecifierContext.prototype.elaboratedtypespecifier = function() {
    return this.getTypedRuleContext(ElaboratedtypespecifierContext,0);
};

TrailingtypespecifierContext.prototype.typenamespecifier = function() {
    return this.getTypedRuleContext(TypenamespecifierContext,0);
};

TrailingtypespecifierContext.prototype.cvqualifier = function() {
    return this.getTypedRuleContext(CvqualifierContext,0);
};

TrailingtypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTrailingtypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TrailingtypespecifierContext = TrailingtypespecifierContext;

CPP14Parser.prototype.trailingtypespecifier = function() {

    var localctx = new TrailingtypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CPP14Parser.RULE_trailingtypespecifier);
    try {
        this.state = 1468;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1464;
            this.simpletypespecifier();
            break;
        case CPP14Parser.Class:
        case CPP14Parser.Enum:
        case CPP14Parser.Struct:
        case CPP14Parser.Union:
            this.enterOuterAlt(localctx, 2);
            this.state = 1465;
            this.elaboratedtypespecifier();
            break;
        case CPP14Parser.Typename:
            this.enterOuterAlt(localctx, 3);
            this.state = 1466;
            this.typenamespecifier();
            break;
        case CPP14Parser.Const:
        case CPP14Parser.Volatile:
            this.enterOuterAlt(localctx, 4);
            this.state = 1467;
            this.cvqualifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypespecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typespecifierseq;
    return this;
}

TypespecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypespecifierseqContext.prototype.constructor = TypespecifierseqContext;

TypespecifierseqContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

TypespecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

TypespecifierseqContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

TypespecifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypespecifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypespecifierseqContext = TypespecifierseqContext;

CPP14Parser.prototype.typespecifierseq = function() {

    var localctx = new TypespecifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CPP14Parser.RULE_typespecifierseq);
    try {
        this.state = 1477;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1470;
            this.typespecifier();
            this.state = 1472;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
            if(la_===1) {
                this.state = 1471;
                this.attributespecifierseq(0);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1474;
            this.typespecifier();
            this.state = 1475;
            this.typespecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrailingtypespecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingtypespecifierseq;
    return this;
}

TrailingtypespecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailingtypespecifierseqContext.prototype.constructor = TrailingtypespecifierseqContext;

TrailingtypespecifierseqContext.prototype.trailingtypespecifier = function() {
    return this.getTypedRuleContext(TrailingtypespecifierContext,0);
};

TrailingtypespecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

TrailingtypespecifierseqContext.prototype.trailingtypespecifierseq = function() {
    return this.getTypedRuleContext(TrailingtypespecifierseqContext,0);
};

TrailingtypespecifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTrailingtypespecifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TrailingtypespecifierseqContext = TrailingtypespecifierseqContext;

CPP14Parser.prototype.trailingtypespecifierseq = function() {

    var localctx = new TrailingtypespecifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CPP14Parser.RULE_trailingtypespecifierseq);
    try {
        this.state = 1486;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1479;
            this.trailingtypespecifier();
            this.state = 1481;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
            if(la_===1) {
                this.state = 1480;
                this.attributespecifierseq(0);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1483;
            this.trailingtypespecifier();
            this.state = 1484;
            this.trailingtypespecifierseq();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpletypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpletypespecifier;
    return this;
}

SimpletypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpletypespecifierContext.prototype.constructor = SimpletypespecifierContext;

SimpletypespecifierContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

SimpletypespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

SimpletypespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

SimpletypespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

SimpletypespecifierContext.prototype.Char = function() {
    return this.getToken(CPP14Parser.Char, 0);
};

SimpletypespecifierContext.prototype.Char16 = function() {
    return this.getToken(CPP14Parser.Char16, 0);
};

SimpletypespecifierContext.prototype.Char32 = function() {
    return this.getToken(CPP14Parser.Char32, 0);
};

SimpletypespecifierContext.prototype.Wchar = function() {
    return this.getToken(CPP14Parser.Wchar, 0);
};

SimpletypespecifierContext.prototype.Bool = function() {
    return this.getToken(CPP14Parser.Bool, 0);
};

SimpletypespecifierContext.prototype.Short = function() {
    return this.getToken(CPP14Parser.Short, 0);
};

SimpletypespecifierContext.prototype.Int = function() {
    return this.getToken(CPP14Parser.Int, 0);
};

SimpletypespecifierContext.prototype.Long = function() {
    return this.getToken(CPP14Parser.Long, 0);
};

SimpletypespecifierContext.prototype.Signed = function() {
    return this.getToken(CPP14Parser.Signed, 0);
};

SimpletypespecifierContext.prototype.Unsigned = function() {
    return this.getToken(CPP14Parser.Unsigned, 0);
};

SimpletypespecifierContext.prototype.simpletypespecifier = function() {
    return this.getTypedRuleContext(SimpletypespecifierContext,0);
};

SimpletypespecifierContext.prototype.Float = function() {
    return this.getToken(CPP14Parser.Float, 0);
};

SimpletypespecifierContext.prototype.Double = function() {
    return this.getToken(CPP14Parser.Double, 0);
};

SimpletypespecifierContext.prototype.Void = function() {
    return this.getToken(CPP14Parser.Void, 0);
};

SimpletypespecifierContext.prototype.Auto = function() {
    return this.getToken(CPP14Parser.Auto, 0);
};

SimpletypespecifierContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

SimpletypespecifierContext.prototype.File = function() {
    return this.getToken(CPP14Parser.File, 0);
};

SimpletypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSimpletypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SimpletypespecifierContext = SimpletypespecifierContext;

CPP14Parser.prototype.simpletypespecifier = function() {

    var localctx = new SimpletypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CPP14Parser.RULE_simpletypespecifier);
    try {
        this.state = 1515;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1489;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
            if(la_===1) {
                this.state = 1488;
                this.nestednamespecifier(0);

            }
            this.state = 1491;
            this.typename();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1492;
            this.nestednamespecifier(0);
            this.state = 1493;
            this.match(CPP14Parser.Template);
            this.state = 1494;
            this.simpletemplateid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1496;
            this.match(CPP14Parser.Char);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1497;
            this.match(CPP14Parser.Char16);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1498;
            this.match(CPP14Parser.Char32);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1499;
            this.match(CPP14Parser.Wchar);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1500;
            this.match(CPP14Parser.Bool);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1501;
            this.match(CPP14Parser.Short);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1502;
            this.match(CPP14Parser.Int);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1503;
            this.match(CPP14Parser.Long);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1504;
            this.match(CPP14Parser.Signed);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1505;
            this.match(CPP14Parser.Unsigned);
            this.state = 1507;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
            if(la_===1) {
                this.state = 1506;
                this.simpletypespecifier();

            }
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1509;
            this.match(CPP14Parser.Float);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1510;
            this.match(CPP14Parser.Double);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1511;
            this.match(CPP14Parser.Void);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 1512;
            this.match(CPP14Parser.Auto);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 1513;
            this.decltypespecifier();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 1514;
            this.match(CPP14Parser.File);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typename;
    return this;
}

TypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypenameContext.prototype.constructor = TypenameContext;

TypenameContext.prototype.myclassname = function() {
    return this.getTypedRuleContext(MyclassnameContext,0);
};

TypenameContext.prototype.enumname = function() {
    return this.getTypedRuleContext(EnumnameContext,0);
};

TypenameContext.prototype.typedefname = function() {
    return this.getTypedRuleContext(TypedefnameContext,0);
};

TypenameContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

TypenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypenameContext = TypenameContext;

CPP14Parser.prototype.typename = function() {

    var localctx = new TypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CPP14Parser.RULE_typename);
    try {
        this.state = 1521;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1517;
            this.myclassname();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1518;
            this.enumname();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1519;
            this.typedefname();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1520;
            this.simpletemplateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecltypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_decltypespecifier;
    return this;
}

DecltypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecltypespecifierContext.prototype.constructor = DecltypespecifierContext;

DecltypespecifierContext.prototype.Decltype = function() {
    return this.getToken(CPP14Parser.Decltype, 0);
};

DecltypespecifierContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DecltypespecifierContext.prototype.Auto = function() {
    return this.getToken(CPP14Parser.Auto, 0);
};

DecltypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDecltypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DecltypespecifierContext = DecltypespecifierContext;

CPP14Parser.prototype.decltypespecifier = function() {

    var localctx = new DecltypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CPP14Parser.RULE_decltypespecifier);
    try {
        this.state = 1532;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1523;
            this.match(CPP14Parser.Decltype);
            this.state = 1524;
            this.match(CPP14Parser.LeftParen);
            this.state = 1525;
            this.expression(0);
            this.state = 1526;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1528;
            this.match(CPP14Parser.Decltype);
            this.state = 1529;
            this.match(CPP14Parser.LeftParen);
            this.state = 1530;
            this.match(CPP14Parser.Auto);
            this.state = 1531;
            this.match(CPP14Parser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElaboratedtypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_elaboratedtypespecifier;
    return this;
}

ElaboratedtypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElaboratedtypespecifierContext.prototype.constructor = ElaboratedtypespecifierContext;

ElaboratedtypespecifierContext.prototype.classkey = function() {
    return this.getTypedRuleContext(ClasskeyContext,0);
};

ElaboratedtypespecifierContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

ElaboratedtypespecifierContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ElaboratedtypespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ElaboratedtypespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

ElaboratedtypespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

ElaboratedtypespecifierContext.prototype.Enum = function() {
    return this.getToken(CPP14Parser.Enum, 0);
};

ElaboratedtypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitElaboratedtypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ElaboratedtypespecifierContext = ElaboratedtypespecifierContext;

CPP14Parser.prototype.elaboratedtypespecifier = function() {

    var localctx = new ElaboratedtypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CPP14Parser.RULE_elaboratedtypespecifier);
    var _la = 0; // Token type
    try {
        this.state = 1558;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1534;
            this.classkey();
            this.state = 1536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1535;
                this.attributespecifierseq(0);
            }

            this.state = 1539;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
            if(la_===1) {
                this.state = 1538;
                this.nestednamespecifier(0);

            }
            this.state = 1541;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1543;
            this.classkey();
            this.state = 1544;
            this.simpletemplateid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1546;
            this.classkey();
            this.state = 1547;
            this.nestednamespecifier(0);
            this.state = 1549;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Template) {
                this.state = 1548;
                this.match(CPP14Parser.Template);
            }

            this.state = 1551;
            this.simpletemplateid();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1553;
            this.match(CPP14Parser.Enum);
            this.state = 1555;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
            if(la_===1) {
                this.state = 1554;
                this.nestednamespecifier(0);

            }
            this.state = 1557;
            this.match(CPP14Parser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumname;
    return this;
}

EnumnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumnameContext.prototype.constructor = EnumnameContext;

EnumnameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

EnumnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumnameContext = EnumnameContext;

CPP14Parser.prototype.enumname = function() {

    var localctx = new EnumnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CPP14Parser.RULE_enumname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1560;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumspecifier;
    return this;
}

EnumspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumspecifierContext.prototype.constructor = EnumspecifierContext;

EnumspecifierContext.prototype.enumhead = function() {
    return this.getTypedRuleContext(EnumheadContext,0);
};

EnumspecifierContext.prototype.enumeratorlist = function() {
    return this.getTypedRuleContext(EnumeratorlistContext,0);
};

EnumspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumspecifierContext = EnumspecifierContext;

CPP14Parser.prototype.enumspecifier = function() {

    var localctx = new EnumspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CPP14Parser.RULE_enumspecifier);
    var _la = 0; // Token type
    try {
        this.state = 1575;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1562;
            this.enumhead();
            this.state = 1563;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1565;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 1564;
                this.enumeratorlist(0);
            }

            this.state = 1567;
            this.match(CPP14Parser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1569;
            this.enumhead();
            this.state = 1570;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1571;
            this.enumeratorlist(0);
            this.state = 1572;
            this.match(CPP14Parser.Comma);
            this.state = 1573;
            this.match(CPP14Parser.RightBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumheadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumhead;
    return this;
}

EnumheadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumheadContext.prototype.constructor = EnumheadContext;

EnumheadContext.prototype.enumkey = function() {
    return this.getTypedRuleContext(EnumkeyContext,0);
};

EnumheadContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

EnumheadContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

EnumheadContext.prototype.enumbase = function() {
    return this.getTypedRuleContext(EnumbaseContext,0);
};

EnumheadContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

EnumheadContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumhead(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumheadContext = EnumheadContext;

CPP14Parser.prototype.enumhead = function() {

    var localctx = new EnumheadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CPP14Parser.RULE_enumhead);
    var _la = 0; // Token type
    try {
        this.state = 1596;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1577;
            this.enumkey();
            this.state = 1579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1578;
                this.attributespecifierseq(0);
            }

            this.state = 1582;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 1581;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 1585;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1584;
                this.enumbase();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1587;
            this.enumkey();
            this.state = 1589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 1588;
                this.attributespecifierseq(0);
            }

            this.state = 1591;
            this.nestednamespecifier(0);
            this.state = 1592;
            this.match(CPP14Parser.Identifier);
            this.state = 1594;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 1593;
                this.enumbase();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpaqueenumdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_opaqueenumdeclaration;
    return this;
}

OpaqueenumdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpaqueenumdeclarationContext.prototype.constructor = OpaqueenumdeclarationContext;

OpaqueenumdeclarationContext.prototype.enumkey = function() {
    return this.getTypedRuleContext(EnumkeyContext,0);
};

OpaqueenumdeclarationContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

OpaqueenumdeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

OpaqueenumdeclarationContext.prototype.enumbase = function() {
    return this.getTypedRuleContext(EnumbaseContext,0);
};

OpaqueenumdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitOpaqueenumdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.OpaqueenumdeclarationContext = OpaqueenumdeclarationContext;

CPP14Parser.prototype.opaqueenumdeclaration = function() {

    var localctx = new OpaqueenumdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CPP14Parser.RULE_opaqueenumdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1598;
        this.enumkey();
        this.state = 1600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1599;
            this.attributespecifierseq(0);
        }

        this.state = 1602;
        this.match(CPP14Parser.Identifier);
        this.state = 1604;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Colon) {
            this.state = 1603;
            this.enumbase();
        }

        this.state = 1606;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumkeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumkey;
    return this;
}

EnumkeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumkeyContext.prototype.constructor = EnumkeyContext;

EnumkeyContext.prototype.Enum = function() {
    return this.getToken(CPP14Parser.Enum, 0);
};

EnumkeyContext.prototype.Class = function() {
    return this.getToken(CPP14Parser.Class, 0);
};

EnumkeyContext.prototype.Struct = function() {
    return this.getToken(CPP14Parser.Struct, 0);
};

EnumkeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumkey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumkeyContext = EnumkeyContext;

CPP14Parser.prototype.enumkey = function() {

    var localctx = new EnumkeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CPP14Parser.RULE_enumkey);
    try {
        this.state = 1613;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1608;
            this.match(CPP14Parser.Enum);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1609;
            this.match(CPP14Parser.Enum);
            this.state = 1610;
            this.match(CPP14Parser.Class);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1611;
            this.match(CPP14Parser.Enum);
            this.state = 1612;
            this.match(CPP14Parser.Struct);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumbaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumbase;
    return this;
}

EnumbaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumbaseContext.prototype.constructor = EnumbaseContext;

EnumbaseContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

EnumbaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumbase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumbaseContext = EnumbaseContext;

CPP14Parser.prototype.enumbase = function() {

    var localctx = new EnumbaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CPP14Parser.RULE_enumbase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1615;
        this.match(CPP14Parser.Colon);
        this.state = 1616;
        this.typespecifierseq();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumeratorlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumeratorlist;
    return this;
}

EnumeratorlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorlistContext.prototype.constructor = EnumeratorlistContext;

EnumeratorlistContext.prototype.enumeratordefinition = function() {
    return this.getTypedRuleContext(EnumeratordefinitionContext,0);
};

EnumeratorlistContext.prototype.enumeratorlist = function() {
    return this.getTypedRuleContext(EnumeratorlistContext,0);
};

EnumeratorlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumeratorlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.enumeratorlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EnumeratorlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 214;
    this.enterRecursionRule(localctx, 214, CPP14Parser.RULE_enumeratorlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1619;
        this.enumeratordefinition();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1626;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,167,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new EnumeratorlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_enumeratorlist);
                this.state = 1621;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1622;
                this.match(CPP14Parser.Comma);
                this.state = 1623;
                this.enumeratordefinition(); 
            }
            this.state = 1628;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,167,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function EnumeratordefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumeratordefinition;
    return this;
}

EnumeratordefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratordefinitionContext.prototype.constructor = EnumeratordefinitionContext;

EnumeratordefinitionContext.prototype.enumerator = function() {
    return this.getTypedRuleContext(EnumeratorContext,0);
};

EnumeratordefinitionContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

EnumeratordefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumeratordefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumeratordefinitionContext = EnumeratordefinitionContext;

CPP14Parser.prototype.enumeratordefinition = function() {

    var localctx = new EnumeratordefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, CPP14Parser.RULE_enumeratordefinition);
    try {
        this.state = 1634;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1629;
            this.enumerator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1630;
            this.enumerator();
            this.state = 1631;
            this.match(CPP14Parser.Assign);
            this.state = 1632;
            this.constantexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumeratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_enumerator;
    return this;
}

EnumeratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorContext.prototype.constructor = EnumeratorContext;

EnumeratorContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

EnumeratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitEnumerator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.EnumeratorContext = EnumeratorContext;

CPP14Parser.prototype.enumerator = function() {

    var localctx = new EnumeratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CPP14Parser.RULE_enumerator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1636;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacename;
    return this;
}

NamespacenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacenameContext.prototype.constructor = NamespacenameContext;

NamespacenameContext.prototype.originalnamespacename = function() {
    return this.getTypedRuleContext(OriginalnamespacenameContext,0);
};

NamespacenameContext.prototype.namespacealias = function() {
    return this.getTypedRuleContext(NamespacealiasContext,0);
};

NamespacenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamespacename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamespacenameContext = NamespacenameContext;

CPP14Parser.prototype.namespacename = function() {

    var localctx = new NamespacenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CPP14Parser.RULE_namespacename);
    try {
        this.state = 1640;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1638;
            this.originalnamespacename();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1639;
            this.namespacealias();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OriginalnamespacenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_originalnamespacename;
    return this;
}

OriginalnamespacenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OriginalnamespacenameContext.prototype.constructor = OriginalnamespacenameContext;

OriginalnamespacenameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

OriginalnamespacenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitOriginalnamespacename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.OriginalnamespacenameContext = OriginalnamespacenameContext;

CPP14Parser.prototype.originalnamespacename = function() {

    var localctx = new OriginalnamespacenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CPP14Parser.RULE_originalnamespacename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1642;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacedefinition;
    return this;
}

NamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacedefinitionContext.prototype.constructor = NamespacedefinitionContext;

NamespacedefinitionContext.prototype.namednamespacedefinition = function() {
    return this.getTypedRuleContext(NamednamespacedefinitionContext,0);
};

NamespacedefinitionContext.prototype.unnamednamespacedefinition = function() {
    return this.getTypedRuleContext(UnnamednamespacedefinitionContext,0);
};

NamespacedefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamespacedefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamespacedefinitionContext = NamespacedefinitionContext;

CPP14Parser.prototype.namespacedefinition = function() {

    var localctx = new NamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CPP14Parser.RULE_namespacedefinition);
    try {
        this.state = 1646;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1644;
            this.namednamespacedefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1645;
            this.unnamednamespacedefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamednamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namednamespacedefinition;
    return this;
}

NamednamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamednamespacedefinitionContext.prototype.constructor = NamednamespacedefinitionContext;

NamednamespacedefinitionContext.prototype.originalnamespacedefinition = function() {
    return this.getTypedRuleContext(OriginalnamespacedefinitionContext,0);
};

NamednamespacedefinitionContext.prototype.extensionnamespacedefinition = function() {
    return this.getTypedRuleContext(ExtensionnamespacedefinitionContext,0);
};

NamednamespacedefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamednamespacedefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamednamespacedefinitionContext = NamednamespacedefinitionContext;

CPP14Parser.prototype.namednamespacedefinition = function() {

    var localctx = new NamednamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CPP14Parser.RULE_namednamespacedefinition);
    try {
        this.state = 1650;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1648;
            this.originalnamespacedefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1649;
            this.extensionnamespacedefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OriginalnamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_originalnamespacedefinition;
    return this;
}

OriginalnamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OriginalnamespacedefinitionContext.prototype.constructor = OriginalnamespacedefinitionContext;

OriginalnamespacedefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

OriginalnamespacedefinitionContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

OriginalnamespacedefinitionContext.prototype.namespacebody = function() {
    return this.getTypedRuleContext(NamespacebodyContext,0);
};

OriginalnamespacedefinitionContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

OriginalnamespacedefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitOriginalnamespacedefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.OriginalnamespacedefinitionContext = OriginalnamespacedefinitionContext;

CPP14Parser.prototype.originalnamespacedefinition = function() {

    var localctx = new OriginalnamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CPP14Parser.RULE_originalnamespacedefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1653;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Inline) {
            this.state = 1652;
            this.match(CPP14Parser.Inline);
        }

        this.state = 1655;
        this.match(CPP14Parser.Namespace);
        this.state = 1656;
        this.match(CPP14Parser.Identifier);
        this.state = 1657;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1658;
        this.namespacebody();
        this.state = 1659;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtensionnamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_extensionnamespacedefinition;
    return this;
}

ExtensionnamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionnamespacedefinitionContext.prototype.constructor = ExtensionnamespacedefinitionContext;

ExtensionnamespacedefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

ExtensionnamespacedefinitionContext.prototype.originalnamespacename = function() {
    return this.getTypedRuleContext(OriginalnamespacenameContext,0);
};

ExtensionnamespacedefinitionContext.prototype.namespacebody = function() {
    return this.getTypedRuleContext(NamespacebodyContext,0);
};

ExtensionnamespacedefinitionContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

ExtensionnamespacedefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExtensionnamespacedefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExtensionnamespacedefinitionContext = ExtensionnamespacedefinitionContext;

CPP14Parser.prototype.extensionnamespacedefinition = function() {

    var localctx = new ExtensionnamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, CPP14Parser.RULE_extensionnamespacedefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1662;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Inline) {
            this.state = 1661;
            this.match(CPP14Parser.Inline);
        }

        this.state = 1664;
        this.match(CPP14Parser.Namespace);
        this.state = 1665;
        this.originalnamespacename();
        this.state = 1666;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1667;
        this.namespacebody();
        this.state = 1668;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnnamednamespacedefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_unnamednamespacedefinition;
    return this;
}

UnnamednamespacedefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnnamednamespacedefinitionContext.prototype.constructor = UnnamednamespacedefinitionContext;

UnnamednamespacedefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

UnnamednamespacedefinitionContext.prototype.namespacebody = function() {
    return this.getTypedRuleContext(NamespacebodyContext,0);
};

UnnamednamespacedefinitionContext.prototype.Inline = function() {
    return this.getToken(CPP14Parser.Inline, 0);
};

UnnamednamespacedefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUnnamednamespacedefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UnnamednamespacedefinitionContext = UnnamednamespacedefinitionContext;

CPP14Parser.prototype.unnamednamespacedefinition = function() {

    var localctx = new UnnamednamespacedefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CPP14Parser.RULE_unnamednamespacedefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Inline) {
            this.state = 1670;
            this.match(CPP14Parser.Inline);
        }

        this.state = 1673;
        this.match(CPP14Parser.Namespace);
        this.state = 1674;
        this.match(CPP14Parser.LeftBrace);
        this.state = 1675;
        this.namespacebody();
        this.state = 1676;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacebodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacebody;
    return this;
}

NamespacebodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacebodyContext.prototype.constructor = NamespacebodyContext;

NamespacebodyContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

NamespacebodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamespacebody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamespacebodyContext = NamespacebodyContext;

CPP14Parser.prototype.namespacebody = function() {

    var localctx = new NamespacebodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CPP14Parser.RULE_namespacebody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1679;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Semi - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
            this.state = 1678;
            this.declarationseq(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacealiasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacealias;
    return this;
}

NamespacealiasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacealiasContext.prototype.constructor = NamespacealiasContext;

NamespacealiasContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

NamespacealiasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamespacealias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamespacealiasContext = NamespacealiasContext;

CPP14Parser.prototype.namespacealias = function() {

    var localctx = new NamespacealiasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CPP14Parser.RULE_namespacealias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1681;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacealiasdefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_namespacealiasdefinition;
    return this;
}

NamespacealiasdefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacealiasdefinitionContext.prototype.constructor = NamespacealiasdefinitionContext;

NamespacealiasdefinitionContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

NamespacealiasdefinitionContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

NamespacealiasdefinitionContext.prototype.qualifiednamespacespecifier = function() {
    return this.getTypedRuleContext(QualifiednamespacespecifierContext,0);
};

NamespacealiasdefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNamespacealiasdefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NamespacealiasdefinitionContext = NamespacealiasdefinitionContext;

CPP14Parser.prototype.namespacealiasdefinition = function() {

    var localctx = new NamespacealiasdefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CPP14Parser.RULE_namespacealiasdefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1683;
        this.match(CPP14Parser.Namespace);
        this.state = 1684;
        this.match(CPP14Parser.Identifier);
        this.state = 1685;
        this.match(CPP14Parser.Assign);
        this.state = 1686;
        this.qualifiednamespacespecifier();
        this.state = 1687;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiednamespacespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_qualifiednamespacespecifier;
    return this;
}

QualifiednamespacespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiednamespacespecifierContext.prototype.constructor = QualifiednamespacespecifierContext;

QualifiednamespacespecifierContext.prototype.namespacename = function() {
    return this.getTypedRuleContext(NamespacenameContext,0);
};

QualifiednamespacespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

QualifiednamespacespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitQualifiednamespacespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.QualifiednamespacespecifierContext = QualifiednamespacespecifierContext;

CPP14Parser.prototype.qualifiednamespacespecifier = function() {

    var localctx = new QualifiednamespacespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CPP14Parser.RULE_qualifiednamespacespecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1690;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
        if(la_===1) {
            this.state = 1689;
            this.nestednamespecifier(0);

        }
        this.state = 1692;
        this.namespacename();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_usingdeclaration;
    return this;
}

UsingdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingdeclarationContext.prototype.constructor = UsingdeclarationContext;

UsingdeclarationContext.prototype.Using = function() {
    return this.getToken(CPP14Parser.Using, 0);
};

UsingdeclarationContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

UsingdeclarationContext.prototype.unqualifiedid = function() {
    return this.getTypedRuleContext(UnqualifiedidContext,0);
};

UsingdeclarationContext.prototype.Typename = function() {
    return this.getToken(CPP14Parser.Typename, 0);
};

UsingdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUsingdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UsingdeclarationContext = UsingdeclarationContext;

CPP14Parser.prototype.usingdeclaration = function() {

    var localctx = new UsingdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CPP14Parser.RULE_usingdeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1707;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1694;
            this.match(CPP14Parser.Using);
            this.state = 1696;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Typename) {
                this.state = 1695;
                this.match(CPP14Parser.Typename);
            }

            this.state = 1698;
            this.nestednamespecifier(0);
            this.state = 1699;
            this.unqualifiedid();
            this.state = 1700;
            this.match(CPP14Parser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1702;
            this.match(CPP14Parser.Using);
            this.state = 1703;
            this.match(CPP14Parser.Doublecolon);
            this.state = 1704;
            this.unqualifiedid();
            this.state = 1705;
            this.match(CPP14Parser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingdirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_usingdirective;
    return this;
}

UsingdirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingdirectiveContext.prototype.constructor = UsingdirectiveContext;

UsingdirectiveContext.prototype.Using = function() {
    return this.getToken(CPP14Parser.Using, 0);
};

UsingdirectiveContext.prototype.Namespace = function() {
    return this.getToken(CPP14Parser.Namespace, 0);
};

UsingdirectiveContext.prototype.namespacename = function() {
    return this.getTypedRuleContext(NamespacenameContext,0);
};

UsingdirectiveContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

UsingdirectiveContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

UsingdirectiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUsingdirective(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UsingdirectiveContext = UsingdirectiveContext;

CPP14Parser.prototype.usingdirective = function() {

    var localctx = new UsingdirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CPP14Parser.RULE_usingdirective);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 1709;
            this.attributespecifierseq(0);
        }

        this.state = 1712;
        this.match(CPP14Parser.Using);
        this.state = 1713;
        this.match(CPP14Parser.Namespace);
        this.state = 1715;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
        if(la_===1) {
            this.state = 1714;
            this.nestednamespecifier(0);

        }
        this.state = 1717;
        this.namespacename();
        this.state = 1718;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AsmdefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_asmdefinition;
    return this;
}

AsmdefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AsmdefinitionContext.prototype.constructor = AsmdefinitionContext;

AsmdefinitionContext.prototype.Asm = function() {
    return this.getToken(CPP14Parser.Asm, 0);
};

AsmdefinitionContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

AsmdefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAsmdefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AsmdefinitionContext = AsmdefinitionContext;

CPP14Parser.prototype.asmdefinition = function() {

    var localctx = new AsmdefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CPP14Parser.RULE_asmdefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1720;
        this.match(CPP14Parser.Asm);
        this.state = 1721;
        this.match(CPP14Parser.LeftParen);
        this.state = 1722;
        this.match(CPP14Parser.Stringliteral);
        this.state = 1723;
        this.match(CPP14Parser.RightParen);
        this.state = 1724;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LinkagespecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_linkagespecification;
    return this;
}

LinkagespecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LinkagespecificationContext.prototype.constructor = LinkagespecificationContext;

LinkagespecificationContext.prototype.Extern = function() {
    return this.getToken(CPP14Parser.Extern, 0);
};

LinkagespecificationContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

LinkagespecificationContext.prototype.declarationseq = function() {
    return this.getTypedRuleContext(DeclarationseqContext,0);
};

LinkagespecificationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

LinkagespecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLinkagespecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LinkagespecificationContext = LinkagespecificationContext;

CPP14Parser.prototype.linkagespecification = function() {

    var localctx = new LinkagespecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CPP14Parser.RULE_linkagespecification);
    var _la = 0; // Token type
    try {
        this.state = 1736;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1726;
            this.match(CPP14Parser.Extern);
            this.state = 1727;
            this.match(CPP14Parser.Stringliteral);
            this.state = 1728;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1730;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Namespace - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftParen - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Star - 67)) | (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Semi - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
                this.state = 1729;
                this.declarationseq(0);
            }

            this.state = 1732;
            this.match(CPP14Parser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1733;
            this.match(CPP14Parser.Extern);
            this.state = 1734;
            this.match(CPP14Parser.Stringliteral);
            this.state = 1735;
            this.declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributespecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributespecifierseq;
    return this;
}

AttributespecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributespecifierseqContext.prototype.constructor = AttributespecifierseqContext;

AttributespecifierseqContext.prototype.attributespecifier = function() {
    return this.getTypedRuleContext(AttributespecifierContext,0);
};

AttributespecifierseqContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

AttributespecifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributespecifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.attributespecifierseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AttributespecifierseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 250;
    this.enterRecursionRule(localctx, 250, CPP14Parser.RULE_attributespecifierseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1739;
        this.attributespecifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1745;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,183,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AttributespecifierseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_attributespecifierseq);
                this.state = 1741;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1742;
                this.attributespecifier(); 
            }
            this.state = 1747;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,183,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AttributespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributespecifier;
    return this;
}

AttributespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributespecifierContext.prototype.constructor = AttributespecifierContext;

AttributespecifierContext.prototype.attributelist = function() {
    return this.getTypedRuleContext(AttributelistContext,0);
};

AttributespecifierContext.prototype.alignmentspecifier = function() {
    return this.getTypedRuleContext(AlignmentspecifierContext,0);
};

AttributespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributespecifierContext = AttributespecifierContext;

CPP14Parser.prototype.attributespecifier = function() {

    var localctx = new AttributespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, CPP14Parser.RULE_attributespecifier);
    try {
        this.state = 1755;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 1);
            this.state = 1748;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1749;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1750;
            this.attributelist(0);
            this.state = 1751;
            this.match(CPP14Parser.RightBracket);
            this.state = 1752;
            this.match(CPP14Parser.RightBracket);
            break;
        case CPP14Parser.Alignas:
            this.enterOuterAlt(localctx, 2);
            this.state = 1754;
            this.alignmentspecifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlignmentspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_alignmentspecifier;
    return this;
}

AlignmentspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlignmentspecifierContext.prototype.constructor = AlignmentspecifierContext;

AlignmentspecifierContext.prototype.Alignas = function() {
    return this.getToken(CPP14Parser.Alignas, 0);
};

AlignmentspecifierContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

AlignmentspecifierContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

AlignmentspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAlignmentspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AlignmentspecifierContext = AlignmentspecifierContext;

CPP14Parser.prototype.alignmentspecifier = function() {

    var localctx = new AlignmentspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CPP14Parser.RULE_alignmentspecifier);
    var _la = 0; // Token type
    try {
        this.state = 1773;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1757;
            this.match(CPP14Parser.Alignas);
            this.state = 1758;
            this.match(CPP14Parser.LeftParen);
            this.state = 1759;
            this.typeid();
            this.state = 1761;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 1760;
                this.match(CPP14Parser.Ellipsis);
            }

            this.state = 1763;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1765;
            this.match(CPP14Parser.Alignas);
            this.state = 1766;
            this.match(CPP14Parser.LeftParen);
            this.state = 1767;
            this.constantexpression();
            this.state = 1769;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 1768;
                this.match(CPP14Parser.Ellipsis);
            }

            this.state = 1771;
            this.match(CPP14Parser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributelist;
    return this;
}

AttributelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributelistContext.prototype.constructor = AttributelistContext;

AttributelistContext.prototype.attribute = function() {
    return this.getTypedRuleContext(AttributeContext,0);
};

AttributelistContext.prototype.attributelist = function() {
    return this.getTypedRuleContext(AttributelistContext,0);
};

AttributelistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributelist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.attributelist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AttributelistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 256;
    this.enterRecursionRule(localctx, 256, CPP14Parser.RULE_attributelist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1782;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1777;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
            if(la_===1) {
                this.state = 1776;
                this.attribute();

            }
            break;

        case 2:
            this.state = 1779;
            this.attribute();
            this.state = 1780;
            this.match(CPP14Parser.Ellipsis);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1796;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,192,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1794;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AttributelistContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_attributelist);
                    this.state = 1784;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1785;
                    this.match(CPP14Parser.Comma);
                    this.state = 1787;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
                    if(la_===1) {
                        this.state = 1786;
                        this.attribute();

                    }
                    break;

                case 2:
                    localctx = new AttributelistContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_attributelist);
                    this.state = 1789;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1790;
                    this.match(CPP14Parser.Comma);
                    this.state = 1791;
                    this.attribute();
                    this.state = 1792;
                    this.match(CPP14Parser.Ellipsis);
                    break;

                } 
            }
            this.state = 1798;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,192,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attribute;
    return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.attributetoken = function() {
    return this.getTypedRuleContext(AttributetokenContext,0);
};

AttributeContext.prototype.attributeargumentclause = function() {
    return this.getTypedRuleContext(AttributeargumentclauseContext,0);
};

AttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributeContext = AttributeContext;

CPP14Parser.prototype.attribute = function() {

    var localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CPP14Parser.RULE_attribute);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1799;
        this.attributetoken();
        this.state = 1801;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
        if(la_===1) {
            this.state = 1800;
            this.attributeargumentclause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributetokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributetoken;
    return this;
}

AttributetokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributetokenContext.prototype.constructor = AttributetokenContext;

AttributetokenContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AttributetokenContext.prototype.attributescopedtoken = function() {
    return this.getTypedRuleContext(AttributescopedtokenContext,0);
};

AttributetokenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributetoken(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributetokenContext = AttributetokenContext;

CPP14Parser.prototype.attributetoken = function() {

    var localctx = new AttributetokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CPP14Parser.RULE_attributetoken);
    try {
        this.state = 1805;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1803;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1804;
            this.attributescopedtoken();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributescopedtokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributescopedtoken;
    return this;
}

AttributescopedtokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributescopedtokenContext.prototype.constructor = AttributescopedtokenContext;

AttributescopedtokenContext.prototype.attributenamespace = function() {
    return this.getTypedRuleContext(AttributenamespaceContext,0);
};

AttributescopedtokenContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AttributescopedtokenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributescopedtoken(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributescopedtokenContext = AttributescopedtokenContext;

CPP14Parser.prototype.attributescopedtoken = function() {

    var localctx = new AttributescopedtokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CPP14Parser.RULE_attributescopedtoken);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1807;
        this.attributenamespace();
        this.state = 1808;
        this.match(CPP14Parser.Doublecolon);
        this.state = 1809;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributenamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributenamespace;
    return this;
}

AttributenamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributenamespaceContext.prototype.constructor = AttributenamespaceContext;

AttributenamespaceContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

AttributenamespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributenamespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributenamespaceContext = AttributenamespaceContext;

CPP14Parser.prototype.attributenamespace = function() {

    var localctx = new AttributenamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CPP14Parser.RULE_attributenamespace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1811;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributeargumentclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_attributeargumentclause;
    return this;
}

AttributeargumentclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeargumentclauseContext.prototype.constructor = AttributeargumentclauseContext;

AttributeargumentclauseContext.prototype.balancedtokenseq = function() {
    return this.getTypedRuleContext(BalancedtokenseqContext,0);
};

AttributeargumentclauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAttributeargumentclause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AttributeargumentclauseContext = AttributeargumentclauseContext;

CPP14Parser.prototype.attributeargumentclause = function() {

    var localctx = new AttributeargumentclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CPP14Parser.RULE_attributeargumentclause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1813;
        this.match(CPP14Parser.LeftParen);
        this.state = 1814;
        this.balancedtokenseq(0);
        this.state = 1815;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BalancedtokenseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_balancedtokenseq;
    return this;
}

BalancedtokenseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BalancedtokenseqContext.prototype.constructor = BalancedtokenseqContext;

BalancedtokenseqContext.prototype.balancedtoken = function() {
    return this.getTypedRuleContext(BalancedtokenContext,0);
};

BalancedtokenseqContext.prototype.balancedtokenseq = function() {
    return this.getTypedRuleContext(BalancedtokenseqContext,0);
};

BalancedtokenseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBalancedtokenseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.balancedtokenseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BalancedtokenseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 268;
    this.enterRecursionRule(localctx, 268, CPP14Parser.RULE_balancedtokenseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1819;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        if(la_===1) {
            this.state = 1818;
            this.balancedtoken();

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1825;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,196,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new BalancedtokenseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_balancedtokenseq);
                this.state = 1821;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1822;
                this.balancedtoken(); 
            }
            this.state = 1827;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,196,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function BalancedtokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_balancedtoken;
    return this;
}

BalancedtokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BalancedtokenContext.prototype.constructor = BalancedtokenContext;

BalancedtokenContext.prototype.balancedtokenseq = function() {
    return this.getTypedRuleContext(BalancedtokenseqContext,0);
};

BalancedtokenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBalancedtoken(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BalancedtokenContext = BalancedtokenContext;

CPP14Parser.prototype.balancedtoken = function() {

    var localctx = new BalancedtokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, CPP14Parser.RULE_balancedtoken);
    try {
        this.state = 1840;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 1);
            this.state = 1828;
            this.match(CPP14Parser.LeftParen);
            this.state = 1829;
            this.balancedtokenseq(0);
            this.state = 1830;
            this.match(CPP14Parser.RightParen);
            break;
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1832;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1833;
            this.balancedtokenseq(0);
            this.state = 1834;
            this.match(CPP14Parser.RightBracket);
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 3);
            this.state = 1836;
            this.match(CPP14Parser.LeftBrace);
            this.state = 1837;
            this.balancedtokenseq(0);
            this.state = 1838;
            this.match(CPP14Parser.RightBrace);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitdeclaratorlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initdeclaratorlist;
    return this;
}

InitdeclaratorlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitdeclaratorlistContext.prototype.constructor = InitdeclaratorlistContext;

InitdeclaratorlistContext.prototype.initdeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitdeclaratorContext);
    } else {
        return this.getTypedRuleContext(InitdeclaratorContext,i);
    }
};

InitdeclaratorlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitdeclaratorlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitdeclaratorlistContext = InitdeclaratorlistContext;

CPP14Parser.prototype.initdeclaratorlist = function() {

    var localctx = new InitdeclaratorlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, CPP14Parser.RULE_initdeclaratorlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1842;
        this.initdeclarator();
        this.state = 1847;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CPP14Parser.Comma) {
            this.state = 1843;
            this.match(CPP14Parser.Comma);
            this.state = 1844;
            this.initdeclarator();
            this.state = 1849;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initdeclarator;
    return this;
}

InitdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitdeclaratorContext.prototype.constructor = InitdeclaratorContext;

InitdeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

InitdeclaratorContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitdeclaratorContext = InitdeclaratorContext;

CPP14Parser.prototype.initdeclarator = function() {

    var localctx = new InitdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CPP14Parser.RULE_initdeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1850;
        this.declarator();
        this.state = 1852;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBrace - 78)) | (1 << (CPP14Parser.Assign - 78)))) !== 0)) {
            this.state = 1851;
            this.initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declarator;
    return this;
}

DeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratorContext.prototype.constructor = DeclaratorContext;

DeclaratorContext.prototype.ptrdeclarator = function() {
    return this.getTypedRuleContext(PtrdeclaratorContext,0);
};

DeclaratorContext.prototype.noptrdeclarator = function() {
    return this.getTypedRuleContext(NoptrdeclaratorContext,0);
};

DeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

DeclaratorContext.prototype.trailingreturntype = function() {
    return this.getTypedRuleContext(TrailingreturntypeContext,0);
};

DeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclaratorContext = DeclaratorContext;

CPP14Parser.prototype.declarator = function() {

    var localctx = new DeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CPP14Parser.RULE_declarator);
    try {
        this.state = 1859;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1854;
            this.ptrdeclarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1855;
            this.noptrdeclarator(0);
            this.state = 1856;
            this.parametersandqualifiers();
            this.state = 1857;
            this.trailingreturntype();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PtrdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ptrdeclarator;
    return this;
}

PtrdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PtrdeclaratorContext.prototype.constructor = PtrdeclaratorContext;

PtrdeclaratorContext.prototype.noptrdeclarator = function() {
    return this.getTypedRuleContext(NoptrdeclaratorContext,0);
};

PtrdeclaratorContext.prototype.ptroperator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PtroperatorContext);
    } else {
        return this.getTypedRuleContext(PtroperatorContext,i);
    }
};

PtrdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPtrdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PtrdeclaratorContext = PtrdeclaratorContext;

CPP14Parser.prototype.ptrdeclarator = function() {

    var localctx = new PtrdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CPP14Parser.RULE_ptrdeclarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1864;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,201,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1861;
                this.ptroperator(); 
            }
            this.state = 1866;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,201,this._ctx);
        }

        this.state = 1867;
        this.noptrdeclarator(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoptrdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrdeclarator;
    return this;
}

NoptrdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrdeclaratorContext.prototype.constructor = NoptrdeclaratorContext;

NoptrdeclaratorContext.prototype.declaratorid = function() {
    return this.getTypedRuleContext(DeclaratoridContext,0);
};

NoptrdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrdeclaratorContext.prototype.ptrdeclarator = function() {
    return this.getTypedRuleContext(PtrdeclaratorContext,0);
};

NoptrdeclaratorContext.prototype.noptrdeclarator = function() {
    return this.getTypedRuleContext(NoptrdeclaratorContext,0);
};

NoptrdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

NoptrdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoptrdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.noptrdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 280;
    this.enterRecursionRule(localctx, 280, CPP14Parser.RULE_noptrdeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1878;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Decltype:
        case CPP14Parser.Operator:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
            this.state = 1870;
            this.declaratorid();
            this.state = 1872;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
            if(la_===1) {
                this.state = 1871;
                this.attributespecifierseq(0);

            }
            break;
        case CPP14Parser.LeftParen:
            this.state = 1874;
            this.match(CPP14Parser.LeftParen);
            this.state = 1875;
            this.ptrdeclarator();
            this.state = 1876;
            this.match(CPP14Parser.RightParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1893;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1891;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NoptrdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrdeclarator);
                    this.state = 1880;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1881;
                    this.parametersandqualifiers();
                    break;

                case 2:
                    localctx = new NoptrdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrdeclarator);
                    this.state = 1882;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1883;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 1885;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                        this.state = 1884;
                        this.constantexpression();
                    }

                    this.state = 1887;
                    this.match(CPP14Parser.RightBracket);
                    this.state = 1889;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
                    if(la_===1) {
                        this.state = 1888;
                        this.attributespecifierseq(0);

                    }
                    break;

                } 
            }
            this.state = 1895;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParametersandqualifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parametersandqualifiers;
    return this;
}

ParametersandqualifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersandqualifiersContext.prototype.constructor = ParametersandqualifiersContext;

ParametersandqualifiersContext.prototype.parameterdeclarationclause = function() {
    return this.getTypedRuleContext(ParameterdeclarationclauseContext,0);
};

ParametersandqualifiersContext.prototype.cvqualifierseq = function() {
    return this.getTypedRuleContext(CvqualifierseqContext,0);
};

ParametersandqualifiersContext.prototype.refqualifier = function() {
    return this.getTypedRuleContext(RefqualifierContext,0);
};

ParametersandqualifiersContext.prototype.exceptionspecification = function() {
    return this.getTypedRuleContext(ExceptionspecificationContext,0);
};

ParametersandqualifiersContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ParametersandqualifiersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitParametersandqualifiers(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ParametersandqualifiersContext = ParametersandqualifiersContext;

CPP14Parser.prototype.parametersandqualifiers = function() {

    var localctx = new ParametersandqualifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, CPP14Parser.RULE_parametersandqualifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1896;
        this.match(CPP14Parser.LeftParen);
        this.state = 1897;
        this.parameterdeclarationclause();
        this.state = 1898;
        this.match(CPP14Parser.RightParen);
        this.state = 1900;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
        if(la_===1) {
            this.state = 1899;
            this.cvqualifierseq();

        }
        this.state = 1903;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
        if(la_===1) {
            this.state = 1902;
            this.refqualifier();

        }
        this.state = 1906;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
        if(la_===1) {
            this.state = 1905;
            this.exceptionspecification();

        }
        this.state = 1909;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
        if(la_===1) {
            this.state = 1908;
            this.attributespecifierseq(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrailingreturntypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_trailingreturntype;
    return this;
}

TrailingreturntypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailingreturntypeContext.prototype.constructor = TrailingreturntypeContext;

TrailingreturntypeContext.prototype.trailingtypespecifierseq = function() {
    return this.getTypedRuleContext(TrailingtypespecifierseqContext,0);
};

TrailingreturntypeContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

TrailingreturntypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTrailingreturntype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TrailingreturntypeContext = TrailingreturntypeContext;

CPP14Parser.prototype.trailingreturntype = function() {

    var localctx = new TrailingreturntypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CPP14Parser.RULE_trailingreturntype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1911;
        this.match(CPP14Parser.Arrow);
        this.state = 1912;
        this.trailingtypespecifierseq();
        this.state = 1914;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
        if(la_===1) {
            this.state = 1913;
            this.abstractdeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PtroperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ptroperator;
    return this;
}

PtroperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PtroperatorContext.prototype.constructor = PtroperatorContext;

PtroperatorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

PtroperatorContext.prototype.cvqualifierseq = function() {
    return this.getTypedRuleContext(CvqualifierseqContext,0);
};

PtroperatorContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

PtroperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPtroperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PtroperatorContext = PtroperatorContext;

CPP14Parser.prototype.ptroperator = function() {

    var localctx = new PtroperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, CPP14Parser.RULE_ptroperator);
    try {
        this.state = 1939;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Star:
            this.enterOuterAlt(localctx, 1);
            this.state = 1916;
            this.match(CPP14Parser.Star);
            this.state = 1918;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
            if(la_===1) {
                this.state = 1917;
                this.attributespecifierseq(0);

            }
            this.state = 1921;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
            if(la_===1) {
                this.state = 1920;
                this.cvqualifierseq();

            }
            break;
        case CPP14Parser.And:
            this.enterOuterAlt(localctx, 2);
            this.state = 1923;
            this.match(CPP14Parser.And);
            this.state = 1925;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
            if(la_===1) {
                this.state = 1924;
                this.attributespecifierseq(0);

            }
            break;
        case CPP14Parser.AndAnd:
            this.enterOuterAlt(localctx, 3);
            this.state = 1927;
            this.match(CPP14Parser.AndAnd);
            this.state = 1929;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
            if(la_===1) {
                this.state = 1928;
                this.attributespecifierseq(0);

            }
            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 4);
            this.state = 1931;
            this.nestednamespecifier(0);
            this.state = 1932;
            this.match(CPP14Parser.Star);
            this.state = 1934;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
            if(la_===1) {
                this.state = 1933;
                this.attributespecifierseq(0);

            }
            this.state = 1937;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
            if(la_===1) {
                this.state = 1936;
                this.cvqualifierseq();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CvqualifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_cvqualifierseq;
    return this;
}

CvqualifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CvqualifierseqContext.prototype.constructor = CvqualifierseqContext;

CvqualifierseqContext.prototype.cvqualifier = function() {
    return this.getTypedRuleContext(CvqualifierContext,0);
};

CvqualifierseqContext.prototype.cvqualifierseq = function() {
    return this.getTypedRuleContext(CvqualifierseqContext,0);
};

CvqualifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCvqualifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CvqualifierseqContext = CvqualifierseqContext;

CPP14Parser.prototype.cvqualifierseq = function() {

    var localctx = new CvqualifierseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CPP14Parser.RULE_cvqualifierseq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1941;
        this.cvqualifier();
        this.state = 1943;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
        if(la_===1) {
            this.state = 1942;
            this.cvqualifierseq();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CvqualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_cvqualifier;
    return this;
}

CvqualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CvqualifierContext.prototype.constructor = CvqualifierContext;

CvqualifierContext.prototype.Const = function() {
    return this.getToken(CPP14Parser.Const, 0);
};

CvqualifierContext.prototype.Volatile = function() {
    return this.getToken(CPP14Parser.Volatile, 0);
};

CvqualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCvqualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CvqualifierContext = CvqualifierContext;

CPP14Parser.prototype.cvqualifier = function() {

    var localctx = new CvqualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CPP14Parser.RULE_cvqualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1945;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Const || _la===CPP14Parser.Volatile)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RefqualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_refqualifier;
    return this;
}

RefqualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RefqualifierContext.prototype.constructor = RefqualifierContext;


RefqualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitRefqualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.RefqualifierContext = RefqualifierContext;

CPP14Parser.prototype.refqualifier = function() {

    var localctx = new RefqualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CPP14Parser.RULE_refqualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1947;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.And || _la===CPP14Parser.AndAnd)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclaratoridContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_declaratorid;
    return this;
}

DeclaratoridContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratoridContext.prototype.constructor = DeclaratoridContext;

DeclaratoridContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

DeclaratoridContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDeclaratorid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DeclaratoridContext = DeclaratoridContext;

CPP14Parser.prototype.declaratorid = function() {

    var localctx = new DeclaratoridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CPP14Parser.RULE_declaratorid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1950;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Ellipsis) {
            this.state = 1949;
            this.match(CPP14Parser.Ellipsis);
        }

        this.state = 1952;
        this.idexpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeid;
    return this;
}

TypeidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeidContext.prototype.constructor = TypeidContext;

TypeidContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

TypeidContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

TypeidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypeid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypeidContext = TypeidContext;

CPP14Parser.prototype.typeid = function() {

    var localctx = new TypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CPP14Parser.RULE_typeid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1954;
        this.typespecifierseq();
        this.state = 1956;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
        if(la_===1) {
            this.state = 1955;
            this.abstractdeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_abstractdeclarator;
    return this;
}

AbstractdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractdeclaratorContext.prototype.constructor = AbstractdeclaratorContext;

AbstractdeclaratorContext.prototype.ptrabstractdeclarator = function() {
    return this.getTypedRuleContext(PtrabstractdeclaratorContext,0);
};

AbstractdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

AbstractdeclaratorContext.prototype.trailingreturntype = function() {
    return this.getTypedRuleContext(TrailingreturntypeContext,0);
};

AbstractdeclaratorContext.prototype.noptrabstractdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractdeclaratorContext,0);
};

AbstractdeclaratorContext.prototype.abstractpackdeclarator = function() {
    return this.getTypedRuleContext(AbstractpackdeclaratorContext,0);
};

AbstractdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAbstractdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AbstractdeclaratorContext = AbstractdeclaratorContext;

CPP14Parser.prototype.abstractdeclarator = function() {

    var localctx = new AbstractdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CPP14Parser.RULE_abstractdeclarator);
    try {
        this.state = 1966;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1958;
            this.ptrabstractdeclarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1960;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
            if(la_===1) {
                this.state = 1959;
                this.noptrabstractdeclarator(0);

            }
            this.state = 1962;
            this.parametersandqualifiers();
            this.state = 1963;
            this.trailingreturntype();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1965;
            this.abstractpackdeclarator();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PtrabstractdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ptrabstractdeclarator;
    return this;
}

PtrabstractdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PtrabstractdeclaratorContext.prototype.constructor = PtrabstractdeclaratorContext;

PtrabstractdeclaratorContext.prototype.noptrabstractdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractdeclaratorContext,0);
};

PtrabstractdeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

PtrabstractdeclaratorContext.prototype.ptrabstractdeclarator = function() {
    return this.getTypedRuleContext(PtrabstractdeclaratorContext,0);
};

PtrabstractdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPtrabstractdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PtrabstractdeclaratorContext = PtrabstractdeclaratorContext;

CPP14Parser.prototype.ptrabstractdeclarator = function() {

    var localctx = new PtrabstractdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CPP14Parser.RULE_ptrabstractdeclarator);
    try {
        this.state = 1973;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
            this.enterOuterAlt(localctx, 1);
            this.state = 1968;
            this.noptrabstractdeclarator(0);
            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1969;
            this.ptroperator();
            this.state = 1971;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
            if(la_===1) {
                this.state = 1970;
                this.ptrabstractdeclarator();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoptrabstractdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrabstractdeclarator;
    return this;
}

NoptrabstractdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrabstractdeclaratorContext.prototype.constructor = NoptrabstractdeclaratorContext;

NoptrabstractdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

NoptrabstractdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrabstractdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrabstractdeclaratorContext.prototype.ptrabstractdeclarator = function() {
    return this.getTypedRuleContext(PtrabstractdeclaratorContext,0);
};

NoptrabstractdeclaratorContext.prototype.noptrabstractdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractdeclaratorContext,0);
};

NoptrabstractdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoptrabstractdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.noptrabstractdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrabstractdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 302;
    this.enterRecursionRule(localctx, 302, CPP14Parser.RULE_noptrabstractdeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1989;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1976;
            this.parametersandqualifiers();
            break;

        case 2:
            this.state = 1977;
            this.match(CPP14Parser.LeftBracket);
            this.state = 1979;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 1978;
                this.constantexpression();
            }

            this.state = 1981;
            this.match(CPP14Parser.RightBracket);
            this.state = 1983;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
            if(la_===1) {
                this.state = 1982;
                this.attributespecifierseq(0);

            }
            break;

        case 3:
            this.state = 1985;
            this.match(CPP14Parser.LeftParen);
            this.state = 1986;
            this.ptrabstractdeclarator();
            this.state = 1987;
            this.match(CPP14Parser.RightParen);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2004;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,233,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2002;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NoptrabstractdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractdeclarator);
                    this.state = 1991;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1992;
                    this.parametersandqualifiers();
                    break;

                case 2:
                    localctx = new NoptrabstractdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractdeclarator);
                    this.state = 1993;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1994;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 1996;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                        this.state = 1995;
                        this.constantexpression();
                    }

                    this.state = 1998;
                    this.match(CPP14Parser.RightBracket);
                    this.state = 2000;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
                    if(la_===1) {
                        this.state = 1999;
                        this.attributespecifierseq(0);

                    }
                    break;

                } 
            }
            this.state = 2006;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,233,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AbstractpackdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_abstractpackdeclarator;
    return this;
}

AbstractpackdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractpackdeclaratorContext.prototype.constructor = AbstractpackdeclaratorContext;

AbstractpackdeclaratorContext.prototype.noptrabstractpackdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractpackdeclaratorContext,0);
};

AbstractpackdeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

AbstractpackdeclaratorContext.prototype.abstractpackdeclarator = function() {
    return this.getTypedRuleContext(AbstractpackdeclaratorContext,0);
};

AbstractpackdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAbstractpackdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AbstractpackdeclaratorContext = AbstractpackdeclaratorContext;

CPP14Parser.prototype.abstractpackdeclarator = function() {

    var localctx = new AbstractpackdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, CPP14Parser.RULE_abstractpackdeclarator);
    try {
        this.state = 2011;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Ellipsis:
            this.enterOuterAlt(localctx, 1);
            this.state = 2007;
            this.noptrabstractpackdeclarator(0);
            break;
        case CPP14Parser.Decltype:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.AndAnd:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 2008;
            this.ptroperator();
            this.state = 2009;
            this.abstractpackdeclarator();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NoptrabstractpackdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noptrabstractpackdeclarator;
    return this;
}

NoptrabstractpackdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoptrabstractpackdeclaratorContext.prototype.constructor = NoptrabstractpackdeclaratorContext;

NoptrabstractpackdeclaratorContext.prototype.noptrabstractpackdeclarator = function() {
    return this.getTypedRuleContext(NoptrabstractpackdeclaratorContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.parametersandqualifiers = function() {
    return this.getTypedRuleContext(ParametersandqualifiersContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

NoptrabstractpackdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoptrabstractpackdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.noptrabstractpackdeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NoptrabstractpackdeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 306;
    this.enterRecursionRule(localctx, 306, CPP14Parser.RULE_noptrabstractpackdeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2014;
        this.match(CPP14Parser.Ellipsis);
        this._ctx.stop = this._input.LT(-1);
        this.state = 2029;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,238,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2027;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new NoptrabstractpackdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractpackdeclarator);
                    this.state = 2016;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 2017;
                    this.parametersandqualifiers();
                    break;

                case 2:
                    localctx = new NoptrabstractpackdeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noptrabstractpackdeclarator);
                    this.state = 2018;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2019;
                    this.match(CPP14Parser.LeftBracket);
                    this.state = 2021;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                        this.state = 2020;
                        this.constantexpression();
                    }

                    this.state = 2023;
                    this.match(CPP14Parser.RightBracket);
                    this.state = 2025;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
                    if(la_===1) {
                        this.state = 2024;
                        this.attributespecifierseq(0);

                    }
                    break;

                } 
            }
            this.state = 2031;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,238,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParameterdeclarationclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterdeclarationclause;
    return this;
}

ParameterdeclarationclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterdeclarationclauseContext.prototype.constructor = ParameterdeclarationclauseContext;

ParameterdeclarationclauseContext.prototype.parameterdeclarationlist = function() {
    return this.getTypedRuleContext(ParameterdeclarationlistContext,0);
};

ParameterdeclarationclauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitParameterdeclarationclause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ParameterdeclarationclauseContext = ParameterdeclarationclauseContext;

CPP14Parser.prototype.parameterdeclarationclause = function() {

    var localctx = new ParameterdeclarationclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, CPP14Parser.RULE_parameterdeclarationclause);
    var _la = 0; // Token type
    try {
        this.state = 2042;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2033;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)))) !== 0) || _la===CPP14Parser.Doublecolon || _la===CPP14Parser.Identifier) {
                this.state = 2032;
                this.parameterdeclarationlist(0);
            }

            this.state = 2036;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 2035;
                this.match(CPP14Parser.Ellipsis);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2038;
            this.parameterdeclarationlist(0);
            this.state = 2039;
            this.match(CPP14Parser.Comma);
            this.state = 2040;
            this.match(CPP14Parser.Ellipsis);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterdeclarationlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterdeclarationlist;
    return this;
}

ParameterdeclarationlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterdeclarationlistContext.prototype.constructor = ParameterdeclarationlistContext;

ParameterdeclarationlistContext.prototype.parameterdeclaration = function() {
    return this.getTypedRuleContext(ParameterdeclarationContext,0);
};

ParameterdeclarationlistContext.prototype.parameterdeclarationlist = function() {
    return this.getTypedRuleContext(ParameterdeclarationlistContext,0);
};

ParameterdeclarationlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitParameterdeclarationlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.parameterdeclarationlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParameterdeclarationlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 310;
    this.enterRecursionRule(localctx, 310, CPP14Parser.RULE_parameterdeclarationlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2045;
        this.parameterdeclaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2052;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ParameterdeclarationlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_parameterdeclarationlist);
                this.state = 2047;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2048;
                this.match(CPP14Parser.Comma);
                this.state = 2049;
                this.parameterdeclaration(); 
            }
            this.state = 2054;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParameterdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_parameterdeclaration;
    return this;
}

ParameterdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterdeclarationContext.prototype.constructor = ParameterdeclarationContext;

ParameterdeclarationContext.prototype.declspecifierseq = function() {
    return this.getTypedRuleContext(DeclspecifierseqContext,0);
};

ParameterdeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ParameterdeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ParameterdeclarationContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

ParameterdeclarationContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

ParameterdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitParameterdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ParameterdeclarationContext = ParameterdeclarationContext;

CPP14Parser.prototype.parameterdeclaration = function() {

    var localctx = new ParameterdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, CPP14Parser.RULE_parameterdeclaration);
    var _la = 0; // Token type
    try {
        this.state = 2086;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2056;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2055;
                this.attributespecifierseq(0);
            }

            this.state = 2058;
            this.declspecifierseq();
            this.state = 2059;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2062;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2061;
                this.attributespecifierseq(0);
            }

            this.state = 2064;
            this.declspecifierseq();
            this.state = 2065;
            this.declarator();
            this.state = 2066;
            this.match(CPP14Parser.Assign);
            this.state = 2067;
            this.initializerclause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2070;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2069;
                this.attributespecifierseq(0);
            }

            this.state = 2072;
            this.declspecifierseq();
            this.state = 2074;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
            if(la_===1) {
                this.state = 2073;
                this.abstractdeclarator();

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2077;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2076;
                this.attributespecifierseq(0);
            }

            this.state = 2079;
            this.declspecifierseq();
            this.state = 2081;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Decltype || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
                this.state = 2080;
                this.abstractdeclarator();
            }

            this.state = 2083;
            this.match(CPP14Parser.Assign);
            this.state = 2084;
            this.initializerclause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiondefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functiondefinition;
    return this;
}

FunctiondefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiondefinitionContext.prototype.constructor = FunctiondefinitionContext;

FunctiondefinitionContext.prototype.functionheader = function() {
    return this.getTypedRuleContext(FunctionheaderContext,0);
};

FunctiondefinitionContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

FunctiondefinitionContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

FunctiondefinitionContext.prototype.declspecifierseqwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierseqwithouttypeContext,0);
};

FunctiondefinitionContext.prototype.virtspecifierseq = function() {
    return this.getTypedRuleContext(VirtspecifierseqContext,0);
};

FunctiondefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctiondefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctiondefinitionContext = FunctiondefinitionContext;

CPP14Parser.prototype.functiondefinition = function() {

    var localctx = new FunctiondefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CPP14Parser.RULE_functiondefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2089;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 2088;
            this.attributespecifierseq(0);
        }

        this.state = 2092;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 15)) & ~0x1f) == 0 && ((1 << (_la - 15)) & ((1 << (CPP14Parser.Constexpr - 15)) | (1 << (CPP14Parser.Explicit - 15)) | (1 << (CPP14Parser.Extern - 15)) | (1 << (CPP14Parser.Friend - 15)) | (1 << (CPP14Parser.Inline - 15)) | (1 << (CPP14Parser.Mutable - 15)))) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CPP14Parser.Register - 50)) | (1 << (CPP14Parser.Static - 50)) | (1 << (CPP14Parser.Thread_local - 50)) | (1 << (CPP14Parser.Typedef - 50)) | (1 << (CPP14Parser.Virtual - 50)))) !== 0)) {
            this.state = 2091;
            this.declspecifierseqwithouttype();
        }

        this.state = 2094;
        this.functionheader();
        this.state = 2096;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Final || _la===CPP14Parser.Override) {
            this.state = 2095;
            this.virtspecifierseq(0);
        }

        this.state = 2098;
        this.functionbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionheaderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionheader;
    return this;
}

FunctionheaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionheaderContext.prototype.constructor = FunctionheaderContext;

FunctionheaderContext.prototype.functiondeclarator = function() {
    return this.getTypedRuleContext(FunctiondeclaratorContext,0);
};

FunctionheaderContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

FunctionheaderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctionheader(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctionheaderContext = FunctionheaderContext;

CPP14Parser.prototype.functionheader = function() {

    var localctx = new FunctionheaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CPP14Parser.RULE_functionheader);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2101;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
        if(la_===1) {
            this.state = 2100;
            this.typespecifier();

        }
        this.state = 2103;
        this.functiondeclarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiondeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functiondeclarator;
    return this;
}

FunctiondeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiondeclaratorContext.prototype.constructor = FunctiondeclaratorContext;

FunctiondeclaratorContext.prototype.declaratorid = function() {
    return this.getTypedRuleContext(DeclaratoridContext,0);
};

FunctiondeclaratorContext.prototype.parameterdeclarationclause = function() {
    return this.getTypedRuleContext(ParameterdeclarationclauseContext,0);
};

FunctiondeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctiondeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctiondeclaratorContext = FunctiondeclaratorContext;

CPP14Parser.prototype.functiondeclarator = function() {

    var localctx = new FunctiondeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, CPP14Parser.RULE_functiondeclarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2105;
        this.declaratorid();
        this.state = 2106;
        this.match(CPP14Parser.LeftParen);
        this.state = 2107;
        this.parameterdeclarationclause();
        this.state = 2108;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functionbody;
    return this;
}

FunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionbodyContext.prototype.constructor = FunctionbodyContext;

FunctionbodyContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

FunctionbodyContext.prototype.ctorinitializer = function() {
    return this.getTypedRuleContext(CtorinitializerContext,0);
};

FunctionbodyContext.prototype.functiontryblock = function() {
    return this.getTypedRuleContext(FunctiontryblockContext,0);
};

FunctionbodyContext.prototype.Default = function() {
    return this.getToken(CPP14Parser.Default, 0);
};

FunctionbodyContext.prototype.Delete = function() {
    return this.getToken(CPP14Parser.Delete, 0);
};

FunctionbodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctionbody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctionbodyContext = FunctionbodyContext;

CPP14Parser.prototype.functionbody = function() {

    var localctx = new FunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CPP14Parser.RULE_functionbody);
    var _la = 0; // Token type
    try {
        this.state = 2121;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2111;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 2110;
                this.ctorinitializer();
            }

            this.state = 2113;
            this.compoundstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2114;
            this.functiontryblock();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2115;
            this.match(CPP14Parser.Assign);
            this.state = 2116;
            this.match(CPP14Parser.Default);
            this.state = 2117;
            this.match(CPP14Parser.Semi);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2118;
            this.match(CPP14Parser.Assign);
            this.state = 2119;
            this.match(CPP14Parser.Delete);
            this.state = 2120;
            this.match(CPP14Parser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.braceorequalinitializer = function() {
    return this.getTypedRuleContext(BraceorequalinitializerContext,0);
};

InitializerContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

InitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitializerContext = InitializerContext;

CPP14Parser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CPP14Parser.RULE_initializer);
    try {
        this.state = 2128;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.LeftBrace:
        case CPP14Parser.Assign:
            this.enterOuterAlt(localctx, 1);
            this.state = 2123;
            this.braceorequalinitializer();
            break;
        case CPP14Parser.LeftParen:
            this.enterOuterAlt(localctx, 2);
            this.state = 2124;
            this.match(CPP14Parser.LeftParen);
            this.state = 2125;
            this.expressionlist();
            this.state = 2126;
            this.match(CPP14Parser.RightParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BraceorequalinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_braceorequalinitializer;
    return this;
}

BraceorequalinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BraceorequalinitializerContext.prototype.constructor = BraceorequalinitializerContext;

BraceorequalinitializerContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

BraceorequalinitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

BraceorequalinitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBraceorequalinitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BraceorequalinitializerContext = BraceorequalinitializerContext;

CPP14Parser.prototype.braceorequalinitializer = function() {

    var localctx = new BraceorequalinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CPP14Parser.RULE_braceorequalinitializer);
    try {
        this.state = 2133;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Assign:
            this.enterOuterAlt(localctx, 1);
            this.state = 2130;
            this.match(CPP14Parser.Assign);
            this.state = 2131;
            this.initializerclause();
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 2132;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializerclause;
    return this;
}

InitializerclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerclauseContext.prototype.constructor = InitializerclauseContext;

InitializerclauseContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

InitializerclauseContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

InitializerclauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitializerclause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitializerclauseContext = InitializerclauseContext;

CPP14Parser.prototype.initializerclause = function() {

    var localctx = new InitializerclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CPP14Parser.RULE_initializerclause);
    try {
        this.state = 2137;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Alignof:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Const_cast:
        case CPP14Parser.Decltype:
        case CPP14Parser.Delete:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Dynamic_cast:
        case CPP14Parser.Float:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.New:
        case CPP14Parser.Noexcept:
        case CPP14Parser.Nullptr:
        case CPP14Parser.Operator:
        case CPP14Parser.Reinterpret_cast:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Sizeof:
        case CPP14Parser.Static_cast:
        case CPP14Parser.This:
        case CPP14Parser.Throw:
        case CPP14Parser.Typeid:
        case CPP14Parser.Typename:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Void:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftParen:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Plus:
        case CPP14Parser.Minus:
        case CPP14Parser.Star:
        case CPP14Parser.And:
        case CPP14Parser.Or:
        case CPP14Parser.Tilde:
        case CPP14Parser.Not:
        case CPP14Parser.PlusPlus:
        case CPP14Parser.MinusMinus:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Identifier:
        case CPP14Parser.Integerliteral:
        case CPP14Parser.Characterliteral:
        case CPP14Parser.Floatingliteral:
        case CPP14Parser.Stringliteral:
        case CPP14Parser.Booleanliteral:
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 2135;
            this.assignmentexpression();
            break;
        case CPP14Parser.LeftBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 2136;
            this.bracedinitlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_initializerlist;
    return this;
}

InitializerlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerlistContext.prototype.constructor = InitializerlistContext;

InitializerlistContext.prototype.initializerclause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitializerclauseContext);
    } else {
        return this.getTypedRuleContext(InitializerclauseContext,i);
    }
};

InitializerlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitInitializerlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.InitializerlistContext = InitializerlistContext;

CPP14Parser.prototype.initializerlist = function() {

    var localctx = new InitializerlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CPP14Parser.RULE_initializerlist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2139;
        this.initializerclause();
        this.state = 2144;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,259,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2140;
                this.match(CPP14Parser.Comma);
                this.state = 2141;
                this.initializerclause(); 
            }
            this.state = 2146;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,259,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BracedinitlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_bracedinitlist;
    return this;
}

BracedinitlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BracedinitlistContext.prototype.constructor = BracedinitlistContext;

BracedinitlistContext.prototype.initializerlist = function() {
    return this.getTypedRuleContext(InitializerlistContext,0);
};

BracedinitlistContext.prototype.Comma = function() {
    return this.getToken(CPP14Parser.Comma, 0);
};

BracedinitlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBracedinitlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BracedinitlistContext = BracedinitlistContext;

CPP14Parser.prototype.bracedinitlist = function() {

    var localctx = new BracedinitlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CPP14Parser.RULE_bracedinitlist);
    var _la = 0; // Token type
    try {
        this.state = 2156;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2147;
            this.match(CPP14Parser.LeftBrace);
            this.state = 2148;
            this.initializerlist();
            this.state = 2150;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Comma) {
                this.state = 2149;
                this.match(CPP14Parser.Comma);
            }

            this.state = 2152;
            this.match(CPP14Parser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2154;
            this.match(CPP14Parser.LeftBrace);
            this.state = 2155;
            this.match(CPP14Parser.RightBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MyclassnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_myclassname;
    return this;
}

MyclassnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MyclassnameContext.prototype.constructor = MyclassnameContext;

MyclassnameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

MyclassnameContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

MyclassnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMyclassname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MyclassnameContext = MyclassnameContext;

CPP14Parser.prototype.myclassname = function() {

    var localctx = new MyclassnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CPP14Parser.RULE_myclassname);
    try {
        this.state = 2160;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2158;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2159;
            this.simpletemplateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classspecifier;
    return this;
}

ClassspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassspecifierContext.prototype.constructor = ClassspecifierContext;

ClassspecifierContext.prototype.classhead = function() {
    return this.getTypedRuleContext(ClassheadContext,0);
};

ClassspecifierContext.prototype.classbody = function() {
    return this.getTypedRuleContext(ClassbodyContext,0);
};

ClassspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClassspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassspecifierContext = ClassspecifierContext;

CPP14Parser.prototype.classspecifier = function() {

    var localctx = new ClassspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CPP14Parser.RULE_classspecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2162;
        this.classhead();
        this.state = 2163;
        this.classbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classbody;
    return this;
}

ClassbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassbodyContext.prototype.constructor = ClassbodyContext;

ClassbodyContext.prototype.memberspecification = function() {
    return this.getTypedRuleContext(MemberspecificationContext,0);
};

ClassbodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClassbody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassbodyContext = ClassbodyContext;

CPP14Parser.prototype.classbody = function() {

    var localctx = new ClassbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CPP14Parser.RULE_classbody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2165;
        this.match(CPP14Parser.LeftBrace);
        this.state = 2167;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Private - 32)) | (1 << (CPP14Parser.Protected - 32)) | (1 << (CPP14Parser.Public - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (CPP14Parser.Doublecolon - 120)) | (1 << (CPP14Parser.Semi - 120)) | (1 << (CPP14Parser.Ellipsis - 120)) | (1 << (CPP14Parser.Identifier - 120)))) !== 0)) {
            this.state = 2166;
            this.memberspecification();
        }

        this.state = 2169;
        this.match(CPP14Parser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassheadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classhead;
    return this;
}

ClassheadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassheadContext.prototype.constructor = ClassheadContext;

ClassheadContext.prototype.classkey = function() {
    return this.getTypedRuleContext(ClasskeyContext,0);
};

ClassheadContext.prototype.classheadname = function() {
    return this.getTypedRuleContext(ClassheadnameContext,0);
};

ClassheadContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ClassheadContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ClassheadContext.prototype.classvirtspecifier = function() {
    return this.getTypedRuleContext(ClassvirtspecifierContext,0);
};

ClassheadContext.prototype.baseclause = function() {
    return this.getTypedRuleContext(BaseclauseContext,0);
};

ClassheadContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClasshead(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassheadContext = ClassheadContext;

CPP14Parser.prototype.classhead = function() {

    var localctx = new ClassheadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CPP14Parser.RULE_classhead);
    var _la = 0; // Token type
    try {
        this.state = 2192;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2171;
            this.classkey();
            this.state = 2173;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2172;
                this.attributespecifierseq(0);
            }

            this.state = 2176;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
            if(la_===1) {
                this.state = 2175;
                this.nestednamespecifier(0);

            }
            this.state = 2178;
            this.classheadname();
            this.state = 2180;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Final) {
                this.state = 2179;
                this.classvirtspecifier();
            }

            this.state = 2183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 2182;
                this.baseclause();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2185;
            this.classkey();
            this.state = 2187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2186;
                this.attributespecifierseq(0);
            }

            this.state = 2190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Colon) {
                this.state = 2189;
                this.baseclause();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassheadnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classheadname;
    return this;
}

ClassheadnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassheadnameContext.prototype.constructor = ClassheadnameContext;

ClassheadnameContext.prototype.myclassname = function() {
    return this.getTypedRuleContext(MyclassnameContext,0);
};

ClassheadnameContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ClassheadnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClassheadname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassheadnameContext = ClassheadnameContext;

CPP14Parser.prototype.classheadname = function() {

    var localctx = new ClassheadnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CPP14Parser.RULE_classheadname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2195;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
        if(la_===1) {
            this.state = 2194;
            this.nestednamespecifier(0);

        }
        this.state = 2197;
        this.myclassname();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassvirtspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classvirtspecifier;
    return this;
}

ClassvirtspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassvirtspecifierContext.prototype.constructor = ClassvirtspecifierContext;

ClassvirtspecifierContext.prototype.Final = function() {
    return this.getToken(CPP14Parser.Final, 0);
};

ClassvirtspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClassvirtspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassvirtspecifierContext = ClassvirtspecifierContext;

CPP14Parser.prototype.classvirtspecifier = function() {

    var localctx = new ClassvirtspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, CPP14Parser.RULE_classvirtspecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2199;
        this.match(CPP14Parser.Final);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClasskeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classkey;
    return this;
}

ClasskeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClasskeyContext.prototype.constructor = ClasskeyContext;

ClasskeyContext.prototype.Class = function() {
    return this.getToken(CPP14Parser.Class, 0);
};

ClasskeyContext.prototype.Struct = function() {
    return this.getToken(CPP14Parser.Struct, 0);
};

ClasskeyContext.prototype.Union = function() {
    return this.getToken(CPP14Parser.Union, 0);
};

ClasskeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClasskey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClasskeyContext = ClasskeyContext;

CPP14Parser.prototype.classkey = function() {

    var localctx = new ClasskeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CPP14Parser.RULE_classkey);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2201;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Class || _la===CPP14Parser.Struct || _la===CPP14Parser.Union)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberspecification;
    return this;
}

MemberspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberspecificationContext.prototype.constructor = MemberspecificationContext;

MemberspecificationContext.prototype.memberdeclaration = function() {
    return this.getTypedRuleContext(MemberdeclarationContext,0);
};

MemberspecificationContext.prototype.memberspecification = function() {
    return this.getTypedRuleContext(MemberspecificationContext,0);
};

MemberspecificationContext.prototype.accessspecifier = function() {
    return this.getTypedRuleContext(AccessspecifierContext,0);
};

MemberspecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMemberspecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MemberspecificationContext = MemberspecificationContext;

CPP14Parser.prototype.memberspecification = function() {

    var localctx = new MemberspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CPP14Parser.RULE_memberspecification);
    var _la = 0; // Token type
    try {
        this.state = 2212;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Alignas:
        case CPP14Parser.Auto:
        case CPP14Parser.Bool:
        case CPP14Parser.Char:
        case CPP14Parser.Char16:
        case CPP14Parser.Char32:
        case CPP14Parser.Class:
        case CPP14Parser.Const:
        case CPP14Parser.Constexpr:
        case CPP14Parser.Decltype:
        case CPP14Parser.Double:
        case CPP14Parser.File:
        case CPP14Parser.Enum:
        case CPP14Parser.Explicit:
        case CPP14Parser.Extern:
        case CPP14Parser.Float:
        case CPP14Parser.Friend:
        case CPP14Parser.Inline:
        case CPP14Parser.Int:
        case CPP14Parser.Long:
        case CPP14Parser.Mutable:
        case CPP14Parser.Operator:
        case CPP14Parser.Register:
        case CPP14Parser.Short:
        case CPP14Parser.Signed:
        case CPP14Parser.Static:
        case CPP14Parser.Static_assert:
        case CPP14Parser.Struct:
        case CPP14Parser.Template:
        case CPP14Parser.Thread_local:
        case CPP14Parser.Typedef:
        case CPP14Parser.Typename:
        case CPP14Parser.Union:
        case CPP14Parser.Unsigned:
        case CPP14Parser.Using:
        case CPP14Parser.Virtual:
        case CPP14Parser.Void:
        case CPP14Parser.Volatile:
        case CPP14Parser.Wchar:
        case CPP14Parser.LeftBracket:
        case CPP14Parser.Tilde:
        case CPP14Parser.Doublecolon:
        case CPP14Parser.Semi:
        case CPP14Parser.Ellipsis:
        case CPP14Parser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 2203;
            this.memberdeclaration();
            this.state = 2205;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Private - 32)) | (1 << (CPP14Parser.Protected - 32)) | (1 << (CPP14Parser.Public - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (CPP14Parser.Doublecolon - 120)) | (1 << (CPP14Parser.Semi - 120)) | (1 << (CPP14Parser.Ellipsis - 120)) | (1 << (CPP14Parser.Identifier - 120)))) !== 0)) {
                this.state = 2204;
                this.memberspecification();
            }

            break;
        case CPP14Parser.Private:
        case CPP14Parser.Protected:
        case CPP14Parser.Public:
            this.enterOuterAlt(localctx, 2);
            this.state = 2207;
            this.accessspecifier();
            this.state = 2208;
            this.match(CPP14Parser.Colon);
            this.state = 2210;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Friend - 32)) | (1 << (CPP14Parser.Inline - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Mutable - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Private - 32)) | (1 << (CPP14Parser.Protected - 32)) | (1 << (CPP14Parser.Public - 32)) | (1 << (CPP14Parser.Register - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Static - 32)) | (1 << (CPP14Parser.Static_assert - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.Template - 32)) | (1 << (CPP14Parser.Thread_local - 32)))) !== 0) || ((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CPP14Parser.Typedef - 67)) | (1 << (CPP14Parser.Typename - 67)) | (1 << (CPP14Parser.Union - 67)) | (1 << (CPP14Parser.Unsigned - 67)) | (1 << (CPP14Parser.Using - 67)) | (1 << (CPP14Parser.Virtual - 67)) | (1 << (CPP14Parser.Void - 67)) | (1 << (CPP14Parser.Volatile - 67)) | (1 << (CPP14Parser.Wchar - 67)) | (1 << (CPP14Parser.LeftBracket - 67)) | (1 << (CPP14Parser.Tilde - 67)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (CPP14Parser.Doublecolon - 120)) | (1 << (CPP14Parser.Semi - 120)) | (1 << (CPP14Parser.Ellipsis - 120)) | (1 << (CPP14Parser.Identifier - 120)))) !== 0)) {
                this.state = 2209;
                this.memberspecification();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberdeclaration;
    return this;
}

MemberdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberdeclarationContext.prototype.constructor = MemberdeclarationContext;

MemberdeclarationContext.prototype.membervariabledeclarationstatement = function() {
    return this.getTypedRuleContext(MembervariabledeclarationstatementContext,0);
};

MemberdeclarationContext.prototype.functiondefinition = function() {
    return this.getTypedRuleContext(FunctiondefinitionContext,0);
};

MemberdeclarationContext.prototype.usingdeclaration = function() {
    return this.getTypedRuleContext(UsingdeclarationContext,0);
};

MemberdeclarationContext.prototype.static_assertdeclaration = function() {
    return this.getTypedRuleContext(Static_assertdeclarationContext,0);
};

MemberdeclarationContext.prototype.templatedeclaration = function() {
    return this.getTypedRuleContext(TemplatedeclarationContext,0);
};

MemberdeclarationContext.prototype.aliasdeclaration = function() {
    return this.getTypedRuleContext(AliasdeclarationContext,0);
};

MemberdeclarationContext.prototype.emptydeclaration = function() {
    return this.getTypedRuleContext(EmptydeclarationContext,0);
};

MemberdeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMemberdeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MemberdeclarationContext = MemberdeclarationContext;

CPP14Parser.prototype.memberdeclaration = function() {

    var localctx = new MemberdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, CPP14Parser.RULE_memberdeclaration);
    try {
        this.state = 2221;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2214;
            this.membervariabledeclarationstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2215;
            this.functiondefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2216;
            this.usingdeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2217;
            this.static_assertdeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2218;
            this.templatedeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2219;
            this.aliasdeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2220;
            this.emptydeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MembervariabledeclarationstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_membervariabledeclarationstatement;
    return this;
}

MembervariabledeclarationstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MembervariabledeclarationstatementContext.prototype.constructor = MembervariabledeclarationstatementContext;

MembervariabledeclarationstatementContext.prototype.membervariabledeclaration = function() {
    return this.getTypedRuleContext(MembervariabledeclarationContext,0);
};

MembervariabledeclarationstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMembervariabledeclarationstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MembervariabledeclarationstatementContext = MembervariabledeclarationstatementContext;

CPP14Parser.prototype.membervariabledeclarationstatement = function() {

    var localctx = new MembervariabledeclarationstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CPP14Parser.RULE_membervariabledeclarationstatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2223;
        this.membervariabledeclaration();
        this.state = 2224;
        this.match(CPP14Parser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MembervariabledeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_membervariabledeclaration;
    return this;
}

MembervariabledeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MembervariabledeclarationContext.prototype.constructor = MembervariabledeclarationContext;

MembervariabledeclarationContext.prototype.typespecifier = function() {
    return this.getTypedRuleContext(TypespecifierContext,0);
};

MembervariabledeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

MembervariabledeclarationContext.prototype.declspecifierseqwithouttype = function() {
    return this.getTypedRuleContext(DeclspecifierseqwithouttypeContext,0);
};

MembervariabledeclarationContext.prototype.ptroperator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PtroperatorContext);
    } else {
        return this.getTypedRuleContext(PtroperatorContext,i);
    }
};

MembervariabledeclarationContext.prototype.memberdeclaratorlist = function() {
    return this.getTypedRuleContext(MemberdeclaratorlistContext,0);
};

MembervariabledeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMembervariabledeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MembervariabledeclarationContext = MembervariabledeclarationContext;

CPP14Parser.prototype.membervariabledeclaration = function() {

    var localctx = new MembervariabledeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CPP14Parser.RULE_membervariabledeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2227;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
            this.state = 2226;
            this.attributespecifierseq(0);
        }

        this.state = 2230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 15)) & ~0x1f) == 0 && ((1 << (_la - 15)) & ((1 << (CPP14Parser.Constexpr - 15)) | (1 << (CPP14Parser.Explicit - 15)) | (1 << (CPP14Parser.Extern - 15)) | (1 << (CPP14Parser.Friend - 15)) | (1 << (CPP14Parser.Inline - 15)) | (1 << (CPP14Parser.Mutable - 15)))) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CPP14Parser.Register - 50)) | (1 << (CPP14Parser.Static - 50)) | (1 << (CPP14Parser.Thread_local - 50)) | (1 << (CPP14Parser.Typedef - 50)) | (1 << (CPP14Parser.Virtual - 50)))) !== 0)) {
            this.state = 2229;
            this.declspecifierseqwithouttype();
        }

        this.state = 2232;
        this.typespecifier();
        this.state = 2236;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,278,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2233;
                this.ptroperator(); 
            }
            this.state = 2238;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,278,this._ctx);
        }

        this.state = 2240;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Alignas || _la===CPP14Parser.Decltype || _la===CPP14Parser.Operator || _la===CPP14Parser.LeftBracket || _la===CPP14Parser.Tilde || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (CPP14Parser.Colon - 119)) | (1 << (CPP14Parser.Doublecolon - 119)) | (1 << (CPP14Parser.Ellipsis - 119)) | (1 << (CPP14Parser.Identifier - 119)))) !== 0)) {
            this.state = 2239;
            this.memberdeclaratorlist(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberdeclaratorlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberdeclaratorlist;
    return this;
}

MemberdeclaratorlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberdeclaratorlistContext.prototype.constructor = MemberdeclaratorlistContext;

MemberdeclaratorlistContext.prototype.memberdeclarator = function() {
    return this.getTypedRuleContext(MemberdeclaratorContext,0);
};

MemberdeclaratorlistContext.prototype.memberdeclaratorlist = function() {
    return this.getTypedRuleContext(MemberdeclaratorlistContext,0);
};

MemberdeclaratorlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMemberdeclaratorlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.memberdeclaratorlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MemberdeclaratorlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 354;
    this.enterRecursionRule(localctx, 354, CPP14Parser.RULE_memberdeclaratorlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2243;
        this.memberdeclarator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2250;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,280,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new MemberdeclaratorlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_memberdeclaratorlist);
                this.state = 2245;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2246;
                this.match(CPP14Parser.Comma);
                this.state = 2247;
                this.memberdeclarator(); 
            }
            this.state = 2252;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,280,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function MemberdeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_memberdeclarator;
    return this;
}

MemberdeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberdeclaratorContext.prototype.constructor = MemberdeclaratorContext;

MemberdeclaratorContext.prototype.declaratorid = function() {
    return this.getTypedRuleContext(DeclaratoridContext,0);
};

MemberdeclaratorContext.prototype.virtspecifierseq = function() {
    return this.getTypedRuleContext(VirtspecifierseqContext,0);
};

MemberdeclaratorContext.prototype.purespecifier = function() {
    return this.getTypedRuleContext(PurespecifierContext,0);
};

MemberdeclaratorContext.prototype.initializerclause = function() {
    return this.getTypedRuleContext(InitializerclauseContext,0);
};

MemberdeclaratorContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

MemberdeclaratorContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

MemberdeclaratorContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

MemberdeclaratorContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

MemberdeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMemberdeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MemberdeclaratorContext = MemberdeclaratorContext;

CPP14Parser.prototype.memberdeclarator = function() {

    var localctx = new MemberdeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, CPP14Parser.RULE_memberdeclarator);
    var _la = 0; // Token type
    try {
        this.state = 2277;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2253;
            this.declaratorid();
            this.state = 2255;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
            if(la_===1) {
                this.state = 2254;
                this.virtspecifierseq(0);

            }
            this.state = 2258;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
            if(la_===1) {
                this.state = 2257;
                this.purespecifier();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2260;
            this.declaratorid();
            this.state = 2263;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
            if(la_===1) {
                this.state = 2261;
                this.match(CPP14Parser.Assign);
                this.state = 2262;
                this.initializerclause();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2265;
            this.declaratorid();
            this.state = 2267;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
            if(la_===1) {
                this.state = 2266;
                this.bracedinitlist();

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2270;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2269;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2273;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2272;
                this.attributespecifierseq(0);
            }

            this.state = 2275;
            this.match(CPP14Parser.Colon);
            this.state = 2276;
            this.constantexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VirtspecifierseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_virtspecifierseq;
    return this;
}

VirtspecifierseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VirtspecifierseqContext.prototype.constructor = VirtspecifierseqContext;

VirtspecifierseqContext.prototype.virtspecifier = function() {
    return this.getTypedRuleContext(VirtspecifierContext,0);
};

VirtspecifierseqContext.prototype.virtspecifierseq = function() {
    return this.getTypedRuleContext(VirtspecifierseqContext,0);
};

VirtspecifierseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVirtspecifierseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.virtspecifierseq = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new VirtspecifierseqContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 358;
    this.enterRecursionRule(localctx, 358, CPP14Parser.RULE_virtspecifierseq, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2280;
        this.virtspecifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2286;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,288,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new VirtspecifierseqContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_virtspecifierseq);
                this.state = 2282;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2283;
                this.virtspecifier(); 
            }
            this.state = 2288;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,288,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function VirtspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_virtspecifier;
    return this;
}

VirtspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VirtspecifierContext.prototype.constructor = VirtspecifierContext;

VirtspecifierContext.prototype.Override = function() {
    return this.getToken(CPP14Parser.Override, 0);
};

VirtspecifierContext.prototype.Final = function() {
    return this.getToken(CPP14Parser.Final, 0);
};

VirtspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitVirtspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.VirtspecifierContext = VirtspecifierContext;

CPP14Parser.prototype.virtspecifier = function() {

    var localctx = new VirtspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, CPP14Parser.RULE_virtspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2289;
        _la = this._input.LA(1);
        if(!(_la===CPP14Parser.Final || _la===CPP14Parser.Override)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PurespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_purespecifier;
    this.val = null; // Token
    return this;
}

PurespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PurespecifierContext.prototype.constructor = PurespecifierContext;

PurespecifierContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

PurespecifierContext.prototype.Octalliteral = function() {
    return this.getToken(CPP14Parser.Octalliteral, 0);
};

PurespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPurespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PurespecifierContext = PurespecifierContext;

CPP14Parser.prototype.purespecifier = function() {

    var localctx = new PurespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CPP14Parser.RULE_purespecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2291;
        this.match(CPP14Parser.Assign);
        this.state = 2292;
        localctx.val = this.match(CPP14Parser.Octalliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseclauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_baseclause;
    return this;
}

BaseclauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseclauseContext.prototype.constructor = BaseclauseContext;

BaseclauseContext.prototype.basespecifierlist = function() {
    return this.getTypedRuleContext(BasespecifierlistContext,0);
};

BaseclauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBaseclause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BaseclauseContext = BaseclauseContext;

CPP14Parser.prototype.baseclause = function() {

    var localctx = new BaseclauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CPP14Parser.RULE_baseclause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2294;
        this.match(CPP14Parser.Colon);
        this.state = 2295;
        this.basespecifierlist(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BasespecifierlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_basespecifierlist;
    return this;
}

BasespecifierlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasespecifierlistContext.prototype.constructor = BasespecifierlistContext;

BasespecifierlistContext.prototype.basespecifier = function() {
    return this.getTypedRuleContext(BasespecifierContext,0);
};

BasespecifierlistContext.prototype.basespecifierlist = function() {
    return this.getTypedRuleContext(BasespecifierlistContext,0);
};

BasespecifierlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBasespecifierlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.basespecifierlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BasespecifierlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 366;
    this.enterRecursionRule(localctx, 366, CPP14Parser.RULE_basespecifierlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2298;
        this.basespecifier();
        this.state = 2300;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
        if(la_===1) {
            this.state = 2299;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2310;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,291,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new BasespecifierlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_basespecifierlist);
                this.state = 2302;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2303;
                this.match(CPP14Parser.Comma);
                this.state = 2304;
                this.basespecifier();
                this.state = 2306;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
                if(la_===1) {
                    this.state = 2305;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 2312;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,291,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function BasespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_basespecifier;
    return this;
}

BasespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasespecifierContext.prototype.constructor = BasespecifierContext;

BasespecifierContext.prototype.basetypespecifier = function() {
    return this.getTypedRuleContext(BasetypespecifierContext,0);
};

BasespecifierContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

BasespecifierContext.prototype.Virtual = function() {
    return this.getToken(CPP14Parser.Virtual, 0);
};

BasespecifierContext.prototype.accessspecifier = function() {
    return this.getTypedRuleContext(AccessspecifierContext,0);
};

BasespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBasespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BasespecifierContext = BasespecifierContext;

CPP14Parser.prototype.basespecifier = function() {

    var localctx = new BasespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, CPP14Parser.RULE_basespecifier);
    var _la = 0; // Token type
    try {
        this.state = 2334;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2314;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2313;
                this.attributespecifierseq(0);
            }

            this.state = 2316;
            this.basetypespecifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2317;
                this.attributespecifierseq(0);
            }

            this.state = 2320;
            this.match(CPP14Parser.Virtual);
            this.state = 2322;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CPP14Parser.Private - 47)) | (1 << (CPP14Parser.Protected - 47)) | (1 << (CPP14Parser.Public - 47)))) !== 0)) {
                this.state = 2321;
                this.accessspecifier();
            }

            this.state = 2324;
            this.basetypespecifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2325;
                this.attributespecifierseq(0);
            }

            this.state = 2328;
            this.accessspecifier();
            this.state = 2330;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Virtual) {
                this.state = 2329;
                this.match(CPP14Parser.Virtual);
            }

            this.state = 2332;
            this.basetypespecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassordecltypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_classordecltype;
    return this;
}

ClassordecltypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassordecltypeContext.prototype.constructor = ClassordecltypeContext;

ClassordecltypeContext.prototype.myclassname = function() {
    return this.getTypedRuleContext(MyclassnameContext,0);
};

ClassordecltypeContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

ClassordecltypeContext.prototype.decltypespecifier = function() {
    return this.getTypedRuleContext(DecltypespecifierContext,0);
};

ClassordecltypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitClassordecltype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ClassordecltypeContext = ClassordecltypeContext;

CPP14Parser.prototype.classordecltype = function() {

    var localctx = new ClassordecltypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CPP14Parser.RULE_classordecltype);
    try {
        this.state = 2341;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2337;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
            if(la_===1) {
                this.state = 2336;
                this.nestednamespecifier(0);

            }
            this.state = 2339;
            this.myclassname();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2340;
            this.decltypespecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BasetypespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_basetypespecifier;
    return this;
}

BasetypespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasetypespecifierContext.prototype.constructor = BasetypespecifierContext;

BasetypespecifierContext.prototype.classordecltype = function() {
    return this.getTypedRuleContext(ClassordecltypeContext,0);
};

BasetypespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBasetypespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BasetypespecifierContext = BasetypespecifierContext;

CPP14Parser.prototype.basetypespecifier = function() {

    var localctx = new BasetypespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CPP14Parser.RULE_basetypespecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2343;
        this.classordecltype();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AccessspecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_accessspecifier;
    return this;
}

AccessspecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AccessspecifierContext.prototype.constructor = AccessspecifierContext;

AccessspecifierContext.prototype.Private = function() {
    return this.getToken(CPP14Parser.Private, 0);
};

AccessspecifierContext.prototype.Protected = function() {
    return this.getToken(CPP14Parser.Protected, 0);
};

AccessspecifierContext.prototype.Public = function() {
    return this.getToken(CPP14Parser.Public, 0);
};

AccessspecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitAccessspecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.AccessspecifierContext = AccessspecifierContext;

CPP14Parser.prototype.accessspecifier = function() {

    var localctx = new AccessspecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CPP14Parser.RULE_accessspecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2345;
        _la = this._input.LA(1);
        if(!(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CPP14Parser.Private - 47)) | (1 << (CPP14Parser.Protected - 47)) | (1 << (CPP14Parser.Public - 47)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConversionfunctionidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversionfunctionid;
    return this;
}

ConversionfunctionidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversionfunctionidContext.prototype.constructor = ConversionfunctionidContext;

ConversionfunctionidContext.prototype.Operator = function() {
    return this.getToken(CPP14Parser.Operator, 0);
};

ConversionfunctionidContext.prototype.conversiontypeid = function() {
    return this.getTypedRuleContext(ConversiontypeidContext,0);
};

ConversionfunctionidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitConversionfunctionid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConversionfunctionidContext = ConversionfunctionidContext;

CPP14Parser.prototype.conversionfunctionid = function() {

    var localctx = new ConversionfunctionidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CPP14Parser.RULE_conversionfunctionid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2347;
        this.match(CPP14Parser.Operator);
        this.state = 2348;
        this.conversiontypeid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConversiontypeidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversiontypeid;
    return this;
}

ConversiontypeidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversiontypeidContext.prototype.constructor = ConversiontypeidContext;

ConversiontypeidContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

ConversiontypeidContext.prototype.conversiondeclarator = function() {
    return this.getTypedRuleContext(ConversiondeclaratorContext,0);
};

ConversiontypeidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitConversiontypeid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConversiontypeidContext = ConversiontypeidContext;

CPP14Parser.prototype.conversiontypeid = function() {

    var localctx = new ConversiontypeidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CPP14Parser.RULE_conversiontypeid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2350;
        this.typespecifierseq();
        this.state = 2352;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
        if(la_===1) {
            this.state = 2351;
            this.conversiondeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConversiondeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_conversiondeclarator;
    return this;
}

ConversiondeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConversiondeclaratorContext.prototype.constructor = ConversiondeclaratorContext;

ConversiondeclaratorContext.prototype.ptroperator = function() {
    return this.getTypedRuleContext(PtroperatorContext,0);
};

ConversiondeclaratorContext.prototype.conversiondeclarator = function() {
    return this.getTypedRuleContext(ConversiondeclaratorContext,0);
};

ConversiondeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitConversiondeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ConversiondeclaratorContext = ConversiondeclaratorContext;

CPP14Parser.prototype.conversiondeclarator = function() {

    var localctx = new ConversiondeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CPP14Parser.RULE_conversiondeclarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2354;
        this.ptroperator();
        this.state = 2356;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
        if(la_===1) {
            this.state = 2355;
            this.conversiondeclarator();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CtorinitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_ctorinitializer;
    return this;
}

CtorinitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CtorinitializerContext.prototype.constructor = CtorinitializerContext;

CtorinitializerContext.prototype.meminitializerlist = function() {
    return this.getTypedRuleContext(MeminitializerlistContext,0);
};

CtorinitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCtorinitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CtorinitializerContext = CtorinitializerContext;

CPP14Parser.prototype.ctorinitializer = function() {

    var localctx = new CtorinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, CPP14Parser.RULE_ctorinitializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2358;
        this.match(CPP14Parser.Colon);
        this.state = 2359;
        this.meminitializerlist();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MeminitializerlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_meminitializerlist;
    return this;
}

MeminitializerlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MeminitializerlistContext.prototype.constructor = MeminitializerlistContext;

MeminitializerlistContext.prototype.meminitializer = function() {
    return this.getTypedRuleContext(MeminitializerContext,0);
};

MeminitializerlistContext.prototype.meminitializerlist = function() {
    return this.getTypedRuleContext(MeminitializerlistContext,0);
};

MeminitializerlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMeminitializerlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MeminitializerlistContext = MeminitializerlistContext;

CPP14Parser.prototype.meminitializerlist = function() {

    var localctx = new MeminitializerlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, CPP14Parser.RULE_meminitializerlist);
    var _la = 0; // Token type
    try {
        this.state = 2372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2361;
            this.meminitializer();
            this.state = 2363;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 2362;
                this.match(CPP14Parser.Ellipsis);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2365;
            this.meminitializer();
            this.state = 2367;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Ellipsis) {
                this.state = 2366;
                this.match(CPP14Parser.Ellipsis);
            }

            this.state = 2369;
            this.match(CPP14Parser.Comma);
            this.state = 2370;
            this.meminitializerlist();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MeminitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_meminitializer;
    return this;
}

MeminitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MeminitializerContext.prototype.constructor = MeminitializerContext;

MeminitializerContext.prototype.meminitializerid = function() {
    return this.getTypedRuleContext(MeminitializeridContext,0);
};

MeminitializerContext.prototype.expressionlist = function() {
    return this.getTypedRuleContext(ExpressionlistContext,0);
};

MeminitializerContext.prototype.bracedinitlist = function() {
    return this.getTypedRuleContext(BracedinitlistContext,0);
};

MeminitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMeminitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MeminitializerContext = MeminitializerContext;

CPP14Parser.prototype.meminitializer = function() {

    var localctx = new MeminitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, CPP14Parser.RULE_meminitializer);
    var _la = 0; // Token type
    try {
        this.state = 2384;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2374;
            this.meminitializerid();
            this.state = 2375;
            this.match(CPP14Parser.LeftParen);
            this.state = 2377;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.Typeid - 64)) | (1 << (CPP14Parser.Typename - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 2376;
                this.expressionlist();
            }

            this.state = 2379;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2381;
            this.meminitializerid();
            this.state = 2382;
            this.bracedinitlist();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MeminitializeridContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_meminitializerid;
    return this;
}

MeminitializeridContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MeminitializeridContext.prototype.constructor = MeminitializeridContext;

MeminitializeridContext.prototype.classordecltype = function() {
    return this.getTypedRuleContext(ClassordecltypeContext,0);
};

MeminitializeridContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

MeminitializeridContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitMeminitializerid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.MeminitializeridContext = MeminitializeridContext;

CPP14Parser.prototype.meminitializerid = function() {

    var localctx = new MeminitializeridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, CPP14Parser.RULE_meminitializerid);
    try {
        this.state = 2388;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2386;
            this.classordecltype();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2387;
            this.match(CPP14Parser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorfunctionidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_operatorfunctionid;
    return this;
}

OperatorfunctionidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorfunctionidContext.prototype.constructor = OperatorfunctionidContext;

OperatorfunctionidContext.prototype.Operator = function() {
    return this.getToken(CPP14Parser.Operator, 0);
};

OperatorfunctionidContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

OperatorfunctionidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitOperatorfunctionid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.OperatorfunctionidContext = OperatorfunctionidContext;

CPP14Parser.prototype.operatorfunctionid = function() {

    var localctx = new OperatorfunctionidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, CPP14Parser.RULE_operatorfunctionid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2390;
        this.match(CPP14Parser.Operator);
        this.state = 2391;
        this.operator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteraloperatoridContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_literaloperatorid;
    return this;
}

LiteraloperatoridContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteraloperatoridContext.prototype.constructor = LiteraloperatoridContext;

LiteraloperatoridContext.prototype.Operator = function() {
    return this.getToken(CPP14Parser.Operator, 0);
};

LiteraloperatoridContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

LiteraloperatoridContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

LiteraloperatoridContext.prototype.Userdefinedstringliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedstringliteral, 0);
};

LiteraloperatoridContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLiteraloperatorid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LiteraloperatoridContext = LiteraloperatoridContext;

CPP14Parser.prototype.literaloperatorid = function() {

    var localctx = new LiteraloperatoridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, CPP14Parser.RULE_literaloperatorid);
    try {
        this.state = 2398;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2393;
            this.match(CPP14Parser.Operator);
            this.state = 2394;
            this.match(CPP14Parser.Stringliteral);
            this.state = 2395;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2396;
            this.match(CPP14Parser.Operator);
            this.state = 2397;
            this.match(CPP14Parser.Userdefinedstringliteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplatedeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templatedeclaration;
    return this;
}

TemplatedeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplatedeclarationContext.prototype.constructor = TemplatedeclarationContext;

TemplatedeclarationContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

TemplatedeclarationContext.prototype.templateparameterlist = function() {
    return this.getTypedRuleContext(TemplateparameterlistContext,0);
};

TemplatedeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

TemplatedeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplatedeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TemplatedeclarationContext = TemplatedeclarationContext;

CPP14Parser.prototype.templatedeclaration = function() {

    var localctx = new TemplatedeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, CPP14Parser.RULE_templatedeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2400;
        this.match(CPP14Parser.Template);
        this.state = 2401;
        this.match(CPP14Parser.Less);
        this.state = 2402;
        this.templateparameterlist(0);
        this.state = 2403;
        this.match(CPP14Parser.Greater);
        this.state = 2404;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateparameterlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateparameterlist;
    return this;
}

TemplateparameterlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateparameterlistContext.prototype.constructor = TemplateparameterlistContext;

TemplateparameterlistContext.prototype.templateparameter = function() {
    return this.getTypedRuleContext(TemplateparameterContext,0);
};

TemplateparameterlistContext.prototype.templateparameterlist = function() {
    return this.getTypedRuleContext(TemplateparameterlistContext,0);
};

TemplateparameterlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplateparameterlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.templateparameterlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TemplateparameterlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 396;
    this.enterRecursionRule(localctx, 396, CPP14Parser.RULE_templateparameterlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2407;
        this.templateparameter();
        this._ctx.stop = this._input.LT(-1);
        this.state = 2414;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,309,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TemplateparameterlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_templateparameterlist);
                this.state = 2409;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2410;
                this.match(CPP14Parser.Comma);
                this.state = 2411;
                this.templateparameter(); 
            }
            this.state = 2416;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,309,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TemplateparameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateparameter;
    return this;
}

TemplateparameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateparameterContext.prototype.constructor = TemplateparameterContext;

TemplateparameterContext.prototype.typeparameter = function() {
    return this.getTypedRuleContext(TypeparameterContext,0);
};

TemplateparameterContext.prototype.parameterdeclaration = function() {
    return this.getTypedRuleContext(ParameterdeclarationContext,0);
};

TemplateparameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplateparameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TemplateparameterContext = TemplateparameterContext;

CPP14Parser.prototype.templateparameter = function() {

    var localctx = new TemplateparameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, CPP14Parser.RULE_templateparameter);
    try {
        this.state = 2419;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2417;
            this.typeparameter();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2418;
            this.parameterdeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeparameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeparameter;
    return this;
}

TypeparameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeparameterContext.prototype.constructor = TypeparameterContext;

TypeparameterContext.prototype.Class = function() {
    return this.getToken(CPP14Parser.Class, 0);
};

TypeparameterContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TypeparameterContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

TypeparameterContext.prototype.Typename = function() {
    return this.getToken(CPP14Parser.Typename, 0);
};

TypeparameterContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

TypeparameterContext.prototype.templateparameterlist = function() {
    return this.getTypedRuleContext(TemplateparameterlistContext,0);
};

TypeparameterContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

TypeparameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypeparameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypeparameterContext = TypeparameterContext;

CPP14Parser.prototype.typeparameter = function() {

    var localctx = new TypeparameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, CPP14Parser.RULE_typeparameter);
    var _la = 0; // Token type
    try {
        this.state = 2469;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2421;
            this.match(CPP14Parser.Class);
            this.state = 2423;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
            if(la_===1) {
                this.state = 2422;
                this.match(CPP14Parser.Ellipsis);

            }
            this.state = 2426;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
            if(la_===1) {
                this.state = 2425;
                this.match(CPP14Parser.Identifier);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2428;
            this.match(CPP14Parser.Class);
            this.state = 2430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2429;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2432;
            this.match(CPP14Parser.Assign);
            this.state = 2433;
            this.typeid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2434;
            this.match(CPP14Parser.Typename);
            this.state = 2436;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
            if(la_===1) {
                this.state = 2435;
                this.match(CPP14Parser.Ellipsis);

            }
            this.state = 2439;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
            if(la_===1) {
                this.state = 2438;
                this.match(CPP14Parser.Identifier);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2441;
            this.match(CPP14Parser.Typename);
            this.state = 2443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2442;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2445;
            this.match(CPP14Parser.Assign);
            this.state = 2446;
            this.typeid();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2447;
            this.match(CPP14Parser.Template);
            this.state = 2448;
            this.match(CPP14Parser.Less);
            this.state = 2449;
            this.templateparameterlist(0);
            this.state = 2450;
            this.match(CPP14Parser.Greater);
            this.state = 2451;
            this.match(CPP14Parser.Class);
            this.state = 2453;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
            if(la_===1) {
                this.state = 2452;
                this.match(CPP14Parser.Ellipsis);

            }
            this.state = 2456;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
            if(la_===1) {
                this.state = 2455;
                this.match(CPP14Parser.Identifier);

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2458;
            this.match(CPP14Parser.Template);
            this.state = 2459;
            this.match(CPP14Parser.Less);
            this.state = 2460;
            this.templateparameterlist(0);
            this.state = 2461;
            this.match(CPP14Parser.Greater);
            this.state = 2462;
            this.match(CPP14Parser.Class);
            this.state = 2464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Identifier) {
                this.state = 2463;
                this.match(CPP14Parser.Identifier);
            }

            this.state = 2466;
            this.match(CPP14Parser.Assign);
            this.state = 2467;
            this.idexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpletemplateidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_simpletemplateid;
    return this;
}

SimpletemplateidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpletemplateidContext.prototype.constructor = SimpletemplateidContext;

SimpletemplateidContext.prototype.templatename = function() {
    return this.getTypedRuleContext(TemplatenameContext,0);
};

SimpletemplateidContext.prototype.templateargumentlist = function() {
    return this.getTypedRuleContext(TemplateargumentlistContext,0);
};

SimpletemplateidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitSimpletemplateid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.SimpletemplateidContext = SimpletemplateidContext;

CPP14Parser.prototype.simpletemplateid = function() {

    var localctx = new SimpletemplateidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, CPP14Parser.RULE_simpletemplateid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2471;
        this.templatename();
        this.state = 2472;
        this.match(CPP14Parser.Less);
        this.state = 2474;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Union - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Volatile - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
            this.state = 2473;
            this.templateargumentlist(0);
        }

        this.state = 2476;
        this.match(CPP14Parser.Greater);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateid;
    return this;
}

TemplateidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateidContext.prototype.constructor = TemplateidContext;

TemplateidContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

TemplateidContext.prototype.operatorfunctionid = function() {
    return this.getTypedRuleContext(OperatorfunctionidContext,0);
};

TemplateidContext.prototype.templateargumentlist = function() {
    return this.getTypedRuleContext(TemplateargumentlistContext,0);
};

TemplateidContext.prototype.literaloperatorid = function() {
    return this.getTypedRuleContext(LiteraloperatoridContext,0);
};

TemplateidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplateid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TemplateidContext = TemplateidContext;

CPP14Parser.prototype.templateid = function() {

    var localctx = new TemplateidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, CPP14Parser.RULE_templateid);
    var _la = 0; // Token type
    try {
        this.state = 2493;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2478;
            this.simpletemplateid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2479;
            this.operatorfunctionid();
            this.state = 2480;
            this.match(CPP14Parser.Less);
            this.state = 2482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Union - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Volatile - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 2481;
                this.templateargumentlist(0);
            }

            this.state = 2484;
            this.match(CPP14Parser.Greater);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2486;
            this.literaloperatorid();
            this.state = 2487;
            this.match(CPP14Parser.Less);
            this.state = 2489;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.New - 32)) | (1 << (CPP14Parser.Noexcept - 32)) | (1 << (CPP14Parser.Nullptr - 32)) | (1 << (CPP14Parser.Operator - 32)) | (1 << (CPP14Parser.Reinterpret_cast - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Sizeof - 32)) | (1 << (CPP14Parser.Static_cast - 32)) | (1 << (CPP14Parser.Struct - 32)) | (1 << (CPP14Parser.This - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPP14Parser.Typeid - 68)) | (1 << (CPP14Parser.Typename - 68)) | (1 << (CPP14Parser.Union - 68)) | (1 << (CPP14Parser.Unsigned - 68)) | (1 << (CPP14Parser.Void - 68)) | (1 << (CPP14Parser.Volatile - 68)) | (1 << (CPP14Parser.Wchar - 68)) | (1 << (CPP14Parser.LeftParen - 68)) | (1 << (CPP14Parser.LeftBracket - 68)) | (1 << (CPP14Parser.Plus - 68)) | (1 << (CPP14Parser.Minus - 68)) | (1 << (CPP14Parser.Star - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Or - 68)) | (1 << (CPP14Parser.Tilde - 68)) | (1 << (CPP14Parser.Not - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CPP14Parser.PlusPlus - 113)) | (1 << (CPP14Parser.MinusMinus - 113)) | (1 << (CPP14Parser.Doublecolon - 113)) | (1 << (CPP14Parser.Identifier - 113)) | (1 << (CPP14Parser.Integerliteral - 113)) | (1 << (CPP14Parser.Characterliteral - 113)) | (1 << (CPP14Parser.Floatingliteral - 113)) | (1 << (CPP14Parser.Stringliteral - 113)) | (1 << (CPP14Parser.Booleanliteral - 113)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) | (1 << (CPP14Parser.Userdefinedstringliteral - 113)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !== 0)) {
                this.state = 2488;
                this.templateargumentlist(0);
            }

            this.state = 2491;
            this.match(CPP14Parser.Greater);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplatenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templatename;
    return this;
}

TemplatenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplatenameContext.prototype.constructor = TemplatenameContext;

TemplatenameContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TemplatenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplatename(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TemplatenameContext = TemplatenameContext;

CPP14Parser.prototype.templatename = function() {

    var localctx = new TemplatenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, CPP14Parser.RULE_templatename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2495;
        this.match(CPP14Parser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TemplateargumentlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateargumentlist;
    return this;
}

TemplateargumentlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateargumentlistContext.prototype.constructor = TemplateargumentlistContext;

TemplateargumentlistContext.prototype.templateargument = function() {
    return this.getTypedRuleContext(TemplateargumentContext,0);
};

TemplateargumentlistContext.prototype.templateargumentlist = function() {
    return this.getTypedRuleContext(TemplateargumentlistContext,0);
};

TemplateargumentlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplateargumentlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.templateargumentlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TemplateargumentlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 408;
    this.enterRecursionRule(localctx, 408, CPP14Parser.RULE_templateargumentlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2498;
        this.templateargument();
        this.state = 2500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
        if(la_===1) {
            this.state = 2499;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2510;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,327,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TemplateargumentlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_templateargumentlist);
                this.state = 2502;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2503;
                this.match(CPP14Parser.Comma);
                this.state = 2504;
                this.templateargument();
                this.state = 2506;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
                if(la_===1) {
                    this.state = 2505;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 2512;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,327,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TemplateargumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_templateargument;
    return this;
}

TemplateargumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemplateargumentContext.prototype.constructor = TemplateargumentContext;

TemplateargumentContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

TemplateargumentContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

TemplateargumentContext.prototype.idexpression = function() {
    return this.getTypedRuleContext(IdexpressionContext,0);
};

TemplateargumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTemplateargument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TemplateargumentContext = TemplateargumentContext;

CPP14Parser.prototype.templateargument = function() {

    var localctx = new TemplateargumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, CPP14Parser.RULE_templateargument);
    try {
        this.state = 2516;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2513;
            this.constantexpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2514;
            this.typeid();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2515;
            this.idexpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypenamespecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typenamespecifier;
    return this;
}

TypenamespecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypenamespecifierContext.prototype.constructor = TypenamespecifierContext;

TypenamespecifierContext.prototype.Typename = function() {
    return this.getToken(CPP14Parser.Typename, 0);
};

TypenamespecifierContext.prototype.nestednamespecifier = function() {
    return this.getTypedRuleContext(NestednamespecifierContext,0);
};

TypenamespecifierContext.prototype.Identifier = function() {
    return this.getToken(CPP14Parser.Identifier, 0);
};

TypenamespecifierContext.prototype.simpletemplateid = function() {
    return this.getTypedRuleContext(SimpletemplateidContext,0);
};

TypenamespecifierContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

TypenamespecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypenamespecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TypenamespecifierContext = TypenamespecifierContext;

CPP14Parser.prototype.typenamespecifier = function() {

    var localctx = new TypenamespecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, CPP14Parser.RULE_typenamespecifier);
    var _la = 0; // Token type
    try {
        this.state = 2529;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2518;
            this.match(CPP14Parser.Typename);
            this.state = 2519;
            this.nestednamespecifier(0);
            this.state = 2520;
            this.match(CPP14Parser.Identifier);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2522;
            this.match(CPP14Parser.Typename);
            this.state = 2523;
            this.nestednamespecifier(0);
            this.state = 2525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Template) {
                this.state = 2524;
                this.match(CPP14Parser.Template);
            }

            this.state = 2527;
            this.simpletemplateid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitinstantiationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_explicitinstantiation;
    return this;
}

ExplicitinstantiationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitinstantiationContext.prototype.constructor = ExplicitinstantiationContext;

ExplicitinstantiationContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

ExplicitinstantiationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExplicitinstantiationContext.prototype.Extern = function() {
    return this.getToken(CPP14Parser.Extern, 0);
};

ExplicitinstantiationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExplicitinstantiation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExplicitinstantiationContext = ExplicitinstantiationContext;

CPP14Parser.prototype.explicitinstantiation = function() {

    var localctx = new ExplicitinstantiationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, CPP14Parser.RULE_explicitinstantiation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Extern) {
            this.state = 2531;
            this.match(CPP14Parser.Extern);
        }

        this.state = 2534;
        this.match(CPP14Parser.Template);
        this.state = 2535;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitspecializationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_explicitspecialization;
    return this;
}

ExplicitspecializationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitspecializationContext.prototype.constructor = ExplicitspecializationContext;

ExplicitspecializationContext.prototype.Template = function() {
    return this.getToken(CPP14Parser.Template, 0);
};

ExplicitspecializationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExplicitspecializationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExplicitspecialization(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExplicitspecializationContext = ExplicitspecializationContext;

CPP14Parser.prototype.explicitspecialization = function() {

    var localctx = new ExplicitspecializationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, CPP14Parser.RULE_explicitspecialization);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2537;
        this.match(CPP14Parser.Template);
        this.state = 2538;
        this.match(CPP14Parser.Less);
        this.state = 2539;
        this.match(CPP14Parser.Greater);
        this.state = 2540;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryblockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_tryblock;
    return this;
}

TryblockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryblockContext.prototype.constructor = TryblockContext;

TryblockContext.prototype.Try = function() {
    return this.getToken(CPP14Parser.Try, 0);
};

TryblockContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

TryblockContext.prototype.handlerseq = function() {
    return this.getTypedRuleContext(HandlerseqContext,0);
};

TryblockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTryblock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.TryblockContext = TryblockContext;

CPP14Parser.prototype.tryblock = function() {

    var localctx = new TryblockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, CPP14Parser.RULE_tryblock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2542;
        this.match(CPP14Parser.Try);
        this.state = 2543;
        this.compoundstatement();
        this.state = 2544;
        this.handlerseq();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiontryblockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_functiontryblock;
    return this;
}

FunctiontryblockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiontryblockContext.prototype.constructor = FunctiontryblockContext;

FunctiontryblockContext.prototype.Try = function() {
    return this.getToken(CPP14Parser.Try, 0);
};

FunctiontryblockContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

FunctiontryblockContext.prototype.handlerseq = function() {
    return this.getTypedRuleContext(HandlerseqContext,0);
};

FunctiontryblockContext.prototype.ctorinitializer = function() {
    return this.getTypedRuleContext(CtorinitializerContext,0);
};

FunctiontryblockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFunctiontryblock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FunctiontryblockContext = FunctiontryblockContext;

CPP14Parser.prototype.functiontryblock = function() {

    var localctx = new FunctiontryblockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, CPP14Parser.RULE_functiontryblock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2546;
        this.match(CPP14Parser.Try);
        this.state = 2548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CPP14Parser.Colon) {
            this.state = 2547;
            this.ctorinitializer();
        }

        this.state = 2550;
        this.compoundstatement();
        this.state = 2551;
        this.handlerseq();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandlerseqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_handlerseq;
    return this;
}

HandlerseqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerseqContext.prototype.constructor = HandlerseqContext;

HandlerseqContext.prototype.handler = function() {
    return this.getTypedRuleContext(HandlerContext,0);
};

HandlerseqContext.prototype.handlerseq = function() {
    return this.getTypedRuleContext(HandlerseqContext,0);
};

HandlerseqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitHandlerseq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.HandlerseqContext = HandlerseqContext;

CPP14Parser.prototype.handlerseq = function() {

    var localctx = new HandlerseqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, CPP14Parser.RULE_handlerseq);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2553;
        this.handler();
        this.state = 2555;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
        if(la_===1) {
            this.state = 2554;
            this.handlerseq();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_handler;
    return this;
}

HandlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerContext.prototype.constructor = HandlerContext;

HandlerContext.prototype.Catch = function() {
    return this.getToken(CPP14Parser.Catch, 0);
};

HandlerContext.prototype.exceptiondeclaration = function() {
    return this.getTypedRuleContext(ExceptiondeclarationContext,0);
};

HandlerContext.prototype.compoundstatement = function() {
    return this.getTypedRuleContext(CompoundstatementContext,0);
};

HandlerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitHandler(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.HandlerContext = HandlerContext;

CPP14Parser.prototype.handler = function() {

    var localctx = new HandlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, CPP14Parser.RULE_handler);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2557;
        this.match(CPP14Parser.Catch);
        this.state = 2558;
        this.match(CPP14Parser.LeftParen);
        this.state = 2559;
        this.exceptiondeclaration();
        this.state = 2560;
        this.match(CPP14Parser.RightParen);
        this.state = 2561;
        this.compoundstatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExceptiondeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exceptiondeclaration;
    return this;
}

ExceptiondeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptiondeclarationContext.prototype.constructor = ExceptiondeclarationContext;

ExceptiondeclarationContext.prototype.typespecifierseq = function() {
    return this.getTypedRuleContext(TypespecifierseqContext,0);
};

ExceptiondeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ExceptiondeclarationContext.prototype.attributespecifierseq = function() {
    return this.getTypedRuleContext(AttributespecifierseqContext,0);
};

ExceptiondeclarationContext.prototype.abstractdeclarator = function() {
    return this.getTypedRuleContext(AbstractdeclaratorContext,0);
};

ExceptiondeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExceptiondeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExceptiondeclarationContext = ExceptiondeclarationContext;

CPP14Parser.prototype.exceptiondeclaration = function() {

    var localctx = new ExceptiondeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, CPP14Parser.RULE_exceptiondeclaration);
    var _la = 0; // Token type
    try {
        this.state = 2577;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2564;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2563;
                this.attributespecifierseq(0);
            }

            this.state = 2566;
            this.typespecifierseq();
            this.state = 2567;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2570;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Alignas || _la===CPP14Parser.LeftBracket) {
                this.state = 2569;
                this.attributespecifierseq(0);
            }

            this.state = 2572;
            this.typespecifierseq();
            this.state = 2574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CPP14Parser.Decltype || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (CPP14Parser.LeftParen - 78)) | (1 << (CPP14Parser.LeftBracket - 78)) | (1 << (CPP14Parser.Star - 78)) | (1 << (CPP14Parser.And - 78)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CPP14Parser.AndAnd - 111)) | (1 << (CPP14Parser.Doublecolon - 111)) | (1 << (CPP14Parser.Ellipsis - 111)) | (1 << (CPP14Parser.Identifier - 111)))) !== 0)) {
                this.state = 2573;
                this.abstractdeclarator();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2576;
            this.match(CPP14Parser.Ellipsis);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_throwexpression;
    return this;
}

ThrowexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowexpressionContext.prototype.constructor = ThrowexpressionContext;

ThrowexpressionContext.prototype.Throw = function() {
    return this.getToken(CPP14Parser.Throw, 0);
};

ThrowexpressionContext.prototype.assignmentexpression = function() {
    return this.getTypedRuleContext(AssignmentexpressionContext,0);
};

ThrowexpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitThrowexpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ThrowexpressionContext = ThrowexpressionContext;

CPP14Parser.prototype.throwexpression = function() {

    var localctx = new ThrowexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, CPP14Parser.RULE_throwexpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2579;
        this.match(CPP14Parser.Throw);
        this.state = 2581;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
        if(la_===1) {
            this.state = 2580;
            this.assignmentexpression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExceptionspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_exceptionspecification;
    return this;
}

ExceptionspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionspecificationContext.prototype.constructor = ExceptionspecificationContext;

ExceptionspecificationContext.prototype.dynamicexceptionspecification = function() {
    return this.getTypedRuleContext(DynamicexceptionspecificationContext,0);
};

ExceptionspecificationContext.prototype.noexceptspecification = function() {
    return this.getTypedRuleContext(NoexceptspecificationContext,0);
};

ExceptionspecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitExceptionspecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.ExceptionspecificationContext = ExceptionspecificationContext;

CPP14Parser.prototype.exceptionspecification = function() {

    var localctx = new ExceptionspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, CPP14Parser.RULE_exceptionspecification);
    try {
        this.state = 2585;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Throw:
            this.enterOuterAlt(localctx, 1);
            this.state = 2583;
            this.dynamicexceptionspecification();
            break;
        case CPP14Parser.Noexcept:
            this.enterOuterAlt(localctx, 2);
            this.state = 2584;
            this.noexceptspecification();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DynamicexceptionspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_dynamicexceptionspecification;
    return this;
}

DynamicexceptionspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DynamicexceptionspecificationContext.prototype.constructor = DynamicexceptionspecificationContext;

DynamicexceptionspecificationContext.prototype.Throw = function() {
    return this.getToken(CPP14Parser.Throw, 0);
};

DynamicexceptionspecificationContext.prototype.typeidlist = function() {
    return this.getTypedRuleContext(TypeidlistContext,0);
};

DynamicexceptionspecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitDynamicexceptionspecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.DynamicexceptionspecificationContext = DynamicexceptionspecificationContext;

CPP14Parser.prototype.dynamicexceptionspecification = function() {

    var localctx = new DynamicexceptionspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, CPP14Parser.RULE_dynamicexceptionspecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2587;
        this.match(CPP14Parser.Throw);
        this.state = 2588;
        this.match(CPP14Parser.LeftParen);
        this.state = 2590;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.File) | (1 << CPP14Parser.Enum))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPP14Parser.Float - 32)) | (1 << (CPP14Parser.Int - 32)) | (1 << (CPP14Parser.Long - 32)) | (1 << (CPP14Parser.Short - 32)) | (1 << (CPP14Parser.Signed - 32)) | (1 << (CPP14Parser.Struct - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (CPP14Parser.Typename - 69)) | (1 << (CPP14Parser.Union - 69)) | (1 << (CPP14Parser.Unsigned - 69)) | (1 << (CPP14Parser.Void - 69)) | (1 << (CPP14Parser.Volatile - 69)) | (1 << (CPP14Parser.Wchar - 69)))) !== 0) || _la===CPP14Parser.Doublecolon || _la===CPP14Parser.Identifier) {
            this.state = 2589;
            this.typeidlist(0);
        }

        this.state = 2592;
        this.match(CPP14Parser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeidlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_typeidlist;
    return this;
}

TypeidlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeidlistContext.prototype.constructor = TypeidlistContext;

TypeidlistContext.prototype.typeid = function() {
    return this.getTypedRuleContext(TypeidContext,0);
};

TypeidlistContext.prototype.typeidlist = function() {
    return this.getTypedRuleContext(TypeidlistContext,0);
};

TypeidlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitTypeidlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CPP14Parser.prototype.typeidlist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeidlistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 434;
    this.enterRecursionRule(localctx, 434, CPP14Parser.RULE_typeidlist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2595;
        this.typeid();
        this.state = 2597;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
        if(la_===1) {
            this.state = 2596;
            this.match(CPP14Parser.Ellipsis);

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2607;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,343,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeidlistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_typeidlist);
                this.state = 2599;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 2600;
                this.match(CPP14Parser.Comma);
                this.state = 2601;
                this.typeid();
                this.state = 2603;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
                if(la_===1) {
                    this.state = 2602;
                    this.match(CPP14Parser.Ellipsis);

                } 
            }
            this.state = 2609;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,343,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function NoexceptspecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_noexceptspecification;
    return this;
}

NoexceptspecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NoexceptspecificationContext.prototype.constructor = NoexceptspecificationContext;

NoexceptspecificationContext.prototype.Noexcept = function() {
    return this.getToken(CPP14Parser.Noexcept, 0);
};

NoexceptspecificationContext.prototype.constantexpression = function() {
    return this.getTypedRuleContext(ConstantexpressionContext,0);
};

NoexceptspecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitNoexceptspecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.NoexceptspecificationContext = NoexceptspecificationContext;

CPP14Parser.prototype.noexceptspecification = function() {

    var localctx = new NoexceptspecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, CPP14Parser.RULE_noexceptspecification);
    try {
        this.state = 2616;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2610;
            this.match(CPP14Parser.Noexcept);
            this.state = 2611;
            this.match(CPP14Parser.LeftParen);
            this.state = 2612;
            this.constantexpression();
            this.state = 2613;
            this.match(CPP14Parser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2615;
            this.match(CPP14Parser.Noexcept);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RightShiftContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_rightShift;
    return this;
}

RightShiftContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RightShiftContext.prototype.constructor = RightShiftContext;

RightShiftContext.prototype.Greater = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.Greater);
    } else {
        return this.getToken(CPP14Parser.Greater, i);
    }
};


RightShiftContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitRightShift(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.RightShiftContext = RightShiftContext;

CPP14Parser.prototype.rightShift = function() {

    var localctx = new RightShiftContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, CPP14Parser.RULE_rightShift);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2618;
        this.match(CPP14Parser.Greater);
        this.state = 2619;
        this.match(CPP14Parser.Greater);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RightShiftAssignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_rightShiftAssign;
    return this;
}

RightShiftAssignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RightShiftAssignContext.prototype.constructor = RightShiftAssignContext;

RightShiftAssignContext.prototype.Greater = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CPP14Parser.Greater);
    } else {
        return this.getToken(CPP14Parser.Greater, i);
    }
};


RightShiftAssignContext.prototype.Assign = function() {
    return this.getToken(CPP14Parser.Assign, 0);
};

RightShiftAssignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitRightShiftAssign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.RightShiftAssignContext = RightShiftAssignContext;

CPP14Parser.prototype.rightShiftAssign = function() {

    var localctx = new RightShiftAssignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, CPP14Parser.RULE_rightShiftAssign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2621;
        this.match(CPP14Parser.Greater);
        this.state = 2622;
        this.match(CPP14Parser.Greater);
        this.state = 2623;
        this.match(CPP14Parser.Assign);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;

OperatorContext.prototype.New = function() {
    return this.getToken(CPP14Parser.New, 0);
};

OperatorContext.prototype.Delete = function() {
    return this.getToken(CPP14Parser.Delete, 0);
};

OperatorContext.prototype.rightShift = function() {
    return this.getTypedRuleContext(RightShiftContext,0);
};

OperatorContext.prototype.rightShiftAssign = function() {
    return this.getTypedRuleContext(RightShiftAssignContext,0);
};

OperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.OperatorContext = OperatorContext;

CPP14Parser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, CPP14Parser.RULE_operator);
    try {
        this.state = 2673;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2625;
            this.match(CPP14Parser.New);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2626;
            this.match(CPP14Parser.Delete);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2627;
            this.match(CPP14Parser.New);
            this.state = 2628;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2629;
            this.match(CPP14Parser.RightBracket);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2630;
            this.match(CPP14Parser.Delete);
            this.state = 2631;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2632;
            this.match(CPP14Parser.RightBracket);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2633;
            this.match(CPP14Parser.Plus);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2634;
            this.match(CPP14Parser.Minus);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2635;
            this.match(CPP14Parser.Star);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2636;
            this.match(CPP14Parser.Div);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2637;
            this.match(CPP14Parser.Mod);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2638;
            this.match(CPP14Parser.Caret);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2639;
            this.match(CPP14Parser.And);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2640;
            this.match(CPP14Parser.Or);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2641;
            this.match(CPP14Parser.Tilde);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2642;
            this.match(CPP14Parser.Not);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2643;
            this.match(CPP14Parser.Assign);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2644;
            this.match(CPP14Parser.Less);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2645;
            this.match(CPP14Parser.Greater);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2646;
            this.match(CPP14Parser.PlusAssign);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2647;
            this.match(CPP14Parser.MinusAssign);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 2648;
            this.match(CPP14Parser.StarAssign);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 2649;
            this.match(CPP14Parser.DivAssign);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 2650;
            this.match(CPP14Parser.ModAssign);
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 2651;
            this.match(CPP14Parser.XorAssign);
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 2652;
            this.match(CPP14Parser.AndAssign);
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 2653;
            this.match(CPP14Parser.OrAssign);
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 2654;
            this.match(CPP14Parser.LeftShift);
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 2655;
            this.rightShift();
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 2656;
            this.rightShiftAssign();
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 2657;
            this.match(CPP14Parser.LeftShiftAssign);
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 2658;
            this.match(CPP14Parser.Equal);
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 2659;
            this.match(CPP14Parser.NotEqual);
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 2660;
            this.match(CPP14Parser.LessEqual);
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 2661;
            this.match(CPP14Parser.GreaterEqual);
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 2662;
            this.match(CPP14Parser.AndAnd);
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 2663;
            this.match(CPP14Parser.OrOr);
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 2664;
            this.match(CPP14Parser.PlusPlus);
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 2665;
            this.match(CPP14Parser.MinusMinus);
            break;

        case 38:
            this.enterOuterAlt(localctx, 38);
            this.state = 2666;
            this.match(CPP14Parser.Comma);
            break;

        case 39:
            this.enterOuterAlt(localctx, 39);
            this.state = 2667;
            this.match(CPP14Parser.ArrowStar);
            break;

        case 40:
            this.enterOuterAlt(localctx, 40);
            this.state = 2668;
            this.match(CPP14Parser.Arrow);
            break;

        case 41:
            this.enterOuterAlt(localctx, 41);
            this.state = 2669;
            this.match(CPP14Parser.LeftParen);
            this.state = 2670;
            this.match(CPP14Parser.RightParen);
            break;

        case 42:
            this.enterOuterAlt(localctx, 42);
            this.state = 2671;
            this.match(CPP14Parser.LeftBracket);
            this.state = 2672;
            this.match(CPP14Parser.RightBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.integerliteral = function() {
    return this.getTypedRuleContext(IntegerliteralContext,0);
};

LiteralContext.prototype.characterliteral = function() {
    return this.getTypedRuleContext(CharacterliteralContext,0);
};

LiteralContext.prototype.floatingliteral = function() {
    return this.getTypedRuleContext(FloatingliteralContext,0);
};

LiteralContext.prototype.stringliteral = function() {
    return this.getTypedRuleContext(StringliteralContext,0);
};

LiteralContext.prototype.booleanliteral = function() {
    return this.getTypedRuleContext(BooleanliteralContext,0);
};

LiteralContext.prototype.pointerliteral = function() {
    return this.getTypedRuleContext(PointerliteralContext,0);
};

LiteralContext.prototype.userdefinedliteral = function() {
    return this.getTypedRuleContext(UserdefinedliteralContext,0);
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.LiteralContext = LiteralContext;

CPP14Parser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, CPP14Parser.RULE_literal);
    try {
        this.state = 2682;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CPP14Parser.Integerliteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 2675;
            this.integerliteral();
            break;
        case CPP14Parser.Characterliteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 2676;
            this.characterliteral();
            break;
        case CPP14Parser.Floatingliteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 2677;
            this.floatingliteral();
            break;
        case CPP14Parser.Stringliteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 2678;
            this.stringliteral();
            break;
        case CPP14Parser.Booleanliteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 2679;
            this.booleanliteral();
            break;
        case CPP14Parser.Nullptr:
            this.enterOuterAlt(localctx, 6);
            this.state = 2680;
            this.pointerliteral();
            break;
        case CPP14Parser.Userdefinedintegerliteral:
        case CPP14Parser.Userdefinedfloatingliteral:
        case CPP14Parser.Userdefinedstringliteral:
        case CPP14Parser.Userdefinedcharacterliteral:
            this.enterOuterAlt(localctx, 7);
            this.state = 2681;
            this.userdefinedliteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegerliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_integerliteral;
    return this;
}

IntegerliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerliteralContext.prototype.constructor = IntegerliteralContext;

IntegerliteralContext.prototype.Integerliteral = function() {
    return this.getToken(CPP14Parser.Integerliteral, 0);
};

IntegerliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitIntegerliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.IntegerliteralContext = IntegerliteralContext;

CPP14Parser.prototype.integerliteral = function() {

    var localctx = new IntegerliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, CPP14Parser.RULE_integerliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2684;
        this.match(CPP14Parser.Integerliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CharacterliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_characterliteral;
    return this;
}

CharacterliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharacterliteralContext.prototype.constructor = CharacterliteralContext;

CharacterliteralContext.prototype.Characterliteral = function() {
    return this.getToken(CPP14Parser.Characterliteral, 0);
};

CharacterliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitCharacterliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.CharacterliteralContext = CharacterliteralContext;

CPP14Parser.prototype.characterliteral = function() {

    var localctx = new CharacterliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, CPP14Parser.RULE_characterliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2686;
        this.match(CPP14Parser.Characterliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FloatingliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_floatingliteral;
    return this;
}

FloatingliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloatingliteralContext.prototype.constructor = FloatingliteralContext;

FloatingliteralContext.prototype.Floatingliteral = function() {
    return this.getToken(CPP14Parser.Floatingliteral, 0);
};

FloatingliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitFloatingliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.FloatingliteralContext = FloatingliteralContext;

CPP14Parser.prototype.floatingliteral = function() {

    var localctx = new FloatingliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, CPP14Parser.RULE_floatingliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2688;
        this.match(CPP14Parser.Floatingliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_stringliteral;
    return this;
}

StringliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringliteralContext.prototype.constructor = StringliteralContext;

StringliteralContext.prototype.Stringliteral = function() {
    return this.getToken(CPP14Parser.Stringliteral, 0);
};

StringliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitStringliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.StringliteralContext = StringliteralContext;

CPP14Parser.prototype.stringliteral = function() {

    var localctx = new StringliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, CPP14Parser.RULE_stringliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2690;
        this.match(CPP14Parser.Stringliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_booleanliteral;
    return this;
}

BooleanliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanliteralContext.prototype.constructor = BooleanliteralContext;

BooleanliteralContext.prototype.Booleanliteral = function() {
    return this.getToken(CPP14Parser.Booleanliteral, 0);
};

BooleanliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitBooleanliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.BooleanliteralContext = BooleanliteralContext;

CPP14Parser.prototype.booleanliteral = function() {

    var localctx = new BooleanliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, CPP14Parser.RULE_booleanliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2692;
        this.match(CPP14Parser.Booleanliteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PointerliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_pointerliteral;
    return this;
}

PointerliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointerliteralContext.prototype.constructor = PointerliteralContext;

PointerliteralContext.prototype.Nullptr = function() {
    return this.getToken(CPP14Parser.Nullptr, 0);
};

PointerliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitPointerliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.PointerliteralContext = PointerliteralContext;

CPP14Parser.prototype.pointerliteral = function() {

    var localctx = new PointerliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, CPP14Parser.RULE_pointerliteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2694;
        this.match(CPP14Parser.Nullptr);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UserdefinedliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CPP14Parser.RULE_userdefinedliteral;
    return this;
}

UserdefinedliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserdefinedliteralContext.prototype.constructor = UserdefinedliteralContext;

UserdefinedliteralContext.prototype.Userdefinedintegerliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedintegerliteral, 0);
};

UserdefinedliteralContext.prototype.Userdefinedfloatingliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedfloatingliteral, 0);
};

UserdefinedliteralContext.prototype.Userdefinedstringliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedstringliteral, 0);
};

UserdefinedliteralContext.prototype.Userdefinedcharacterliteral = function() {
    return this.getToken(CPP14Parser.Userdefinedcharacterliteral, 0);
};

UserdefinedliteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CPP14Visitor ) {
        return visitor.visitUserdefinedliteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CPP14Parser.UserdefinedliteralContext = UserdefinedliteralContext;

CPP14Parser.prototype.userdefinedliteral = function() {

    var localctx = new UserdefinedliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, CPP14Parser.RULE_userdefinedliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2696;
        _la = this._input.LA(1);
        if(!(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (CPP14Parser.Userdefinedintegerliteral - 136)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 136)) | (1 << (CPP14Parser.Userdefinedstringliteral - 136)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 136)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CPP14Parser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 6:
			return this.nestednamespecifier_sempred(localctx, predIndex);
	case 11:
			return this.capturelist_sempred(localctx, predIndex);
	case 17:
			return this.postfixexpression_sempred(localctx, predIndex);
	case 28:
			return this.noptrnewdeclarator_sempred(localctx, predIndex);
	case 33:
			return this.pmexpression_sempred(localctx, predIndex);
	case 34:
			return this.multiplicativeexpression_sempred(localctx, predIndex);
	case 35:
			return this.additiveexpression_sempred(localctx, predIndex);
	case 36:
			return this.shiftexpression_sempred(localctx, predIndex);
	case 37:
			return this.relationalexpression_sempred(localctx, predIndex);
	case 38:
			return this.equalityexpression_sempred(localctx, predIndex);
	case 39:
			return this.andexpression_sempred(localctx, predIndex);
	case 40:
			return this.exclusiveorexpression_sempred(localctx, predIndex);
	case 41:
			return this.inclusiveorexpression_sempred(localctx, predIndex);
	case 42:
			return this.logicalandexpression_sempred(localctx, predIndex);
	case 43:
			return this.logicalorexpression_sempred(localctx, predIndex);
	case 47:
			return this.expression_sempred(localctx, predIndex);
	case 69:
			return this.declarationseq_sempred(localctx, predIndex);
	case 107:
			return this.enumeratorlist_sempred(localctx, predIndex);
	case 125:
			return this.attributespecifierseq_sempred(localctx, predIndex);
	case 128:
			return this.attributelist_sempred(localctx, predIndex);
	case 134:
			return this.balancedtokenseq_sempred(localctx, predIndex);
	case 140:
			return this.noptrdeclarator_sempred(localctx, predIndex);
	case 151:
			return this.noptrabstractdeclarator_sempred(localctx, predIndex);
	case 153:
			return this.noptrabstractpackdeclarator_sempred(localctx, predIndex);
	case 155:
			return this.parameterdeclarationlist_sempred(localctx, predIndex);
	case 177:
			return this.memberdeclaratorlist_sempred(localctx, predIndex);
	case 179:
			return this.virtspecifierseq_sempred(localctx, predIndex);
	case 183:
			return this.basespecifierlist_sempred(localctx, predIndex);
	case 198:
			return this.templateparameterlist_sempred(localctx, predIndex);
	case 204:
			return this.templateargumentlist_sempred(localctx, predIndex);
	case 217:
			return this.typeidlist_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CPP14Parser.prototype.nestednamespecifier_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.capturelist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.postfixexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 19);
		case 4:
			return this.precpred(this._ctx, 18);
		case 5:
			return this.precpred(this._ctx, 17);
		case 6:
			return this.precpred(this._ctx, 12);
		case 7:
			return this.precpred(this._ctx, 11);
		case 8:
			return this.precpred(this._ctx, 10);
		case 9:
			return this.precpred(this._ctx, 9);
		case 10:
			return this.precpred(this._ctx, 8);
		case 11:
			return this.precpred(this._ctx, 7);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrnewdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.pmexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 13:
			return this.precpred(this._ctx, 2);
		case 14:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.multiplicativeexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 15:
			return this.precpred(this._ctx, 3);
		case 16:
			return this.precpred(this._ctx, 2);
		case 17:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.additiveexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 18:
			return this.precpred(this._ctx, 2);
		case 19:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.shiftexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 20:
			return this.precpred(this._ctx, 2);
		case 21:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.relationalexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 22:
			return this.precpred(this._ctx, 4);
		case 23:
			return this.precpred(this._ctx, 3);
		case 24:
			return this.precpred(this._ctx, 2);
		case 25:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.equalityexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 26:
			return this.precpred(this._ctx, 2);
		case 27:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.andexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 28:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.exclusiveorexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.inclusiveorexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 30:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.logicalandexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 31:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.logicalorexpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 32:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.declarationseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.enumeratorlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.attributespecifierseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 36:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.attributelist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 37:
			return this.precpred(this._ctx, 3);
		case 38:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.balancedtokenseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 39:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 40:
			return this.precpred(this._ctx, 3);
		case 41:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrabstractdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 42:
			return this.precpred(this._ctx, 5);
		case 43:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.noptrabstractpackdeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 44:
			return this.precpred(this._ctx, 3);
		case 45:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.parameterdeclarationlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 46:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.memberdeclaratorlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.virtspecifierseq_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 48:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.basespecifierlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 49:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.templateparameterlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 50:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.templateargumentlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 51:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CPP14Parser.prototype.typeidlist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 52:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CPP14Parser = CPP14Parser;
